Starting parse
Entering state 0
Reading a token: Next token is token INT (2.1-3: )
Shifting token INT (2.1-3: )
Entering state 2
Reducing stack by rule 10 (line 228):
   $1 = token INT (2.1-3: )
-> $$ = nterm type_specifier (2.1-3: )
Stack now 0
Entering state 8
Reading a token: Next token is token IDENTIFIER (2.5-8: main)
Shifting token IDENTIFIER (2.5-8: main)
Entering state 13
Reading a token: Next token is token '(' (2.9: )
Shifting token '(' (2.9: )
Entering state 16
Reading a token: Next token is token ')' (2.10: )
Shifting token ')' (2.10: )
Entering state 20
Reducing stack by rule 14 (line 244):
   $1 = token IDENTIFIER (2.5-8: main)
   $2 = token '(' (2.9: )
   $3 = token ')' (2.10: )
-> $$ = nterm fun_declarator (2.5-10: )
Stack now 8 0
Entering state 14
Reducing stack by rule 7 (line 159):
-> $$ = nterm $@2 (2.11: )
Stack now 14 8 0
Entering state 17
Reading a token: Next token is token '{' (2.11: )
Shifting token '{' (2.11: )
Entering state 24
Reading a token: Next token is token FLOAT (3.2-6: )
Shifting token FLOAT (3.2-6: )
Entering state 3
Reducing stack by rule 11 (line 231):
   $1 = token FLOAT (3.2-6: )
-> $$ = nterm type_specifier (3.2-6: )
Stack now 24 17 14 8 0
Entering state 26
Reading a token: Next token is token IDENTIFIER (3.8: a)
Shifting token IDENTIFIER (3.8: a)
Entering state 30
Reducing stack by rule 18 (line 275):
   $1 = token IDENTIFIER (3.8: a)
-> $$ = nterm declarator_arr (3.8: )
Stack now 26 24 17 14 8 0
Entering state 32
Reading a token: Next token is token ',' (3.9: )
Reducing stack by rule 20 (line 294):
   $1 = nterm declarator_arr (3.8: )
-> $$ = nterm declarator (3.8: )
Stack now 26 24 17 14 8 0
Entering state 64
Reducing stack by rule 25 (line 414):
   $1 = nterm declarator (3.8: )
-> $$ = nterm declarator_list (3.8: )
Stack now 26 24 17 14 8 0
Entering state 65
Next token is token ',' (3.9: )
Shifting token ',' (3.9: )
Entering state 96
Reading a token: Next token is token IDENTIFIER (3.11: b)
Shifting token IDENTIFIER (3.11: b)
Entering state 30
Reducing stack by rule 18 (line 275):
   $1 = token IDENTIFIER (3.11: b)
-> $$ = nterm declarator_arr (3.11: )
Stack now 96 65 26 24 17 14 8 0
Entering state 32
Reading a token: Next token is token ',' (3.12: )
Reducing stack by rule 20 (line 294):
   $1 = nterm declarator_arr (3.11: )
-> $$ = nterm declarator (3.11: )
Stack now 96 65 26 24 17 14 8 0
Entering state 127
Reducing stack by rule 26 (line 418):
   $1 = nterm declarator_list (3.8: )
   $2 = token ',' (3.9: )
   $3 = nterm declarator (3.11: )
-> $$ = nterm declarator_list (3.8-11: )
Stack now 26 24 17 14 8 0
Entering state 65
Next token is token ',' (3.12: )
Shifting token ',' (3.12: )
Entering state 96
Reading a token: Next token is token IDENTIFIER (3.14: c)
Shifting token IDENTIFIER (3.14: c)
Entering state 30
Reducing stack by rule 18 (line 275):
   $1 = token IDENTIFIER (3.14: c)
-> $$ = nterm declarator_arr (3.14: )
Stack now 96 65 26 24 17 14 8 0
Entering state 32
Reading a token: Next token is token ',' (3.15: )
Reducing stack by rule 20 (line 294):
   $1 = nterm declarator_arr (3.14: )
-> $$ = nterm declarator (3.14: )
Stack now 96 65 26 24 17 14 8 0
Entering state 127
Reducing stack by rule 26 (line 418):
   $1 = nterm declarator_list (3.8-11: )
   $2 = token ',' (3.12: )
   $3 = nterm declarator (3.14: )
-> $$ = nterm declarator_list (3.8-14: )
Stack now 26 24 17 14 8 0
Entering state 65
Next token is token ',' (3.15: )
Shifting token ',' (3.15: )
Entering state 96
Reading a token: Next token is token IDENTIFIER (3.17: d)
Shifting token IDENTIFIER (3.17: d)
Entering state 30
Reducing stack by rule 18 (line 275):
   $1 = token IDENTIFIER (3.17: d)
-> $$ = nterm declarator_arr (3.17: )
Stack now 96 65 26 24 17 14 8 0
Entering state 32
Reading a token: Next token is token ';' (3.18: )
Reducing stack by rule 20 (line 294):
   $1 = nterm declarator_arr (3.17: )
-> $$ = nterm declarator (3.17: )
Stack now 96 65 26 24 17 14 8 0
Entering state 127
Reducing stack by rule 26 (line 418):
   $1 = nterm declarator_list (3.8-14: )
   $2 = token ',' (3.15: )
   $3 = nterm declarator (3.17: )
-> $$ = nterm declarator_list (3.8-17: )
Stack now 26 24 17 14 8 0
Entering state 65
Next token is token ';' (3.18: )
Shifting token ';' (3.18: )
Entering state 97
Reducing stack by rule 24 (line 408):
   $1 = nterm type_specifier (3.2-6: )
   $2 = nterm declarator_list (3.8-17: )
   $3 = token ';' (3.18: )
-> $$ = nterm declaration (3.2-18: )
Stack now 24 17 14 8 0
Entering state 27
Reducing stack by rule 22 (line 304):
   $1 = nterm declaration (3.2-18: )
-> $$ = nterm declaration_list (3.2-18: )
Stack now 24 17 14 8 0
Entering state 52
Reading a token: Next token is token FLOAT (4.2-6: )
Shifting token FLOAT (4.2-6: )
Entering state 3
Reducing stack by rule 11 (line 231):
   $1 = token FLOAT (4.2-6: )
-> $$ = nterm type_specifier (4.2-6: )
Stack now 52 24 17 14 8 0
Entering state 26
Reading a token: Next token is token IDENTIFIER (4.8: z)
Shifting token IDENTIFIER (4.8: z)
Entering state 30
Reducing stack by rule 18 (line 275):
   $1 = token IDENTIFIER (4.8: z)
-> $$ = nterm declarator_arr (4.8: )
Stack now 26 52 24 17 14 8 0
Entering state 32
Reading a token: Next token is token ';' (4.9: )
Reducing stack by rule 20 (line 294):
   $1 = nterm declarator_arr (4.8: )
-> $$ = nterm declarator (4.8: )
Stack now 26 52 24 17 14 8 0
Entering state 64
Reducing stack by rule 25 (line 414):
   $1 = nterm declarator (4.8: )
-> $$ = nterm declarator_list (4.8: )
Stack now 26 52 24 17 14 8 0
Entering state 65
Next token is token ';' (4.9: )
Shifting token ';' (4.9: )
Entering state 97
Reducing stack by rule 24 (line 408):
   $1 = nterm type_specifier (4.2-6: )
   $2 = nterm declarator_list (4.8: )
   $3 = token ';' (4.9: )
-> $$ = nterm declaration (4.2-9: )
Stack now 52 24 17 14 8 0
Entering state 67
Reducing stack by rule 23 (line 356):
   $1 = nterm declaration_list (3.2-18: )
   $2 = nterm declaration (4.2-9: )
-> $$ = nterm declaration_list (3.2-4.9: )
Stack now 24 17 14 8 0
Entering state 52
Reading a token: Next token is token IDENTIFIER (5.2: a)
Shifting token IDENTIFIER (5.2: a)
Entering state 40
Reading a token: Next token is token '=' (5.4: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (5.2: a)
-> $$ = nterm primary_expression (5.2: )
Stack now 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (5.2: )
-> $$ = nterm postfix_expression (5.2: )
Stack now 52 24 17 14 8 0
Entering state 58
Next token is token '=' (5.4: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (5.2: )
-> $$ = nterm unary_expression (5.2: )
Stack now 52 24 17 14 8 0
Entering state 57
Next token is token '=' (5.4: )
Shifting token '=' (5.4: )
Entering state 90
Reading a token: Next token is token FLOAT_CONSTANT (5.6-8: 1.0)
Shifting token FLOAT_CONSTANT (5.6-8: 1.0)
Entering state 42
Reducing stack by rule 73 (line 1377):
   $1 = token FLOAT_CONSTANT (5.6-8: 1.0)
-> $$ = nterm primary_expression (5.6-8: )
Stack now 90 57 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (5.6-8: )
-> $$ = nterm postfix_expression (5.6-8: )
Stack now 90 57 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ';' (5.9: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (5.6-8: )
-> $$ = nterm unary_expression (5.6-8: )
Stack now 90 57 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (5.6-8: )
-> $$ = nterm multiplicative_expression (5.6-8: )
Stack now 90 57 52 24 17 14 8 0
Entering state 77
Next token is token ';' (5.9: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (5.6-8: )
-> $$ = nterm additive_expression (5.6-8: )
Stack now 90 57 52 24 17 14 8 0
Entering state 76
Next token is token ';' (5.9: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (5.6-8: )
-> $$ = nterm relational_expression (5.6-8: )
Stack now 90 57 52 24 17 14 8 0
Entering state 75
Next token is token ';' (5.9: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (5.6-8: )
-> $$ = nterm equality_expression (5.6-8: )
Stack now 90 57 52 24 17 14 8 0
Entering state 74
Next token is token ';' (5.9: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (5.6-8: )
-> $$ = nterm logical_and_expression (5.6-8: )
Stack now 90 57 52 24 17 14 8 0
Entering state 73
Next token is token ';' (5.9: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (5.6-8: )
-> $$ = nterm expression (5.6-8: )
Stack now 90 57 52 24 17 14 8 0
Entering state 123
Next token is token ';' (5.9: )
Reducing stack by rule 40 (line 506):
   $1 = nterm unary_expression (5.2: )
   $2 = token '=' (5.4: )
   $3 = nterm expression (5.6-8: )
-> $$ = nterm assignment_expression (5.2-8: )
Stack now 52 24 17 14 8 0
Entering state 56
Next token is token ';' (5.9: )
Shifting token ';' (5.9: )
Entering state 89
Reducing stack by rule 41 (line 559):
   $1 = nterm assignment_expression (5.2-8: )
   $2 = token ';' (5.9: )
-> $$ = nterm assignment_statement (5.2-9: )
Stack now 52 24 17 14 8 0
Entering state 54
Reducing stack by rule 37 (line 469):
   $1 = nterm assignment_statement (5.2-9: )
-> $$ = nterm statement (5.2-9: )
Stack now 52 24 17 14 8 0
Entering state 53
Reducing stack by rule 31 (line 444):
   $1 = nterm statement (5.2-9: )
-> $$ = nterm statement_list (5.2-9: )
Stack now 52 24 17 14 8 0
Entering state 86
Reading a token: Next token is token IDENTIFIER (6.2: b)
Shifting token IDENTIFIER (6.2: b)
Entering state 40
Reading a token: Next token is token '=' (6.4: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (6.2: b)
-> $$ = nterm primary_expression (6.2: )
Stack now 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (6.2: )
-> $$ = nterm postfix_expression (6.2: )
Stack now 86 52 24 17 14 8 0
Entering state 58
Next token is token '=' (6.4: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (6.2: )
-> $$ = nterm unary_expression (6.2: )
Stack now 86 52 24 17 14 8 0
Entering state 57
Next token is token '=' (6.4: )
Shifting token '=' (6.4: )
Entering state 90
Reading a token: Next token is token INT_CONSTANT (6.6: 4)
Shifting token INT_CONSTANT (6.6: 4)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (6.6: 4)
-> $$ = nterm primary_expression (6.6: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (6.6: )
-> $$ = nterm postfix_expression (6.6: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ';' (6.7: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (6.6: )
-> $$ = nterm unary_expression (6.6: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (6.6: )
-> $$ = nterm multiplicative_expression (6.6: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 77
Next token is token ';' (6.7: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (6.6: )
-> $$ = nterm additive_expression (6.6: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 76
Next token is token ';' (6.7: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (6.6: )
-> $$ = nterm relational_expression (6.6: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 75
Next token is token ';' (6.7: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (6.6: )
-> $$ = nterm equality_expression (6.6: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 74
Next token is token ';' (6.7: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (6.6: )
-> $$ = nterm logical_and_expression (6.6: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 73
Next token is token ';' (6.7: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (6.6: )
-> $$ = nterm expression (6.6: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 123
Next token is token ';' (6.7: )
Reducing stack by rule 40 (line 506):
   $1 = nterm unary_expression (6.2: )
   $2 = token '=' (6.4: )
   $3 = nterm expression (6.6: )
-> $$ = nterm assignment_expression (6.2-6: )
Stack now 86 52 24 17 14 8 0
Entering state 56
Next token is token ';' (6.7: )
Shifting token ';' (6.7: )
Entering state 89
Reducing stack by rule 41 (line 559):
   $1 = nterm assignment_expression (6.2-6: )
   $2 = token ';' (6.7: )
-> $$ = nterm assignment_statement (6.2-7: )
Stack now 86 52 24 17 14 8 0
Entering state 54
Reducing stack by rule 37 (line 469):
   $1 = nterm assignment_statement (6.2-7: )
-> $$ = nterm statement (6.2-7: )
Stack now 86 52 24 17 14 8 0
Entering state 88
Reducing stack by rule 32 (line 449):
   $1 = nterm statement_list (5.2-9: )
   $2 = nterm statement (6.2-7: )
-> $$ = nterm statement_list (5.2-6.7: )
Stack now 52 24 17 14 8 0
Entering state 86
Reading a token: Next token is token IF (7.2-3: )
Shifting token IF (7.2-3: )
Entering state 39
Reading a token: Next token is token '(' (7.4: )
Shifting token '(' (7.4: )
Entering state 81
Reading a token: Next token is token IDENTIFIER (7.5: a)
Shifting token IDENTIFIER (7.5: a)
Entering state 71
Reading a token: Next token is token AND_OP (7.7-8: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (7.5: a)
-> $$ = nterm primary_expression (7.5: )
Stack now 81 39 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (7.5: )
-> $$ = nterm postfix_expression (7.5: )
Stack now 81 39 86 52 24 17 14 8 0
Entering state 58
Next token is token AND_OP (7.7-8: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (7.5: )
-> $$ = nterm unary_expression (7.5: )
Stack now 81 39 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (7.5: )
-> $$ = nterm multiplicative_expression (7.5: )
Stack now 81 39 86 52 24 17 14 8 0
Entering state 77
Next token is token AND_OP (7.7-8: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (7.5: )
-> $$ = nterm additive_expression (7.5: )
Stack now 81 39 86 52 24 17 14 8 0
Entering state 76
Next token is token AND_OP (7.7-8: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (7.5: )
-> $$ = nterm relational_expression (7.5: )
Stack now 81 39 86 52 24 17 14 8 0
Entering state 75
Next token is token AND_OP (7.7-8: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (7.5: )
-> $$ = nterm equality_expression (7.5: )
Stack now 81 39 86 52 24 17 14 8 0
Entering state 74
Next token is token AND_OP (7.7-8: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (7.5: )
-> $$ = nterm logical_and_expression (7.5: )
Stack now 81 39 86 52 24 17 14 8 0
Entering state 73
Next token is token AND_OP (7.7-8: )
Shifting token AND_OP (7.7-8: )
Entering state 103
Reading a token: Next token is token '(' (7.10: )
Shifting token '(' (7.10: )
Entering state 44
Reading a token: Next token is token '(' (7.11: )
Shifting token '(' (7.11: )
Entering state 44
Reading a token: Next token is token IDENTIFIER (7.12: z)
Shifting token IDENTIFIER (7.12: z)
Entering state 71
Reading a token: Next token is token '+' (7.13: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (7.12: z)
-> $$ = nterm primary_expression (7.12: )
Stack now 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (7.12: )
-> $$ = nterm postfix_expression (7.12: )
Stack now 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 58
Next token is token '+' (7.13: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (7.12: )
-> $$ = nterm unary_expression (7.12: )
Stack now 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (7.12: )
-> $$ = nterm multiplicative_expression (7.12: )
Stack now 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 77
Next token is token '+' (7.13: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (7.12: )
-> $$ = nterm additive_expression (7.12: )
Stack now 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 76
Next token is token '+' (7.13: )
Shifting token '+' (7.13: )
Entering state 110
Reading a token: Next token is token '(' (7.14: )
Shifting token '(' (7.14: )
Entering state 44
Reading a token: Next token is token IDENTIFIER (7.15: a)
Shifting token IDENTIFIER (7.15: a)
Entering state 71
Reading a token: Next token is token '+' (7.17: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (7.15: a)
-> $$ = nterm primary_expression (7.15: )
Stack now 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (7.15: )
-> $$ = nterm postfix_expression (7.15: )
Stack now 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 58
Next token is token '+' (7.17: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (7.15: )
-> $$ = nterm unary_expression (7.15: )
Stack now 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (7.15: )
-> $$ = nterm multiplicative_expression (7.15: )
Stack now 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 77
Next token is token '+' (7.17: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (7.15: )
-> $$ = nterm additive_expression (7.15: )
Stack now 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 76
Next token is token '+' (7.17: )
Shifting token '+' (7.17: )
Entering state 110
Reading a token: Next token is token INT_CONSTANT (7.19: 3)
Shifting token INT_CONSTANT (7.19: 3)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (7.19: 3)
-> $$ = nterm primary_expression (7.19: )
Stack now 110 76 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (7.19: )
-> $$ = nterm postfix_expression (7.19: )
Stack now 110 76 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token GE_OP (7.21-22: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (7.19: )
-> $$ = nterm unary_expression (7.19: )
Stack now 110 76 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (7.19: )
-> $$ = nterm multiplicative_expression (7.19: )
Stack now 110 76 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 139
Next token is token GE_OP (7.21-22: )
Reducing stack by rule 57 (line 954):
   $1 = nterm additive_expression (7.15: )
   $2 = token '+' (7.17: )
   $3 = nterm multiplicative_expression (7.19: )
-> $$ = nterm additive_expression (7.15-19: )
Stack now 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 76
Next token is token GE_OP (7.21-22: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (7.15-19: )
-> $$ = nterm relational_expression (7.15-19: )
Stack now 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 75
Next token is token GE_OP (7.21-22: )
Shifting token GE_OP (7.21-22: )
Entering state 109
Reading a token: Next token is token INT_CONSTANT (7.24: 5)
Shifting token INT_CONSTANT (7.24: 5)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (7.24: 5)
-> $$ = nterm primary_expression (7.24: )
Stack now 109 75 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (7.24: )
-> $$ = nterm postfix_expression (7.24: )
Stack now 109 75 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token AND_OP (7.26-27: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (7.24: )
-> $$ = nterm unary_expression (7.24: )
Stack now 109 75 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (7.24: )
-> $$ = nterm multiplicative_expression (7.24: )
Stack now 109 75 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 77
Next token is token AND_OP (7.26-27: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (7.24: )
-> $$ = nterm additive_expression (7.24: )
Stack now 109 75 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 138
Next token is token AND_OP (7.26-27: )
Reducing stack by rule 55 (line 904):
   $1 = nterm relational_expression (7.15-19: )
   $2 = token GE_OP (7.21-22: )
   $3 = nterm additive_expression (7.24: )
-> $$ = nterm relational_expression (7.15-24: )
Stack now 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 75
Next token is token AND_OP (7.26-27: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (7.15-24: )
-> $$ = nterm equality_expression (7.15-24: )
Stack now 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 74
Next token is token AND_OP (7.26-27: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (7.15-24: )
-> $$ = nterm logical_and_expression (7.15-24: )
Stack now 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 73
Next token is token AND_OP (7.26-27: )
Shifting token AND_OP (7.26-27: )
Entering state 103
Reading a token: Next token is token '!' (7.29: )
Shifting token '!' (7.29: )
Entering state 47
Reducing stack by rule 79 (line 1407):
   $1 = token '!' (7.29: )
-> $$ = nterm unary_operator (7.29: )
Stack now 103 73 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 60
Reading a token: Next token is token '(' (7.30: )
Shifting token '(' (7.30: )
Entering state 44
Reading a token: Next token is token IDENTIFIER (7.31: b)
Shifting token IDENTIFIER (7.31: b)
Entering state 71
Reading a token: Next token is token '<' (7.33: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (7.31: b)
-> $$ = nterm primary_expression (7.31: )
Stack now 44 60 103 73 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (7.31: )
-> $$ = nterm postfix_expression (7.31: )
Stack now 44 60 103 73 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 58
Next token is token '<' (7.33: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (7.31: )
-> $$ = nterm unary_expression (7.31: )
Stack now 44 60 103 73 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (7.31: )
-> $$ = nterm multiplicative_expression (7.31: )
Stack now 44 60 103 73 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 77
Next token is token '<' (7.33: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (7.31: )
-> $$ = nterm additive_expression (7.31: )
Stack now 44 60 103 73 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 76
Next token is token '<' (7.33: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (7.31: )
-> $$ = nterm relational_expression (7.31: )
Stack now 44 60 103 73 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 75
Next token is token '<' (7.33: )
Shifting token '<' (7.33: )
Entering state 106
Reading a token: Next token is token INT_CONSTANT (7.35: 5)
Shifting token INT_CONSTANT (7.35: 5)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (7.35: 5)
-> $$ = nterm primary_expression (7.35: )
Stack now 106 75 44 60 103 73 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (7.35: )
-> $$ = nterm postfix_expression (7.35: )
Stack now 106 75 44 60 103 73 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ')' (7.36: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (7.35: )
-> $$ = nterm unary_expression (7.35: )
Stack now 106 75 44 60 103 73 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (7.35: )
-> $$ = nterm multiplicative_expression (7.35: )
Stack now 106 75 44 60 103 73 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 77
Next token is token ')' (7.36: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (7.35: )
-> $$ = nterm additive_expression (7.35: )
Stack now 106 75 44 60 103 73 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 135
Next token is token ')' (7.36: )
Reducing stack by rule 52 (line 779):
   $1 = nterm relational_expression (7.31: )
   $2 = token '<' (7.33: )
   $3 = nterm additive_expression (7.35: )
-> $$ = nterm relational_expression (7.31-35: )
Stack now 44 60 103 73 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 75
Next token is token ')' (7.36: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (7.31-35: )
-> $$ = nterm equality_expression (7.31-35: )
Stack now 44 60 103 73 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 74
Next token is token ')' (7.36: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (7.31-35: )
-> $$ = nterm logical_and_expression (7.31-35: )
Stack now 44 60 103 73 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 73
Next token is token ')' (7.36: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (7.31-35: )
-> $$ = nterm expression (7.31-35: )
Stack now 44 60 103 73 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 83
Next token is token ')' (7.36: )
Shifting token ')' (7.36: )
Entering state 120
Reducing stack by rule 75 (line 1387):
   $1 = token '(' (7.30: )
   $2 = nterm expression (7.31-35: )
   $3 = token ')' (7.36: )
-> $$ = nterm primary_expression (7.30-36: )
Stack now 60 103 73 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (7.30-36: )
-> $$ = nterm postfix_expression (7.30-36: )
Stack now 60 103 73 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ')' (7.37: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (7.30-36: )
-> $$ = nterm unary_expression (7.30-36: )
Stack now 60 103 73 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 95
Reducing stack by rule 60 (line 1063):
   $1 = nterm unary_operator (7.29: )
   $2 = nterm unary_expression (7.30-36: )
-> $$ = nterm unary_expression (7.29-36: )
Stack now 103 73 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (7.29-36: )
-> $$ = nterm multiplicative_expression (7.29-36: )
Stack now 103 73 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 77
Next token is token ')' (7.37: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (7.29-36: )
-> $$ = nterm additive_expression (7.29-36: )
Stack now 103 73 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 76
Next token is token ')' (7.37: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (7.29-36: )
-> $$ = nterm relational_expression (7.29-36: )
Stack now 103 73 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 75
Next token is token ')' (7.37: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (7.29-36: )
-> $$ = nterm equality_expression (7.29-36: )
Stack now 103 73 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 132
Next token is token ')' (7.37: )
Reducing stack by rule 47 (line 680):
   $1 = nterm logical_and_expression (7.15-24: )
   $2 = token AND_OP (7.26-27: )
   $3 = nterm equality_expression (7.29-36: )
-> $$ = nterm logical_and_expression (7.15-36: )
Stack now 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 73
Next token is token ')' (7.37: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (7.15-36: )
-> $$ = nterm expression (7.15-36: )
Stack now 44 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 83
Next token is token ')' (7.37: )
Shifting token ')' (7.37: )
Entering state 120
Reducing stack by rule 75 (line 1387):
   $1 = token '(' (7.14: )
   $2 = nterm expression (7.15-36: )
   $3 = token ')' (7.37: )
-> $$ = nterm primary_expression (7.14-37: )
Stack now 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (7.14-37: )
-> $$ = nterm postfix_expression (7.14-37: )
Stack now 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token OR_OP (7.39-40: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (7.14-37: )
-> $$ = nterm unary_expression (7.14-37: )
Stack now 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (7.14-37: )
-> $$ = nterm multiplicative_expression (7.14-37: )
Stack now 110 76 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 139
Next token is token OR_OP (7.39-40: )
Reducing stack by rule 57 (line 954):
   $1 = nterm additive_expression (7.12: )
   $2 = token '+' (7.13: )
   $3 = nterm multiplicative_expression (7.14-37: )
-> $$ = nterm additive_expression (7.12-37: )
Stack now 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 76
Next token is token OR_OP (7.39-40: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (7.12-37: )
-> $$ = nterm relational_expression (7.12-37: )
Stack now 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 75
Next token is token OR_OP (7.39-40: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (7.12-37: )
-> $$ = nterm equality_expression (7.12-37: )
Stack now 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 74
Next token is token OR_OP (7.39-40: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (7.12-37: )
-> $$ = nterm logical_and_expression (7.12-37: )
Stack now 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 73
Next token is token OR_OP (7.39-40: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (7.12-37: )
-> $$ = nterm expression (7.12-37: )
Stack now 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 83
Next token is token OR_OP (7.39-40: )
Shifting token OR_OP (7.39-40: )
Entering state 101
Reading a token: Next token is token IDENTIFIER (7.42: a)
Shifting token IDENTIFIER (7.42: a)
Entering state 71
Reading a token: Next token is token '*' (7.44: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (7.42: a)
-> $$ = nterm primary_expression (7.42: )
Stack now 101 83 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (7.42: )
-> $$ = nterm postfix_expression (7.42: )
Stack now 101 83 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 58
Next token is token '*' (7.44: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (7.42: )
-> $$ = nterm unary_expression (7.42: )
Stack now 101 83 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (7.42: )
-> $$ = nterm multiplicative_expression (7.42: )
Stack now 101 83 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 77
Next token is token '*' (7.44: )
Shifting token '*' (7.44: )
Entering state 112
Reading a token: Next token is token IDENTIFIER (7.46: b)
Shifting token IDENTIFIER (7.46: b)
Entering state 71
Reading a token: Next token is token '+' (7.48: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (7.46: b)
-> $$ = nterm primary_expression (7.46: )
Stack now 112 77 101 83 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (7.46: )
-> $$ = nterm postfix_expression (7.46: )
Stack now 112 77 101 83 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 58
Next token is token '+' (7.48: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (7.46: )
-> $$ = nterm unary_expression (7.46: )
Stack now 112 77 101 83 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 141
Reducing stack by rule 62 (line 1127):
   $1 = nterm multiplicative_expression (7.42: )
   $2 = token '*' (7.44: )
   $3 = nterm unary_expression (7.46: )
-> $$ = nterm multiplicative_expression (7.42-46: )
Stack now 101 83 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 77
Next token is token '+' (7.48: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (7.42-46: )
-> $$ = nterm additive_expression (7.42-46: )
Stack now 101 83 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 76
Next token is token '+' (7.48: )
Shifting token '+' (7.48: )
Entering state 110
Reading a token: Next token is token IDENTIFIER (7.50: b)
Shifting token IDENTIFIER (7.50: b)
Entering state 71
Reading a token: Next token is token NE_OP (7.52-53: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (7.50: b)
-> $$ = nterm primary_expression (7.50: )
Stack now 110 76 101 83 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (7.50: )
-> $$ = nterm postfix_expression (7.50: )
Stack now 110 76 101 83 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 58
Next token is token NE_OP (7.52-53: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (7.50: )
-> $$ = nterm unary_expression (7.50: )
Stack now 110 76 101 83 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (7.50: )
-> $$ = nterm multiplicative_expression (7.50: )
Stack now 110 76 101 83 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 139
Next token is token NE_OP (7.52-53: )
Reducing stack by rule 57 (line 954):
   $1 = nterm additive_expression (7.42-46: )
   $2 = token '+' (7.48: )
   $3 = nterm multiplicative_expression (7.50: )
-> $$ = nterm additive_expression (7.42-50: )
Stack now 101 83 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 76
Next token is token NE_OP (7.52-53: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (7.42-50: )
-> $$ = nterm relational_expression (7.42-50: )
Stack now 101 83 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 75
Next token is token NE_OP (7.52-53: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (7.42-50: )
-> $$ = nterm equality_expression (7.42-50: )
Stack now 101 83 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 74
Next token is token NE_OP (7.52-53: )
Shifting token NE_OP (7.52-53: )
Entering state 105
Reading a token: Next token is token INT_CONSTANT (7.55: 7)
Shifting token INT_CONSTANT (7.55: 7)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (7.55: 7)
-> $$ = nterm primary_expression (7.55: )
Stack now 105 74 101 83 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (7.55: )
-> $$ = nterm postfix_expression (7.55: )
Stack now 105 74 101 83 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ')' (7.56: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (7.55: )
-> $$ = nterm unary_expression (7.55: )
Stack now 105 74 101 83 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (7.55: )
-> $$ = nterm multiplicative_expression (7.55: )
Stack now 105 74 101 83 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 77
Next token is token ')' (7.56: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (7.55: )
-> $$ = nterm additive_expression (7.55: )
Stack now 105 74 101 83 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 76
Next token is token ')' (7.56: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (7.55: )
-> $$ = nterm relational_expression (7.55: )
Stack now 105 74 101 83 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 134
Next token is token ')' (7.56: )
Reducing stack by rule 50 (line 739):
   $1 = nterm equality_expression (7.42-50: )
   $2 = token NE_OP (7.52-53: )
   $3 = nterm relational_expression (7.55: )
-> $$ = nterm equality_expression (7.42-55: )
Stack now 101 83 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 74
Next token is token ')' (7.56: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (7.42-55: )
-> $$ = nterm logical_and_expression (7.42-55: )
Stack now 101 83 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 131
Next token is token ')' (7.56: )
Reducing stack by rule 45 (line 657):
   $1 = nterm expression (7.12-37: )
   $2 = token OR_OP (7.39-40: )
   $3 = nterm logical_and_expression (7.42-55: )
-> $$ = nterm expression (7.12-55: )
Stack now 44 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 83
Next token is token ')' (7.56: )
Shifting token ')' (7.56: )
Entering state 120
Reducing stack by rule 75 (line 1387):
   $1 = token '(' (7.11: )
   $2 = nterm expression (7.12-55: )
   $3 = token ')' (7.56: )
-> $$ = nterm primary_expression (7.11-56: )
Stack now 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (7.11-56: )
-> $$ = nterm postfix_expression (7.11-56: )
Stack now 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token AND_OP (7.58-59: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (7.11-56: )
-> $$ = nterm unary_expression (7.11-56: )
Stack now 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (7.11-56: )
-> $$ = nterm multiplicative_expression (7.11-56: )
Stack now 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 77
Next token is token AND_OP (7.58-59: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (7.11-56: )
-> $$ = nterm additive_expression (7.11-56: )
Stack now 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 76
Next token is token AND_OP (7.58-59: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (7.11-56: )
-> $$ = nterm relational_expression (7.11-56: )
Stack now 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 75
Next token is token AND_OP (7.58-59: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (7.11-56: )
-> $$ = nterm equality_expression (7.11-56: )
Stack now 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 74
Next token is token AND_OP (7.58-59: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (7.11-56: )
-> $$ = nterm logical_and_expression (7.11-56: )
Stack now 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 73
Next token is token AND_OP (7.58-59: )
Shifting token AND_OP (7.58-59: )
Entering state 103
Reading a token: Next token is token IDENTIFIER (7.61: d)
Shifting token IDENTIFIER (7.61: d)
Entering state 71
Reading a token: Next token is token INC_OP (7.62-63: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (7.61: d)
-> $$ = nterm primary_expression (7.61: )
Stack now 103 73 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (7.61: )
-> $$ = nterm postfix_expression (7.61: )
Stack now 103 73 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 58
Next token is token INC_OP (7.62-63: )
Shifting token INC_OP (7.62-63: )
Entering state 94
Reducing stack by rule 70 (line 1336):
   $1 = nterm postfix_expression (7.61: )
   $2 = token INC_OP (7.62-63: )
-> $$ = nterm postfix_expression (7.61-63: )
Stack now 103 73 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ')' (7.64: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (7.61-63: )
-> $$ = nterm unary_expression (7.61-63: )
Stack now 103 73 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (7.61-63: )
-> $$ = nterm multiplicative_expression (7.61-63: )
Stack now 103 73 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 77
Next token is token ')' (7.64: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (7.61-63: )
-> $$ = nterm additive_expression (7.61-63: )
Stack now 103 73 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 76
Next token is token ')' (7.64: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (7.61-63: )
-> $$ = nterm relational_expression (7.61-63: )
Stack now 103 73 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 75
Next token is token ')' (7.64: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (7.61-63: )
-> $$ = nterm equality_expression (7.61-63: )
Stack now 103 73 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 132
Next token is token ')' (7.64: )
Reducing stack by rule 47 (line 680):
   $1 = nterm logical_and_expression (7.11-56: )
   $2 = token AND_OP (7.58-59: )
   $3 = nterm equality_expression (7.61-63: )
-> $$ = nterm logical_and_expression (7.11-63: )
Stack now 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 73
Next token is token ')' (7.64: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (7.11-63: )
-> $$ = nterm expression (7.11-63: )
Stack now 44 103 73 81 39 86 52 24 17 14 8 0
Entering state 83
Next token is token ')' (7.64: )
Shifting token ')' (7.64: )
Entering state 120
Reducing stack by rule 75 (line 1387):
   $1 = token '(' (7.10: )
   $2 = nterm expression (7.11-63: )
   $3 = token ')' (7.64: )
-> $$ = nterm primary_expression (7.10-64: )
Stack now 103 73 81 39 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (7.10-64: )
-> $$ = nterm postfix_expression (7.10-64: )
Stack now 103 73 81 39 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ')' (7.66: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (7.10-64: )
-> $$ = nterm unary_expression (7.10-64: )
Stack now 103 73 81 39 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (7.10-64: )
-> $$ = nterm multiplicative_expression (7.10-64: )
Stack now 103 73 81 39 86 52 24 17 14 8 0
Entering state 77
Next token is token ')' (7.66: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (7.10-64: )
-> $$ = nterm additive_expression (7.10-64: )
Stack now 103 73 81 39 86 52 24 17 14 8 0
Entering state 76
Next token is token ')' (7.66: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (7.10-64: )
-> $$ = nterm relational_expression (7.10-64: )
Stack now 103 73 81 39 86 52 24 17 14 8 0
Entering state 75
Next token is token ')' (7.66: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (7.10-64: )
-> $$ = nterm equality_expression (7.10-64: )
Stack now 103 73 81 39 86 52 24 17 14 8 0
Entering state 132
Next token is token ')' (7.66: )
Reducing stack by rule 47 (line 680):
   $1 = nterm logical_and_expression (7.5: )
   $2 = token AND_OP (7.7-8: )
   $3 = nterm equality_expression (7.10-64: )
-> $$ = nterm logical_and_expression (7.5-64: )
Stack now 81 39 86 52 24 17 14 8 0
Entering state 73
Next token is token ')' (7.66: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (7.5-64: )
-> $$ = nterm expression (7.5-64: )
Stack now 81 39 86 52 24 17 14 8 0
Entering state 116
Next token is token ')' (7.66: )
Shifting token ')' (7.66: )
Entering state 145
Reading a token: Next token is token '{' (9.2: )
Shifting token '{' (9.2: )
Entering state 45
Reading a token: Next token is token IDENTIFIER (10.3-8: printf)
Shifting token IDENTIFIER (10.3-8: printf)
Entering state 40
Reading a token: Next token is token '(' (10.9: )
Shifting token '(' (10.9: )
Entering state 82
Reading a token: Next token is token STRING_LITERAL (10.10-15: "%f\n")
Shifting token STRING_LITERAL (10.10-15: "%f\n")
Entering state 43
Reducing stack by rule 74 (line 1382):
   $1 = token STRING_LITERAL (10.10-15: "%f\n")
-> $$ = nterm primary_expression (10.10-15: )
Stack now 82 40 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (10.10-15: )
-> $$ = nterm postfix_expression (10.10-15: )
Stack now 82 40 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ',' (10.16: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (10.10-15: )
-> $$ = nterm unary_expression (10.10-15: )
Stack now 82 40 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (10.10-15: )
-> $$ = nterm multiplicative_expression (10.10-15: )
Stack now 82 40 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 77
Next token is token ',' (10.16: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (10.10-15: )
-> $$ = nterm additive_expression (10.10-15: )
Stack now 82 40 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 76
Next token is token ',' (10.16: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (10.10-15: )
-> $$ = nterm relational_expression (10.10-15: )
Stack now 82 40 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 75
Next token is token ',' (10.16: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (10.10-15: )
-> $$ = nterm equality_expression (10.10-15: )
Stack now 82 40 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 74
Next token is token ',' (10.16: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (10.10-15: )
-> $$ = nterm logical_and_expression (10.10-15: )
Stack now 82 40 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 73
Next token is token ',' (10.16: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (10.10-15: )
-> $$ = nterm expression (10.10-15: )
Stack now 82 40 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 118
Next token is token ',' (10.16: )
Reducing stack by rule 76 (line 1393):
   $1 = nterm expression (10.10-15: )
-> $$ = nterm expression_list (10.10-15: )
Stack now 82 40 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 119
Next token is token ',' (10.16: )
Shifting token ',' (10.16: )
Entering state 148
Reading a token: Next token is token IDENTIFIER (10.17: d)
Shifting token IDENTIFIER (10.17: d)
Entering state 71
Reading a token: Next token is token ')' (10.18: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (10.17: d)
-> $$ = nterm primary_expression (10.17: )
Stack now 148 119 82 40 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (10.17: )
-> $$ = nterm postfix_expression (10.17: )
Stack now 148 119 82 40 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 58
Next token is token ')' (10.18: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (10.17: )
-> $$ = nterm unary_expression (10.17: )
Stack now 148 119 82 40 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (10.17: )
-> $$ = nterm multiplicative_expression (10.17: )
Stack now 148 119 82 40 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 77
Next token is token ')' (10.18: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (10.17: )
-> $$ = nterm additive_expression (10.17: )
Stack now 148 119 82 40 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 76
Next token is token ')' (10.18: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (10.17: )
-> $$ = nterm relational_expression (10.17: )
Stack now 148 119 82 40 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 75
Next token is token ')' (10.18: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (10.17: )
-> $$ = nterm equality_expression (10.17: )
Stack now 148 119 82 40 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 74
Next token is token ')' (10.18: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (10.17: )
-> $$ = nterm logical_and_expression (10.17: )
Stack now 148 119 82 40 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 73
Next token is token ')' (10.18: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (10.17: )
-> $$ = nterm expression (10.17: )
Stack now 148 119 82 40 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 155
Next token is token ')' (10.18: )
Reducing stack by rule 77 (line 1397):
   $1 = nterm expression_list (10.10-15: )
   $2 = token ',' (10.16: )
   $3 = nterm expression (10.17: )
-> $$ = nterm expression_list (10.10-17: )
Stack now 82 40 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 119
Next token is token ')' (10.18: )
Shifting token ')' (10.18: )
Entering state 147
Reading a token: Next token is token ';' (10.19: )
Shifting token ';' (10.19: )
Entering state 154
Reducing stack by rule 43 (line 594):
   $1 = token IDENTIFIER (10.3-8: printf)
   $2 = token '(' (10.9: )
   $3 = nterm expression_list (10.10-17: )
   $4 = token ')' (10.18: )
   $5 = token ';' (10.19: )
-> $$ = nterm procedure_call (10.3-19: )
Stack now 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 61
Reducing stack by rule 38 (line 474):
   $1 = nterm procedure_call (10.3-19: )
-> $$ = nterm statement (10.3-19: )
Stack now 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 53
Reducing stack by rule 31 (line 444):
   $1 = nterm statement (10.3-19: )
-> $$ = nterm statement_list (10.3-19: )
Stack now 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 84
Reading a token: Next token is token '}' (11.2: )
Shifting token '}' (11.2: )
Entering state 121
Reducing stack by rule 34 (line 460):
   $1 = token '{' (9.2: )
   $2 = nterm statement_list (10.3-19: )
   $3 = token '}' (11.2: )
-> $$ = nterm statement (9.2-11.2: )
Stack now 145 116 81 39 86 52 24 17 14 8 0
Entering state 153
Reading a token: Next token is token ELSE (11.4-7: )
Shifting token ELSE (11.4-7: )
Entering state 157
Reading a token: Next token is token '{' (11.8: )
Shifting token '{' (11.8: )
Entering state 45
Reading a token: Next token is token IDENTIFIER (12.3-8: printf)
Shifting token IDENTIFIER (12.3-8: printf)
Entering state 40
Reading a token: Next token is token '(' (12.9: )
Shifting token '(' (12.9: )
Entering state 82
Reading a token: Next token is token STRING_LITERAL (12.10-18: "%f%f\n ")
Shifting token STRING_LITERAL (12.10-18: "%f%f\n ")
Entering state 43
Reducing stack by rule 74 (line 1382):
   $1 = token STRING_LITERAL (12.10-18: "%f%f\n ")
-> $$ = nterm primary_expression (12.10-18: )
Stack now 82 40 45 157 153 145 116 81 39 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (12.10-18: )
-> $$ = nterm postfix_expression (12.10-18: )
Stack now 82 40 45 157 153 145 116 81 39 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ',' (12.19: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (12.10-18: )
-> $$ = nterm unary_expression (12.10-18: )
Stack now 82 40 45 157 153 145 116 81 39 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (12.10-18: )
-> $$ = nterm multiplicative_expression (12.10-18: )
Stack now 82 40 45 157 153 145 116 81 39 86 52 24 17 14 8 0
Entering state 77
Next token is token ',' (12.19: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (12.10-18: )
-> $$ = nterm additive_expression (12.10-18: )
Stack now 82 40 45 157 153 145 116 81 39 86 52 24 17 14 8 0
Entering state 76
Next token is token ',' (12.19: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (12.10-18: )
-> $$ = nterm relational_expression (12.10-18: )
Stack now 82 40 45 157 153 145 116 81 39 86 52 24 17 14 8 0
Entering state 75
Next token is token ',' (12.19: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (12.10-18: )
-> $$ = nterm equality_expression (12.10-18: )
Stack now 82 40 45 157 153 145 116 81 39 86 52 24 17 14 8 0
Entering state 74
Next token is token ',' (12.19: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (12.10-18: )
-> $$ = nterm logical_and_expression (12.10-18: )
Stack now 82 40 45 157 153 145 116 81 39 86 52 24 17 14 8 0
Entering state 73
Next token is token ',' (12.19: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (12.10-18: )
-> $$ = nterm expression (12.10-18: )
Stack now 82 40 45 157 153 145 116 81 39 86 52 24 17 14 8 0
Entering state 118
Next token is token ',' (12.19: )
Reducing stack by rule 76 (line 1393):
   $1 = nterm expression (12.10-18: )
-> $$ = nterm expression_list (12.10-18: )
Stack now 82 40 45 157 153 145 116 81 39 86 52 24 17 14 8 0
Entering state 119
Next token is token ',' (12.19: )
Shifting token ',' (12.19: )
Entering state 148
Reading a token: Next token is token IDENTIFIER (12.20: z)
Shifting token IDENTIFIER (12.20: z)
Entering state 71
Reading a token: Next token is token ',' (12.21: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (12.20: z)
-> $$ = nterm primary_expression (12.20: )
Stack now 148 119 82 40 45 157 153 145 116 81 39 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (12.20: )
-> $$ = nterm postfix_expression (12.20: )
Stack now 148 119 82 40 45 157 153 145 116 81 39 86 52 24 17 14 8 0
Entering state 58
Next token is token ',' (12.21: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (12.20: )
-> $$ = nterm unary_expression (12.20: )
Stack now 148 119 82 40 45 157 153 145 116 81 39 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (12.20: )
-> $$ = nterm multiplicative_expression (12.20: )
Stack now 148 119 82 40 45 157 153 145 116 81 39 86 52 24 17 14 8 0
Entering state 77
Next token is token ',' (12.21: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (12.20: )
-> $$ = nterm additive_expression (12.20: )
Stack now 148 119 82 40 45 157 153 145 116 81 39 86 52 24 17 14 8 0
Entering state 76
Next token is token ',' (12.21: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (12.20: )
-> $$ = nterm relational_expression (12.20: )
Stack now 148 119 82 40 45 157 153 145 116 81 39 86 52 24 17 14 8 0
Entering state 75
Next token is token ',' (12.21: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (12.20: )
-> $$ = nterm equality_expression (12.20: )
Stack now 148 119 82 40 45 157 153 145 116 81 39 86 52 24 17 14 8 0
Entering state 74
Next token is token ',' (12.21: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (12.20: )
-> $$ = nterm logical_and_expression (12.20: )
Stack now 148 119 82 40 45 157 153 145 116 81 39 86 52 24 17 14 8 0
Entering state 73
Next token is token ',' (12.21: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (12.20: )
-> $$ = nterm expression (12.20: )
Stack now 148 119 82 40 45 157 153 145 116 81 39 86 52 24 17 14 8 0
Entering state 155
Next token is token ',' (12.21: )
Reducing stack by rule 77 (line 1397):
   $1 = nterm expression_list (12.10-18: )
   $2 = token ',' (12.19: )
   $3 = nterm expression (12.20: )
-> $$ = nterm expression_list (12.10-20: )
Stack now 82 40 45 157 153 145 116 81 39 86 52 24 17 14 8 0
Entering state 119
Next token is token ',' (12.21: )
Shifting token ',' (12.21: )
Entering state 148
Reading a token: Next token is token IDENTIFIER (12.22: d)
Shifting token IDENTIFIER (12.22: d)
Entering state 71
Reading a token: Next token is token ')' (12.23: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (12.22: d)
-> $$ = nterm primary_expression (12.22: )
Stack now 148 119 82 40 45 157 153 145 116 81 39 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (12.22: )
-> $$ = nterm postfix_expression (12.22: )
Stack now 148 119 82 40 45 157 153 145 116 81 39 86 52 24 17 14 8 0
Entering state 58
Next token is token ')' (12.23: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (12.22: )
-> $$ = nterm unary_expression (12.22: )
Stack now 148 119 82 40 45 157 153 145 116 81 39 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (12.22: )
-> $$ = nterm multiplicative_expression (12.22: )
Stack now 148 119 82 40 45 157 153 145 116 81 39 86 52 24 17 14 8 0
Entering state 77
Next token is token ')' (12.23: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (12.22: )
-> $$ = nterm additive_expression (12.22: )
Stack now 148 119 82 40 45 157 153 145 116 81 39 86 52 24 17 14 8 0
Entering state 76
Next token is token ')' (12.23: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (12.22: )
-> $$ = nterm relational_expression (12.22: )
Stack now 148 119 82 40 45 157 153 145 116 81 39 86 52 24 17 14 8 0
Entering state 75
Next token is token ')' (12.23: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (12.22: )
-> $$ = nterm equality_expression (12.22: )
Stack now 148 119 82 40 45 157 153 145 116 81 39 86 52 24 17 14 8 0
Entering state 74
Next token is token ')' (12.23: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (12.22: )
-> $$ = nterm logical_and_expression (12.22: )
Stack now 148 119 82 40 45 157 153 145 116 81 39 86 52 24 17 14 8 0
Entering state 73
Next token is token ')' (12.23: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (12.22: )
-> $$ = nterm expression (12.22: )
Stack now 148 119 82 40 45 157 153 145 116 81 39 86 52 24 17 14 8 0
Entering state 155
Next token is token ')' (12.23: )
Reducing stack by rule 77 (line 1397):
   $1 = nterm expression_list (12.10-20: )
   $2 = token ',' (12.21: )
   $3 = nterm expression (12.22: )
-> $$ = nterm expression_list (12.10-22: )
Stack now 82 40 45 157 153 145 116 81 39 86 52 24 17 14 8 0
Entering state 119
Next token is token ')' (12.23: )
Shifting token ')' (12.23: )
Entering state 147
Reading a token: Next token is token ';' (12.24: )
Shifting token ';' (12.24: )
Entering state 154
Reducing stack by rule 43 (line 594):
   $1 = token IDENTIFIER (12.3-8: printf)
   $2 = token '(' (12.9: )
   $3 = nterm expression_list (12.10-22: )
   $4 = token ')' (12.23: )
   $5 = token ';' (12.24: )
-> $$ = nterm procedure_call (12.3-24: )
Stack now 45 157 153 145 116 81 39 86 52 24 17 14 8 0
Entering state 61
Reducing stack by rule 38 (line 474):
   $1 = nterm procedure_call (12.3-24: )
-> $$ = nterm statement (12.3-24: )
Stack now 45 157 153 145 116 81 39 86 52 24 17 14 8 0
Entering state 53
Reducing stack by rule 31 (line 444):
   $1 = nterm statement (12.3-24: )
-> $$ = nterm statement_list (12.3-24: )
Stack now 45 157 153 145 116 81 39 86 52 24 17 14 8 0
Entering state 84
Reading a token: Next token is token '}' (13.2: )
Shifting token '}' (13.2: )
Entering state 121
Reducing stack by rule 34 (line 460):
   $1 = token '{' (11.8: )
   $2 = nterm statement_list (12.3-24: )
   $3 = token '}' (13.2: )
-> $$ = nterm statement (11.8-13.2: )
Stack now 157 153 145 116 81 39 86 52 24 17 14 8 0
Entering state 159
Reducing stack by rule 82 (line 1419):
   $1 = token IF (7.2-3: )
   $2 = token '(' (7.4: )
   $3 = nterm expression (7.5-64: )
   $4 = token ')' (7.66: )
   $5 = nterm statement (9.2-11.2: )
   $6 = token ELSE (11.4-7: )
   $7 = nterm statement (11.8-13.2: )
-> $$ = nterm selection_statement (7.2-13.2: )
Stack now 86 52 24 17 14 8 0
Entering state 62
Reducing stack by rule 35 (line 463):
   $1 = nterm selection_statement (7.2-13.2: )
-> $$ = nterm statement (7.2-13.2: )
Stack now 86 52 24 17 14 8 0
Entering state 88
Reducing stack by rule 32 (line 449):
   $1 = nterm statement_list (5.2-6.7: )
   $2 = nterm statement (7.2-13.2: )
-> $$ = nterm statement_list (5.2-13.2: )
Stack now 52 24 17 14 8 0
Entering state 86
Reading a token: Next token is token '}' (14.1: )
Shifting token '}' (14.1: )
Entering state 122
Reducing stack by rule 30 (line 436):
   $1 = token '{' (2.11: )
   $2 = nterm declaration_list (3.2-4.9: )
   $3 = nterm statement_list (5.2-13.2: )
   $4 = token '}' (14.1: )
-> $$ = nterm compound_statement (2.11-14.1: )
Stack now 17 14 8 0
Entering state 25
Reducing stack by rule 8 (line 158):
   $1 = nterm type_specifier (2.1-3: )
   $2 = nterm fun_declarator (2.5-10: )
   $3 = nterm $@2 (2.11: )
   $4 = nterm compound_statement (2.11-14.1: )
-> $$ = nterm function_definition (2.1-14.1: )
Stack now 0
Entering state 7
Reducing stack by rule 2 (line 126):
   $1 = nterm function_definition (2.1-14.1: )
-> $$ = nterm translation_unit (2.1-14.1: )
Stack now 0
Entering state 5
Reading a token: Next token is token $end (14.1: )
Shifting token $end (14.1: )
Entering state 10
Cleanup: popping token $end (14.1: )
Cleanup: popping nterm translation_unit (2.1-14.1: )
