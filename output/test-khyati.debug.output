Starting parse
Entering state 0
Reading a token: Next token is token INT (1.1-3: )
Shifting token INT (1.1-3: )
Entering state 2
Reducing stack by rule 10 (line 228):
   $1 = token INT (1.1-3: )
-> $$ = nterm type_specifier (1.1-3: )
Stack now 0
Entering state 8
Reading a token: Next token is token IDENTIFIER (1.5: g)
Shifting token IDENTIFIER (1.5: g)
Entering state 13
Reading a token: Next token is token '(' (1.6: )
Shifting token '(' (1.6: )
Entering state 16
Reading a token: Next token is token ')' (1.7: )
Shifting token ')' (1.7: )
Entering state 20
Reducing stack by rule 14 (line 244):
   $1 = token IDENTIFIER (1.5: g)
   $2 = token '(' (1.6: )
   $3 = token ')' (1.7: )
-> $$ = nterm fun_declarator (1.5-7: )
Stack now 8 0
Entering state 14
Reducing stack by rule 7 (line 159):
-> $$ = nterm $@2 (1.8: )
Stack now 14 8 0
Entering state 17
Reading a token: Next token is token '{' (2.1: )
Shifting token '{' (2.1: )
Entering state 24
Reading a token: Next token is token INT (3.5-7: )
Shifting token INT (3.5-7: )
Entering state 2
Reducing stack by rule 10 (line 228):
   $1 = token INT (3.5-7: )
-> $$ = nterm type_specifier (3.5-7: )
Stack now 24 17 14 8 0
Entering state 26
Reading a token: Next token is token '*' (3.9: )
Shifting token '*' (3.9: )
Entering state 31
Reading a token: Next token is token IDENTIFIER (3.10: y)
Shifting token IDENTIFIER (3.10: y)
Entering state 30
Reducing stack by rule 18 (line 275):
   $1 = token IDENTIFIER (3.10: y)
-> $$ = nterm declarator_arr (3.10: )
Stack now 31 26 24 17 14 8 0
Entering state 32
Reading a token: Next token is token ';' (3.11: )
Reducing stack by rule 20 (line 294):
   $1 = nterm declarator_arr (3.10: )
-> $$ = nterm declarator (3.10: )
Stack now 31 26 24 17 14 8 0
Entering state 68
Reducing stack by rule 21 (line 297):
   $1 = token '*' (3.9: )
   $2 = nterm declarator (3.10: )
-> $$ = nterm declarator (3.9-10: )
Stack now 26 24 17 14 8 0
Entering state 64
Reducing stack by rule 25 (line 414):
   $1 = nterm declarator (3.9-10: )
-> $$ = nterm declarator_list (3.9-10: )
Stack now 26 24 17 14 8 0
Entering state 65
Next token is token ';' (3.11: )
Shifting token ';' (3.11: )
Entering state 97
Reducing stack by rule 24 (line 408):
   $1 = nterm type_specifier (3.5-7: )
   $2 = nterm declarator_list (3.9-10: )
   $3 = token ';' (3.11: )
-> $$ = nterm declaration (3.5-11: )
Stack now 24 17 14 8 0
Entering state 27
Reducing stack by rule 22 (line 304):
   $1 = nterm declaration (3.5-11: )
-> $$ = nterm declaration_list (3.5-11: )
Stack now 24 17 14 8 0
Entering state 52
Reading a token: Next token is token INT (4.5-7: )
Shifting token INT (4.5-7: )
Entering state 2
Reducing stack by rule 10 (line 228):
   $1 = token INT (4.5-7: )
-> $$ = nterm type_specifier (4.5-7: )
Stack now 52 24 17 14 8 0
Entering state 26
Reading a token: Next token is token IDENTIFIER (4.9: z)
Shifting token IDENTIFIER (4.9: z)
Entering state 30
Reducing stack by rule 18 (line 275):
   $1 = token IDENTIFIER (4.9: z)
-> $$ = nterm declarator_arr (4.9: )
Stack now 26 52 24 17 14 8 0
Entering state 32
Reading a token: Next token is token '[' (4.10: )
Shifting token '[' (4.10: )
Entering state 69
Reading a token: Next token is token INT_CONSTANT (4.11-12: 10)
Shifting token INT_CONSTANT (4.11-12: 10)
Entering state 99
Reading a token: Next token is token ']' (4.13: )
Shifting token ']' (4.13: )
Entering state 128
Reducing stack by rule 19 (line 278):
   $1 = nterm declarator_arr (4.9: )
   $2 = token '[' (4.10: )
   $3 = token INT_CONSTANT (4.11-12: 10)
   $4 = token ']' (4.13: )
-> $$ = nterm declarator_arr (4.9-13: )
Stack now 26 52 24 17 14 8 0
Entering state 32
Reading a token: Next token is token '[' (4.14: )
Shifting token '[' (4.14: )
Entering state 69
Reading a token: Next token is token INT_CONSTANT (4.15-16: 10)
Shifting token INT_CONSTANT (4.15-16: 10)
Entering state 99
Reading a token: Next token is token ']' (4.17: )
Shifting token ']' (4.17: )
Entering state 128
Reducing stack by rule 19 (line 278):
   $1 = nterm declarator_arr (4.9-13: )
   $2 = token '[' (4.14: )
   $3 = token INT_CONSTANT (4.15-16: 10)
   $4 = token ']' (4.17: )
-> $$ = nterm declarator_arr (4.9-17: )
Stack now 26 52 24 17 14 8 0
Entering state 32
Reading a token: Next token is token ';' (4.18: )
Reducing stack by rule 20 (line 294):
   $1 = nterm declarator_arr (4.9-17: )
-> $$ = nterm declarator (4.9-17: )
Stack now 26 52 24 17 14 8 0
Entering state 64
Reducing stack by rule 25 (line 414):
   $1 = nterm declarator (4.9-17: )
-> $$ = nterm declarator_list (4.9-17: )
Stack now 26 52 24 17 14 8 0
Entering state 65
Next token is token ';' (4.18: )
Shifting token ';' (4.18: )
Entering state 97
Reducing stack by rule 24 (line 408):
   $1 = nterm type_specifier (4.5-7: )
   $2 = nterm declarator_list (4.9-17: )
   $3 = token ';' (4.18: )
-> $$ = nterm declaration (4.5-18: )
Stack now 52 24 17 14 8 0
Entering state 67
Reducing stack by rule 23 (line 356):
   $1 = nterm declaration_list (3.5-11: )
   $2 = nterm declaration (4.5-18: )
-> $$ = nterm declaration_list (3.5-4.18: )
Stack now 24 17 14 8 0
Entering state 52
Reading a token: Next token is token INT (5.5-7: )
Shifting token INT (5.5-7: )
Entering state 2
Reducing stack by rule 10 (line 228):
   $1 = token INT (5.5-7: )
-> $$ = nterm type_specifier (5.5-7: )
Stack now 52 24 17 14 8 0
Entering state 26
Reading a token: Next token is token IDENTIFIER (5.9: c)
Shifting token IDENTIFIER (5.9: c)
Entering state 30
Reducing stack by rule 18 (line 275):
   $1 = token IDENTIFIER (5.9: c)
-> $$ = nterm declarator_arr (5.9: )
Stack now 26 52 24 17 14 8 0
Entering state 32
Reading a token: Next token is token '[' (5.10: )
Shifting token '[' (5.10: )
Entering state 69
Reading a token: Next token is token INT_CONSTANT (5.11-12: 10)
Shifting token INT_CONSTANT (5.11-12: 10)
Entering state 99
Reading a token: Next token is token ']' (5.13: )
Shifting token ']' (5.13: )
Entering state 128
Reducing stack by rule 19 (line 278):
   $1 = nterm declarator_arr (5.9: )
   $2 = token '[' (5.10: )
   $3 = token INT_CONSTANT (5.11-12: 10)
   $4 = token ']' (5.13: )
-> $$ = nterm declarator_arr (5.9-13: )
Stack now 26 52 24 17 14 8 0
Entering state 32
Reading a token: Next token is token '[' (5.14: )
Shifting token '[' (5.14: )
Entering state 69
Reading a token: Next token is token INT_CONSTANT (5.15-16: 10)
Shifting token INT_CONSTANT (5.15-16: 10)
Entering state 99
Reading a token: Next token is token ']' (5.17: )
Shifting token ']' (5.17: )
Entering state 128
Reducing stack by rule 19 (line 278):
   $1 = nterm declarator_arr (5.9-13: )
   $2 = token '[' (5.14: )
   $3 = token INT_CONSTANT (5.15-16: 10)
   $4 = token ']' (5.17: )
-> $$ = nterm declarator_arr (5.9-17: )
Stack now 26 52 24 17 14 8 0
Entering state 32
Reading a token: Next token is token ';' (5.18: )
Reducing stack by rule 20 (line 294):
   $1 = nterm declarator_arr (5.9-17: )
-> $$ = nterm declarator (5.9-17: )
Stack now 26 52 24 17 14 8 0
Entering state 64
Reducing stack by rule 25 (line 414):
   $1 = nterm declarator (5.9-17: )
-> $$ = nterm declarator_list (5.9-17: )
Stack now 26 52 24 17 14 8 0
Entering state 65
Next token is token ';' (5.18: )
Shifting token ';' (5.18: )
Entering state 97
Reducing stack by rule 24 (line 408):
   $1 = nterm type_specifier (5.5-7: )
   $2 = nterm declarator_list (5.9-17: )
   $3 = token ';' (5.18: )
-> $$ = nterm declaration (5.5-18: )
Stack now 52 24 17 14 8 0
Entering state 67
Reducing stack by rule 23 (line 356):
   $1 = nterm declaration_list (3.5-4.18: )
   $2 = nterm declaration (5.5-18: )
-> $$ = nterm declaration_list (3.5-5.18: )
Stack now 24 17 14 8 0
Entering state 52
Reading a token: Next token is token FLOAT (6.5-9: )
Shifting token FLOAT (6.5-9: )
Entering state 3
Reducing stack by rule 11 (line 231):
   $1 = token FLOAT (6.5-9: )
-> $$ = nterm type_specifier (6.5-9: )
Stack now 52 24 17 14 8 0
Entering state 26
Reading a token: Next token is token IDENTIFIER (6.11: d)
Shifting token IDENTIFIER (6.11: d)
Entering state 30
Reducing stack by rule 18 (line 275):
   $1 = token IDENTIFIER (6.11: d)
-> $$ = nterm declarator_arr (6.11: )
Stack now 26 52 24 17 14 8 0
Entering state 32
Reading a token: Next token is token ';' (6.12: )
Reducing stack by rule 20 (line 294):
   $1 = nterm declarator_arr (6.11: )
-> $$ = nterm declarator (6.11: )
Stack now 26 52 24 17 14 8 0
Entering state 64
Reducing stack by rule 25 (line 414):
   $1 = nterm declarator (6.11: )
-> $$ = nterm declarator_list (6.11: )
Stack now 26 52 24 17 14 8 0
Entering state 65
Next token is token ';' (6.12: )
Shifting token ';' (6.12: )
Entering state 97
Reducing stack by rule 24 (line 408):
   $1 = nterm type_specifier (6.5-9: )
   $2 = nterm declarator_list (6.11: )
   $3 = token ';' (6.12: )
-> $$ = nterm declaration (6.5-12: )
Stack now 52 24 17 14 8 0
Entering state 67
Reducing stack by rule 23 (line 356):
   $1 = nterm declaration_list (3.5-5.18: )
   $2 = nterm declaration (6.5-12: )
-> $$ = nterm declaration_list (3.5-6.12: )
Stack now 24 17 14 8 0
Entering state 52
Reading a token: Next token is token IDENTIFIER (7.5: d)
Shifting token IDENTIFIER (7.5: d)
Entering state 40
Reading a token: Next token is token '=' (7.7: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (7.5: d)
-> $$ = nterm primary_expression (7.5: )
Stack now 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (7.5: )
-> $$ = nterm postfix_expression (7.5: )
Stack now 52 24 17 14 8 0
Entering state 58
Next token is token '=' (7.7: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (7.5: )
-> $$ = nterm unary_expression (7.5: )
Stack now 52 24 17 14 8 0
Entering state 57
Next token is token '=' (7.7: )
Shifting token '=' (7.7: )
Entering state 90
Reading a token: Next token is token '!' (7.9: )
Shifting token '!' (7.9: )
Entering state 47
Reducing stack by rule 79 (line 1407):
   $1 = token '!' (7.9: )
-> $$ = nterm unary_operator (7.9: )
Stack now 90 57 52 24 17 14 8 0
Entering state 60
Reading a token: Next token is token IDENTIFIER (7.10: z)
Shifting token IDENTIFIER (7.10: z)
Entering state 71
Reading a token: Next token is token ';' (7.11: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (7.10: z)
-> $$ = nterm primary_expression (7.10: )
Stack now 60 90 57 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (7.10: )
-> $$ = nterm postfix_expression (7.10: )
Stack now 60 90 57 52 24 17 14 8 0
Entering state 58
Next token is token ';' (7.11: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (7.10: )
-> $$ = nterm unary_expression (7.10: )
Stack now 60 90 57 52 24 17 14 8 0
Entering state 95
Reducing stack by rule 60 (line 1063):
   $1 = nterm unary_operator (7.9: )
   $2 = nterm unary_expression (7.10: )
-> $$ = nterm unary_expression (7.9-10: )
Stack now 90 57 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (7.9-10: )
-> $$ = nterm multiplicative_expression (7.9-10: )
Stack now 90 57 52 24 17 14 8 0
Entering state 77
Next token is token ';' (7.11: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (7.9-10: )
-> $$ = nterm additive_expression (7.9-10: )
Stack now 90 57 52 24 17 14 8 0
Entering state 76
Next token is token ';' (7.11: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (7.9-10: )
-> $$ = nterm relational_expression (7.9-10: )
Stack now 90 57 52 24 17 14 8 0
Entering state 75
Next token is token ';' (7.11: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (7.9-10: )
-> $$ = nterm equality_expression (7.9-10: )
Stack now 90 57 52 24 17 14 8 0
Entering state 74
Next token is token ';' (7.11: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (7.9-10: )
-> $$ = nterm logical_and_expression (7.9-10: )
Stack now 90 57 52 24 17 14 8 0
Entering state 73
Next token is token ';' (7.11: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (7.9-10: )
-> $$ = nterm expression (7.9-10: )
Stack now 90 57 52 24 17 14 8 0
Entering state 123
Next token is token ';' (7.11: )
Reducing stack by rule 40 (line 506):
   $1 = nterm unary_expression (7.5: )
   $2 = token '=' (7.7: )
   $3 = nterm expression (7.9-10: )
-> $$ = nterm assignment_expression (7.5-10: )
Stack now 52 24 17 14 8 0
Entering state 56
Next token is token ';' (7.11: )
Shifting token ';' (7.11: )
Entering state 89
Reducing stack by rule 41 (line 559):
   $1 = nterm assignment_expression (7.5-10: )
   $2 = token ';' (7.11: )
-> $$ = nterm assignment_statement (7.5-11: )
Stack now 52 24 17 14 8 0
Entering state 54
Reducing stack by rule 37 (line 469):
   $1 = nterm assignment_statement (7.5-11: )
-> $$ = nterm statement (7.5-11: )
Stack now 52 24 17 14 8 0
Entering state 53
Reducing stack by rule 31 (line 444):
   $1 = nterm statement (7.5-11: )
-> $$ = nterm statement_list (7.5-11: )
Stack now 52 24 17 14 8 0
Entering state 86
Reading a token: Next token is token '*' (8.5: )
Shifting token '*' (8.5: )
Entering state 50
Reducing stack by rule 81 (line 1413):
   $1 = token '*' (8.5: )
-> $$ = nterm unary_operator (8.5: )
Stack now 86 52 24 17 14 8 0
Entering state 60
Reading a token: Next token is token IDENTIFIER (8.6: y)
Shifting token IDENTIFIER (8.6: y)
Entering state 71
Reading a token: Next token is token '=' (8.8: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (8.6: y)
-> $$ = nterm primary_expression (8.6: )
Stack now 60 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (8.6: )
-> $$ = nterm postfix_expression (8.6: )
Stack now 60 86 52 24 17 14 8 0
Entering state 58
Next token is token '=' (8.8: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (8.6: )
-> $$ = nterm unary_expression (8.6: )
Stack now 60 86 52 24 17 14 8 0
Entering state 95
Reducing stack by rule 60 (line 1063):
   $1 = nterm unary_operator (8.5: )
   $2 = nterm unary_expression (8.6: )
-> $$ = nterm unary_expression (8.5-6: )
Stack now 86 52 24 17 14 8 0
Entering state 57
Next token is token '=' (8.8: )
Shifting token '=' (8.8: )
Entering state 90
Reading a token: Next token is token IDENTIFIER (8.10: z)
Shifting token IDENTIFIER (8.10: z)
Entering state 71
Reading a token: Next token is token '-' (8.12: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (8.10: z)
-> $$ = nterm primary_expression (8.10: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (8.10: )
-> $$ = nterm postfix_expression (8.10: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 58
Next token is token '-' (8.12: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (8.10: )
-> $$ = nterm unary_expression (8.10: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (8.10: )
-> $$ = nterm multiplicative_expression (8.10: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 77
Next token is token '-' (8.12: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (8.10: )
-> $$ = nterm additive_expression (8.10: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 76
Next token is token '-' (8.12: )
Shifting token '-' (8.12: )
Entering state 111
Reading a token: Next token is token IDENTIFIER (8.14: c)
Shifting token IDENTIFIER (8.14: c)
Entering state 71
Reading a token: Next token is token ';' (8.15: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (8.14: c)
-> $$ = nterm primary_expression (8.14: )
Stack now 111 76 90 57 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (8.14: )
-> $$ = nterm postfix_expression (8.14: )
Stack now 111 76 90 57 86 52 24 17 14 8 0
Entering state 58
Next token is token ';' (8.15: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (8.14: )
-> $$ = nterm unary_expression (8.14: )
Stack now 111 76 90 57 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (8.14: )
-> $$ = nterm multiplicative_expression (8.14: )
Stack now 111 76 90 57 86 52 24 17 14 8 0
Entering state 140
Next token is token ';' (8.15: )
Reducing stack by rule 58 (line 1008):
   $1 = nterm additive_expression (8.10: )
   $2 = token '-' (8.12: )
   $3 = nterm multiplicative_expression (8.14: )
-> $$ = nterm additive_expression (8.10-14: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 76
Next token is token ';' (8.15: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (8.10-14: )
-> $$ = nterm relational_expression (8.10-14: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 75
Next token is token ';' (8.15: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (8.10-14: )
-> $$ = nterm equality_expression (8.10-14: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 74
Next token is token ';' (8.15: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (8.10-14: )
-> $$ = nterm logical_and_expression (8.10-14: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 73
Next token is token ';' (8.15: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (8.10-14: )
-> $$ = nterm expression (8.10-14: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 123
Next token is token ';' (8.15: )
Reducing stack by rule 40 (line 506):
   $1 = nterm unary_expression (8.5-6: )
   $2 = token '=' (8.8: )
   $3 = nterm expression (8.10-14: )
-> $$ = nterm assignment_expression (8.5-14: )
Stack now 86 52 24 17 14 8 0
Entering state 56
Next token is token ';' (8.15: )
Shifting token ';' (8.15: )
Entering state 89
Reducing stack by rule 41 (line 559):
   $1 = nterm assignment_expression (8.5-14: )
   $2 = token ';' (8.15: )
-> $$ = nterm assignment_statement (8.5-15: )
Stack now 86 52 24 17 14 8 0
Entering state 54
Reducing stack by rule 37 (line 469):
   $1 = nterm assignment_statement (8.5-15: )
-> $$ = nterm statement (8.5-15: )
Stack now 86 52 24 17 14 8 0
Entering state 88
Reducing stack by rule 32 (line 449):
   $1 = nterm statement_list (7.5-11: )
   $2 = nterm statement (8.5-15: )
-> $$ = nterm statement_list (7.5-8.15: )
Stack now 52 24 17 14 8 0
Entering state 86
Reading a token: Next token is token '*' (9.5: )
Shifting token '*' (9.5: )
Entering state 50
Reducing stack by rule 81 (line 1413):
   $1 = token '*' (9.5: )
-> $$ = nterm unary_operator (9.5: )
Stack now 86 52 24 17 14 8 0
Entering state 60
Reading a token: Next token is token IDENTIFIER (9.6: y)
Shifting token IDENTIFIER (9.6: y)
Entering state 71
Reading a token: Next token is token '=' (9.8: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (9.6: y)
-> $$ = nterm primary_expression (9.6: )
Stack now 60 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (9.6: )
-> $$ = nterm postfix_expression (9.6: )
Stack now 60 86 52 24 17 14 8 0
Entering state 58
Next token is token '=' (9.8: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (9.6: )
-> $$ = nterm unary_expression (9.6: )
Stack now 60 86 52 24 17 14 8 0
Entering state 95
Reducing stack by rule 60 (line 1063):
   $1 = nterm unary_operator (9.5: )
   $2 = nterm unary_expression (9.6: )
-> $$ = nterm unary_expression (9.5-6: )
Stack now 86 52 24 17 14 8 0
Entering state 57
Next token is token '=' (9.8: )
Shifting token '=' (9.8: )
Entering state 90
Reading a token: Next token is token IDENTIFIER (9.10: z)
Shifting token IDENTIFIER (9.10: z)
Entering state 71
Reading a token: Next token is token '-' (9.12: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (9.10: z)
-> $$ = nterm primary_expression (9.10: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (9.10: )
-> $$ = nterm postfix_expression (9.10: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 58
Next token is token '-' (9.12: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (9.10: )
-> $$ = nterm unary_expression (9.10: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (9.10: )
-> $$ = nterm multiplicative_expression (9.10: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 77
Next token is token '-' (9.12: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (9.10: )
-> $$ = nterm additive_expression (9.10: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 76
Next token is token '-' (9.12: )
Shifting token '-' (9.12: )
Entering state 111
Reading a token: Next token is token '(' (9.14: )
Shifting token '(' (9.14: )
Entering state 44
Reading a token: Next token is token '&' (9.15: )
Shifting token '&' (9.15: )
Entering state 51
Reducing stack by rule 80 (line 1410):
   $1 = token '&' (9.15: )
-> $$ = nterm unary_operator (9.15: )
Stack now 44 111 76 90 57 86 52 24 17 14 8 0
Entering state 60
Reading a token: Next token is token '(' (9.16: )
Shifting token '(' (9.16: )
Entering state 44
Reading a token: Next token is token IDENTIFIER (9.17: c)
Shifting token IDENTIFIER (9.17: c)
Entering state 71
Reading a token: Next token is token '[' (9.18: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (9.17: c)
-> $$ = nterm primary_expression (9.17: )
Stack now 44 60 44 111 76 90 57 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (9.17: )
-> $$ = nterm postfix_expression (9.17: )
Stack now 44 60 44 111 76 90 57 86 52 24 17 14 8 0
Entering state 58
Next token is token '[' (9.18: )
Shifting token '[' (9.18: )
Entering state 91
Reading a token: Next token is token INT_CONSTANT (9.19: 0)
Shifting token INT_CONSTANT (9.19: 0)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (9.19: 0)
-> $$ = nterm primary_expression (9.19: )
Stack now 91 58 44 60 44 111 76 90 57 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (9.19: )
-> $$ = nterm postfix_expression (9.19: )
Stack now 91 58 44 60 44 111 76 90 57 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ']' (9.20: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (9.19: )
-> $$ = nterm unary_expression (9.19: )
Stack now 91 58 44 60 44 111 76 90 57 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (9.19: )
-> $$ = nterm multiplicative_expression (9.19: )
Stack now 91 58 44 60 44 111 76 90 57 86 52 24 17 14 8 0
Entering state 77
Next token is token ']' (9.20: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (9.19: )
-> $$ = nterm additive_expression (9.19: )
Stack now 91 58 44 60 44 111 76 90 57 86 52 24 17 14 8 0
Entering state 76
Next token is token ']' (9.20: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (9.19: )
-> $$ = nterm relational_expression (9.19: )
Stack now 91 58 44 60 44 111 76 90 57 86 52 24 17 14 8 0
Entering state 75
Next token is token ']' (9.20: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (9.19: )
-> $$ = nterm equality_expression (9.19: )
Stack now 91 58 44 60 44 111 76 90 57 86 52 24 17 14 8 0
Entering state 74
Next token is token ']' (9.20: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (9.19: )
-> $$ = nterm logical_and_expression (9.19: )
Stack now 91 58 44 60 44 111 76 90 57 86 52 24 17 14 8 0
Entering state 73
Next token is token ']' (9.20: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (9.19: )
-> $$ = nterm expression (9.19: )
Stack now 91 58 44 60 44 111 76 90 57 86 52 24 17 14 8 0
Entering state 124
Next token is token ']' (9.20: )
Shifting token ']' (9.20: )
Entering state 149
Reducing stack by rule 65 (line 1197):
   $1 = nterm postfix_expression (9.17: )
   $2 = token '[' (9.18: )
   $3 = nterm expression (9.19: )
   $4 = token ']' (9.20: )
-> $$ = nterm postfix_expression (9.17-20: )
Stack now 44 60 44 111 76 90 57 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ')' (9.21: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (9.17-20: )
-> $$ = nterm unary_expression (9.17-20: )
Stack now 44 60 44 111 76 90 57 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (9.17-20: )
-> $$ = nterm multiplicative_expression (9.17-20: )
Stack now 44 60 44 111 76 90 57 86 52 24 17 14 8 0
Entering state 77
Next token is token ')' (9.21: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (9.17-20: )
-> $$ = nterm additive_expression (9.17-20: )
Stack now 44 60 44 111 76 90 57 86 52 24 17 14 8 0
Entering state 76
Next token is token ')' (9.21: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (9.17-20: )
-> $$ = nterm relational_expression (9.17-20: )
Stack now 44 60 44 111 76 90 57 86 52 24 17 14 8 0
Entering state 75
Next token is token ')' (9.21: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (9.17-20: )
-> $$ = nterm equality_expression (9.17-20: )
Stack now 44 60 44 111 76 90 57 86 52 24 17 14 8 0
Entering state 74
Next token is token ')' (9.21: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (9.17-20: )
-> $$ = nterm logical_and_expression (9.17-20: )
Stack now 44 60 44 111 76 90 57 86 52 24 17 14 8 0
Entering state 73
Next token is token ')' (9.21: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (9.17-20: )
-> $$ = nterm expression (9.17-20: )
Stack now 44 60 44 111 76 90 57 86 52 24 17 14 8 0
Entering state 83
Next token is token ')' (9.21: )
Shifting token ')' (9.21: )
Entering state 120
Reducing stack by rule 75 (line 1387):
   $1 = token '(' (9.16: )
   $2 = nterm expression (9.17-20: )
   $3 = token ')' (9.21: )
-> $$ = nterm primary_expression (9.16-21: )
Stack now 60 44 111 76 90 57 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (9.16-21: )
-> $$ = nterm postfix_expression (9.16-21: )
Stack now 60 44 111 76 90 57 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ')' (9.22: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (9.16-21: )
-> $$ = nterm unary_expression (9.16-21: )
Stack now 60 44 111 76 90 57 86 52 24 17 14 8 0
Entering state 95
Reducing stack by rule 60 (line 1063):
   $1 = nterm unary_operator (9.15: )
   $2 = nterm unary_expression (9.16-21: )
-> $$ = nterm unary_expression (9.15-21: )
Stack now 44 111 76 90 57 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (9.15-21: )
-> $$ = nterm multiplicative_expression (9.15-21: )
Stack now 44 111 76 90 57 86 52 24 17 14 8 0
Entering state 77
Next token is token ')' (9.22: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (9.15-21: )
-> $$ = nterm additive_expression (9.15-21: )
Stack now 44 111 76 90 57 86 52 24 17 14 8 0
Entering state 76
Next token is token ')' (9.22: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (9.15-21: )
-> $$ = nterm relational_expression (9.15-21: )
Stack now 44 111 76 90 57 86 52 24 17 14 8 0
Entering state 75
Next token is token ')' (9.22: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (9.15-21: )
-> $$ = nterm equality_expression (9.15-21: )
Stack now 44 111 76 90 57 86 52 24 17 14 8 0
Entering state 74
Next token is token ')' (9.22: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (9.15-21: )
-> $$ = nterm logical_and_expression (9.15-21: )
Stack now 44 111 76 90 57 86 52 24 17 14 8 0
Entering state 73
Next token is token ')' (9.22: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (9.15-21: )
-> $$ = nterm expression (9.15-21: )
Stack now 44 111 76 90 57 86 52 24 17 14 8 0
Entering state 83
Next token is token ')' (9.22: )
Shifting token ')' (9.22: )
Entering state 120
Reducing stack by rule 75 (line 1387):
   $1 = token '(' (9.14: )
   $2 = nterm expression (9.15-21: )
   $3 = token ')' (9.22: )
-> $$ = nterm primary_expression (9.14-22: )
Stack now 111 76 90 57 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (9.14-22: )
-> $$ = nterm postfix_expression (9.14-22: )
Stack now 111 76 90 57 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ';' (9.23: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (9.14-22: )
-> $$ = nterm unary_expression (9.14-22: )
Stack now 111 76 90 57 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (9.14-22: )
-> $$ = nterm multiplicative_expression (9.14-22: )
Stack now 111 76 90 57 86 52 24 17 14 8 0
Entering state 140
Next token is token ';' (9.23: )
Reducing stack by rule 58 (line 1008):
   $1 = nterm additive_expression (9.10: )
   $2 = token '-' (9.12: )
   $3 = nterm multiplicative_expression (9.14-22: )
-> $$ = nterm additive_expression (9.10-22: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 76
Next token is token ';' (9.23: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (9.10-22: )
-> $$ = nterm relational_expression (9.10-22: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 75
Next token is token ';' (9.23: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (9.10-22: )
-> $$ = nterm equality_expression (9.10-22: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 74
Next token is token ';' (9.23: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (9.10-22: )
-> $$ = nterm logical_and_expression (9.10-22: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 73
Next token is token ';' (9.23: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (9.10-22: )
-> $$ = nterm expression (9.10-22: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 123
Next token is token ';' (9.23: )
Reducing stack by rule 40 (line 506):
   $1 = nterm unary_expression (9.5-6: )
   $2 = token '=' (9.8: )
   $3 = nterm expression (9.10-22: )
-> $$ = nterm assignment_expression (9.5-22: )
Stack now 86 52 24 17 14 8 0
Entering state 56
Next token is token ';' (9.23: )
Shifting token ';' (9.23: )
Entering state 89
Reducing stack by rule 41 (line 559):
   $1 = nterm assignment_expression (9.5-22: )
   $2 = token ';' (9.23: )
-> $$ = nterm assignment_statement (9.5-23: )
Stack now 86 52 24 17 14 8 0
Entering state 54
Reducing stack by rule 37 (line 469):
   $1 = nterm assignment_statement (9.5-23: )
-> $$ = nterm statement (9.5-23: )
Stack now 86 52 24 17 14 8 0
Entering state 88
Reducing stack by rule 32 (line 449):
   $1 = nterm statement_list (7.5-8.15: )
   $2 = nterm statement (9.5-23: )
-> $$ = nterm statement_list (7.5-9.23: )
Stack now 52 24 17 14 8 0
Entering state 86
Reading a token: Next token is token '}' (10.1: )
Shifting token '}' (10.1: )
Entering state 122
Reducing stack by rule 30 (line 436):
   $1 = token '{' (2.1: )
   $2 = nterm declaration_list (3.5-6.12: )
   $3 = nterm statement_list (7.5-9.23: )
   $4 = token '}' (10.1: )
-> $$ = nterm compound_statement (2.1-10.1: )
Stack now 17 14 8 0
Entering state 25
Reducing stack by rule 8 (line 158):
   $1 = nterm type_specifier (1.1-3: )
   $2 = nterm fun_declarator (1.5-7: )
   $3 = nterm $@2 (1.8: )
   $4 = nterm compound_statement (2.1-10.1: )
-> $$ = nterm function_definition (1.1-10.1: )
Stack now 0
Entering state 7
Reducing stack by rule 2 (line 126):
   $1 = nterm function_definition (1.1-10.1: )
-> $$ = nterm translation_unit (1.1-10.1: )
Stack now 0
Entering state 5
Reading a token: Next token is token INT (11.1-3: )
Shifting token INT (11.1-3: )
Entering state 2
Reducing stack by rule 10 (line 228):
   $1 = token INT (11.1-3: )
-> $$ = nterm type_specifier (11.1-3: )
Stack now 5 0
Entering state 8
Reading a token: Next token is token IDENTIFIER (11.5: f)
Shifting token IDENTIFIER (11.5: f)
Entering state 13
Reading a token: Next token is token '(' (11.6: )
Shifting token '(' (11.6: )
Entering state 16
Reading a token: Next token is token INT (11.7-9: )
Shifting token INT (11.7-9: )
Entering state 2
Reducing stack by rule 10 (line 228):
   $1 = token INT (11.7-9: )
-> $$ = nterm type_specifier (11.7-9: )
Stack now 16 13 8 5 0
Entering state 21
Reading a token: Next token is token IDENTIFIER (11.11: x)
Shifting token IDENTIFIER (11.11: x)
Entering state 30
Reducing stack by rule 18 (line 275):
   $1 = token IDENTIFIER (11.11: x)
-> $$ = nterm declarator_arr (11.11: )
Stack now 21 16 13 8 5 0
Entering state 32
Reading a token: Next token is token '[' (11.12: )
Shifting token '[' (11.12: )
Entering state 69
Reading a token: Next token is token INT_CONSTANT (11.13-14: 20)
Shifting token INT_CONSTANT (11.13-14: 20)
Entering state 99
Reading a token: Next token is token ']' (11.15: )
Shifting token ']' (11.15: )
Entering state 128
Reducing stack by rule 19 (line 278):
   $1 = nterm declarator_arr (11.11: )
   $2 = token '[' (11.12: )
   $3 = token INT_CONSTANT (11.13-14: 20)
   $4 = token ']' (11.15: )
-> $$ = nterm declarator_arr (11.11-15: )
Stack now 21 16 13 8 5 0
Entering state 32
Reading a token: Next token is token ')' (11.16: )
Reducing stack by rule 20 (line 294):
   $1 = nterm declarator_arr (11.11-15: )
-> $$ = nterm declarator (11.11-15: )
Stack now 21 16 13 8 5 0
Entering state 33
Reducing stack by rule 17 (line 265):
   $1 = nterm type_specifier (11.7-9: )
   $2 = nterm declarator (11.11-15: )
-> $$ = nterm parameter_declaration (11.7-15: )
Stack now 16 13 8 5 0
Entering state 23
Reducing stack by rule 15 (line 250):
   $1 = nterm parameter_declaration (11.7-15: )
-> $$ = nterm parameter_list (11.7-15: )
Stack now 16 13 8 5 0
Entering state 22
Next token is token ')' (11.16: )
Shifting token ')' (11.16: )
Entering state 34
Reducing stack by rule 13 (line 240):
   $1 = token IDENTIFIER (11.5: f)
   $2 = token '(' (11.6: )
   $3 = nterm parameter_list (11.7-15: )
   $4 = token ')' (11.16: )
-> $$ = nterm fun_declarator (11.5-16: )
Stack now 8 5 0
Entering state 14
Reducing stack by rule 7 (line 159):
-> $$ = nterm $@2 (11.17: )
Stack now 14 8 5 0
Entering state 17
Reading a token: Next token is token '{' (12.1: )
Shifting token '{' (12.1: )
Entering state 24
Reading a token: Next token is token '}' (13.1: )
Shifting token '}' (13.1: )
Entering state 46
Reducing stack by rule 27 (line 426):
   $1 = token '{' (12.1: )
   $2 = token '}' (13.1: )
-> $$ = nterm compound_statement (12.1-13.1: )
Stack now 17 14 8 5 0
Entering state 25
Reducing stack by rule 8 (line 158):
   $1 = nterm type_specifier (11.1-3: )
   $2 = nterm fun_declarator (11.5-16: )
   $3 = nterm $@2 (11.17: )
   $4 = nterm compound_statement (12.1-13.1: )
-> $$ = nterm function_definition (11.1-13.1: )
Stack now 5 0
Entering state 12
Reducing stack by rule 4 (line 130):
   $1 = nterm translation_unit (1.1-10.1: )
   $2 = nterm function_definition (11.1-13.1: )
-> $$ = nterm translation_unit (1.1-13.1: )
Stack now 0
Entering state 5
Reading a token: Next token is token INT (14.1-3: )
Shifting token INT (14.1-3: )
Entering state 2
Reducing stack by rule 10 (line 228):
   $1 = token INT (14.1-3: )
-> $$ = nterm type_specifier (14.1-3: )
Stack now 5 0
Entering state 8
Reading a token: Next token is token IDENTIFIER (14.5-8: main)
Shifting token IDENTIFIER (14.5-8: main)
Entering state 13
Reading a token: Next token is token '(' (14.9: )
Shifting token '(' (14.9: )
Entering state 16
Reading a token: Next token is token ')' (14.10: )
Shifting token ')' (14.10: )
Entering state 20
Reducing stack by rule 14 (line 244):
   $1 = token IDENTIFIER (14.5-8: main)
   $2 = token '(' (14.9: )
   $3 = token ')' (14.10: )
-> $$ = nterm fun_declarator (14.5-10: )
Stack now 8 5 0
Entering state 14
Reducing stack by rule 7 (line 159):
-> $$ = nterm $@2 (14.11: )
Stack now 14 8 5 0
Entering state 17
Reading a token: Next token is token '{' (15.1: )
Shifting token '{' (15.1: )
Entering state 24
Reading a token: Next token is token INT (16.5-7: )
Shifting token INT (16.5-7: )
Entering state 2
Reducing stack by rule 10 (line 228):
   $1 = token INT (16.5-7: )
-> $$ = nterm type_specifier (16.5-7: )
Stack now 24 17 14 8 5 0
Entering state 26
Reading a token: Next token is token IDENTIFIER (16.9: x)
Shifting token IDENTIFIER (16.9: x)
Entering state 30
Reducing stack by rule 18 (line 275):
   $1 = token IDENTIFIER (16.9: x)
-> $$ = nterm declarator_arr (16.9: )
Stack now 26 24 17 14 8 5 0
Entering state 32
Reading a token: Next token is token '[' (16.10: )
Shifting token '[' (16.10: )
Entering state 69
Reading a token: Next token is token INT_CONSTANT (16.11-12: 10)
Shifting token INT_CONSTANT (16.11-12: 10)
Entering state 99
Reading a token: Next token is token ']' (16.13: )
Shifting token ']' (16.13: )
Entering state 128
Reducing stack by rule 19 (line 278):
   $1 = nterm declarator_arr (16.9: )
   $2 = token '[' (16.10: )
   $3 = token INT_CONSTANT (16.11-12: 10)
   $4 = token ']' (16.13: )
-> $$ = nterm declarator_arr (16.9-13: )
Stack now 26 24 17 14 8 5 0
Entering state 32
Reading a token: Next token is token ';' (16.14: )
Reducing stack by rule 20 (line 294):
   $1 = nterm declarator_arr (16.9-13: )
-> $$ = nterm declarator (16.9-13: )
Stack now 26 24 17 14 8 5 0
Entering state 64
Reducing stack by rule 25 (line 414):
   $1 = nterm declarator (16.9-13: )
-> $$ = nterm declarator_list (16.9-13: )
Stack now 26 24 17 14 8 5 0
Entering state 65
Next token is token ';' (16.14: )
Shifting token ';' (16.14: )
Entering state 97
Reducing stack by rule 24 (line 408):
   $1 = nterm type_specifier (16.5-7: )
   $2 = nterm declarator_list (16.9-13: )
   $3 = token ';' (16.14: )
-> $$ = nterm declaration (16.5-14: )
Stack now 24 17 14 8 5 0
Entering state 27
Reducing stack by rule 22 (line 304):
   $1 = nterm declaration (16.5-14: )
-> $$ = nterm declaration_list (16.5-14: )
Stack now 24 17 14 8 5 0
Entering state 52
Reading a token: Next token is token INT (17.5-7: )
Shifting token INT (17.5-7: )
Entering state 2
Reducing stack by rule 10 (line 228):
   $1 = token INT (17.5-7: )
-> $$ = nterm type_specifier (17.5-7: )
Stack now 52 24 17 14 8 5 0
Entering state 26
Reading a token: Next token is token '*' (17.9: )
Shifting token '*' (17.9: )
Entering state 31
Reading a token: Next token is token IDENTIFIER (17.10: y)
Shifting token IDENTIFIER (17.10: y)
Entering state 30
Reducing stack by rule 18 (line 275):
   $1 = token IDENTIFIER (17.10: y)
-> $$ = nterm declarator_arr (17.10: )
Stack now 31 26 52 24 17 14 8 5 0
Entering state 32
Reading a token: Next token is token ';' (17.11: )
Reducing stack by rule 20 (line 294):
   $1 = nterm declarator_arr (17.10: )
-> $$ = nterm declarator (17.10: )
Stack now 31 26 52 24 17 14 8 5 0
Entering state 68
Reducing stack by rule 21 (line 297):
   $1 = token '*' (17.9: )
   $2 = nterm declarator (17.10: )
-> $$ = nterm declarator (17.9-10: )
Stack now 26 52 24 17 14 8 5 0
Entering state 64
Reducing stack by rule 25 (line 414):
   $1 = nterm declarator (17.9-10: )
-> $$ = nterm declarator_list (17.9-10: )
Stack now 26 52 24 17 14 8 5 0
Entering state 65
Next token is token ';' (17.11: )
Shifting token ';' (17.11: )
Entering state 97
Reducing stack by rule 24 (line 408):
   $1 = nterm type_specifier (17.5-7: )
   $2 = nterm declarator_list (17.9-10: )
   $3 = token ';' (17.11: )
-> $$ = nterm declaration (17.5-11: )
Stack now 52 24 17 14 8 5 0
Entering state 67
Reducing stack by rule 23 (line 356):
   $1 = nterm declaration_list (16.5-14: )
   $2 = nterm declaration (17.5-11: )
-> $$ = nterm declaration_list (16.5-17.11: )
Stack now 24 17 14 8 5 0
Entering state 52
Reading a token: Next token is token IDENTIFIER (18.5: f)
Shifting token IDENTIFIER (18.5: f)
Entering state 40
Reading a token: Next token is token '(' (18.6: )
Shifting token '(' (18.6: )
Entering state 82
Reading a token: Next token is token IDENTIFIER (18.7: y)
Shifting token IDENTIFIER (18.7: y)
Entering state 71
Reading a token: Next token is token ')' (18.8: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (18.7: y)
-> $$ = nterm primary_expression (18.7: )
Stack now 82 40 52 24 17 14 8 5 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (18.7: )
-> $$ = nterm postfix_expression (18.7: )
Stack now 82 40 52 24 17 14 8 5 0
Entering state 58
Next token is token ')' (18.8: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (18.7: )
-> $$ = nterm unary_expression (18.7: )
Stack now 82 40 52 24 17 14 8 5 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (18.7: )
-> $$ = nterm multiplicative_expression (18.7: )
Stack now 82 40 52 24 17 14 8 5 0
Entering state 77
Next token is token ')' (18.8: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (18.7: )
-> $$ = nterm additive_expression (18.7: )
Stack now 82 40 52 24 17 14 8 5 0
Entering state 76
Next token is token ')' (18.8: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (18.7: )
-> $$ = nterm relational_expression (18.7: )
Stack now 82 40 52 24 17 14 8 5 0
Entering state 75
Next token is token ')' (18.8: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (18.7: )
-> $$ = nterm equality_expression (18.7: )
Stack now 82 40 52 24 17 14 8 5 0
Entering state 74
Next token is token ')' (18.8: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (18.7: )
-> $$ = nterm logical_and_expression (18.7: )
Stack now 82 40 52 24 17 14 8 5 0
Entering state 73
Next token is token ')' (18.8: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (18.7: )
-> $$ = nterm expression (18.7: )
Stack now 82 40 52 24 17 14 8 5 0
Entering state 118
Next token is token ')' (18.8: )
Reducing stack by rule 76 (line 1393):
   $1 = nterm expression (18.7: )
-> $$ = nterm expression_list (18.7: )
Stack now 82 40 52 24 17 14 8 5 0
Entering state 119
Next token is token ')' (18.8: )
Shifting token ')' (18.8: )
Entering state 147
Reading a token: Next token is token ';' (18.9: )
Shifting token ';' (18.9: )
Entering state 154
Reducing stack by rule 43 (line 594):
   $1 = token IDENTIFIER (18.5: f)
   $2 = token '(' (18.6: )
   $3 = nterm expression_list (18.7: )
   $4 = token ')' (18.8: )
   $5 = token ';' (18.9: )
-> $$ = nterm procedure_call (18.5-9: )
Stack now 52 24 17 14 8 5 0
Entering state 61
Reducing stack by rule 38 (line 474):
   $1 = nterm procedure_call (18.5-9: )
-> $$ = nterm statement (18.5-9: )
Stack now 52 24 17 14 8 5 0
Entering state 53
Reducing stack by rule 31 (line 444):
   $1 = nterm statement (18.5-9: )
-> $$ = nterm statement_list (18.5-9: )
Stack now 52 24 17 14 8 5 0
Entering state 86
Reading a token: Next token is token IDENTIFIER (19.5: f)
Shifting token IDENTIFIER (19.5: f)
Entering state 40
Reading a token: Next token is token '(' (19.6: )
Shifting token '(' (19.6: )
Entering state 82
Reading a token: Next token is token IDENTIFIER (19.7: x)
Shifting token IDENTIFIER (19.7: x)
Entering state 71
Reading a token: Next token is token ')' (19.8: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (19.7: x)
-> $$ = nterm primary_expression (19.7: )
Stack now 82 40 86 52 24 17 14 8 5 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (19.7: )
-> $$ = nterm postfix_expression (19.7: )
Stack now 82 40 86 52 24 17 14 8 5 0
Entering state 58
Next token is token ')' (19.8: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (19.7: )
-> $$ = nterm unary_expression (19.7: )
Stack now 82 40 86 52 24 17 14 8 5 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (19.7: )
-> $$ = nterm multiplicative_expression (19.7: )
Stack now 82 40 86 52 24 17 14 8 5 0
Entering state 77
Next token is token ')' (19.8: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (19.7: )
-> $$ = nterm additive_expression (19.7: )
Stack now 82 40 86 52 24 17 14 8 5 0
Entering state 76
Next token is token ')' (19.8: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (19.7: )
-> $$ = nterm relational_expression (19.7: )
Stack now 82 40 86 52 24 17 14 8 5 0
Entering state 75
Next token is token ')' (19.8: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (19.7: )
-> $$ = nterm equality_expression (19.7: )
Stack now 82 40 86 52 24 17 14 8 5 0
Entering state 74
Next token is token ')' (19.8: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (19.7: )
-> $$ = nterm logical_and_expression (19.7: )
Stack now 82 40 86 52 24 17 14 8 5 0
Entering state 73
Next token is token ')' (19.8: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (19.7: )
-> $$ = nterm expression (19.7: )
Stack now 82 40 86 52 24 17 14 8 5 0
Entering state 118
Next token is token ')' (19.8: )
Reducing stack by rule 76 (line 1393):
   $1 = nterm expression (19.7: )
-> $$ = nterm expression_list (19.7: )
Stack now 82 40 86 52 24 17 14 8 5 0
Entering state 119
Next token is token ')' (19.8: )
Shifting token ')' (19.8: )
Entering state 147
Reading a token: Next token is token ';' (19.9: )
Shifting token ';' (19.9: )
Entering state 154
Reducing stack by rule 43 (line 594):
   $1 = token IDENTIFIER (19.5: f)
   $2 = token '(' (19.6: )
   $3 = nterm expression_list (19.7: )
   $4 = token ')' (19.8: )
   $5 = token ';' (19.9: )
-> $$ = nterm procedure_call (19.5-9: )
Stack now 86 52 24 17 14 8 5 0
Entering state 61
Reducing stack by rule 38 (line 474):
   $1 = nterm procedure_call (19.5-9: )
-> $$ = nterm statement (19.5-9: )
Stack now 86 52 24 17 14 8 5 0
Entering state 88
Reducing stack by rule 32 (line 449):
   $1 = nterm statement_list (18.5-9: )
   $2 = nterm statement (19.5-9: )
-> $$ = nterm statement_list (18.5-19.9: )
Stack now 52 24 17 14 8 5 0
Entering state 86
Reading a token: Next token is token '}' (20.1: )
Shifting token '}' (20.1: )
Entering state 122
Reducing stack by rule 30 (line 436):
   $1 = token '{' (15.1: )
   $2 = nterm declaration_list (16.5-17.11: )
   $3 = nterm statement_list (18.5-19.9: )
   $4 = token '}' (20.1: )
-> $$ = nterm compound_statement (15.1-20.1: )
Stack now 17 14 8 5 0
Entering state 25
Reducing stack by rule 8 (line 158):
   $1 = nterm type_specifier (14.1-3: )
   $2 = nterm fun_declarator (14.5-10: )
   $3 = nterm $@2 (14.11: )
   $4 = nterm compound_statement (15.1-20.1: )
-> $$ = nterm function_definition (14.1-20.1: )
Stack now 5 0
Entering state 12
Reducing stack by rule 4 (line 130):
   $1 = nterm translation_unit (1.1-13.1: )
   $2 = nterm function_definition (14.1-20.1: )
-> $$ = nterm translation_unit (1.1-20.1: )
Stack now 0
Entering state 5
Reading a token: Next token is token INT (22.1-3: )
Shifting token INT (22.1-3: )
Entering state 2
Reducing stack by rule 10 (line 228):
   $1 = token INT (22.1-3: )
-> $$ = nterm type_specifier (22.1-3: )
Stack now 5 0
Entering state 8
Reading a token: Next token is token IDENTIFIER (22.5: h)
Shifting token IDENTIFIER (22.5: h)
Entering state 13
Reading a token: Next token is token '(' (22.6: )
Shifting token '(' (22.6: )
Entering state 16
Reading a token: Next token is token INT (22.7-9: )
Shifting token INT (22.7-9: )
Entering state 2
Reducing stack by rule 10 (line 228):
   $1 = token INT (22.7-9: )
-> $$ = nterm type_specifier (22.7-9: )
Stack now 16 13 8 5 0
Entering state 21
Reading a token: Next token is token IDENTIFIER (22.11: x)
Shifting token IDENTIFIER (22.11: x)
Entering state 30
Reducing stack by rule 18 (line 275):
   $1 = token IDENTIFIER (22.11: x)
-> $$ = nterm declarator_arr (22.11: )
Stack now 21 16 13 8 5 0
Entering state 32
Reading a token: Next token is token '[' (22.12: )
Shifting token '[' (22.12: )
Entering state 69
Reading a token: Next token is token INT_CONSTANT (22.13-14: 20)
Shifting token INT_CONSTANT (22.13-14: 20)
Entering state 99
Reading a token: Next token is token ']' (22.15: )
Shifting token ']' (22.15: )
Entering state 128
Reducing stack by rule 19 (line 278):
   $1 = nterm declarator_arr (22.11: )
   $2 = token '[' (22.12: )
   $3 = token INT_CONSTANT (22.13-14: 20)
   $4 = token ']' (22.15: )
-> $$ = nterm declarator_arr (22.11-15: )
Stack now 21 16 13 8 5 0
Entering state 32
Reading a token: Next token is token '[' (22.16: )
Shifting token '[' (22.16: )
Entering state 69
Reading a token: Next token is token INT_CONSTANT (22.17-18: 10)
Shifting token INT_CONSTANT (22.17-18: 10)
Entering state 99
Reading a token: Next token is token ']' (22.19: )
Shifting token ']' (22.19: )
Entering state 128
Reducing stack by rule 19 (line 278):
   $1 = nterm declarator_arr (22.11-15: )
   $2 = token '[' (22.16: )
   $3 = token INT_CONSTANT (22.17-18: 10)
   $4 = token ']' (22.19: )
-> $$ = nterm declarator_arr (22.11-19: )
Stack now 21 16 13 8 5 0
Entering state 32
Reading a token: Next token is token '[' (22.20: )
Shifting token '[' (22.20: )
Entering state 69
Reading a token: Next token is token INT_CONSTANT (22.21-22: 10)
Shifting token INT_CONSTANT (22.21-22: 10)
Entering state 99
Reading a token: Next token is token ']' (22.23: )
Shifting token ']' (22.23: )
Entering state 128
Reducing stack by rule 19 (line 278):
   $1 = nterm declarator_arr (22.11-19: )
   $2 = token '[' (22.20: )
   $3 = token INT_CONSTANT (22.21-22: 10)
   $4 = token ']' (22.23: )
-> $$ = nterm declarator_arr (22.11-23: )
Stack now 21 16 13 8 5 0
Entering state 32
Reading a token: Next token is token ')' (22.24: )
Reducing stack by rule 20 (line 294):
   $1 = nterm declarator_arr (22.11-23: )
-> $$ = nterm declarator (22.11-23: )
Stack now 21 16 13 8 5 0
Entering state 33
Reducing stack by rule 17 (line 265):
   $1 = nterm type_specifier (22.7-9: )
   $2 = nterm declarator (22.11-23: )
-> $$ = nterm parameter_declaration (22.7-23: )
Stack now 16 13 8 5 0
Entering state 23
Reducing stack by rule 15 (line 250):
   $1 = nterm parameter_declaration (22.7-23: )
-> $$ = nterm parameter_list (22.7-23: )
Stack now 16 13 8 5 0
Entering state 22
Next token is token ')' (22.24: )
Shifting token ')' (22.24: )
Entering state 34
Reducing stack by rule 13 (line 240):
   $1 = token IDENTIFIER (22.5: h)
   $2 = token '(' (22.6: )
   $3 = nterm parameter_list (22.7-23: )
   $4 = token ')' (22.24: )
-> $$ = nterm fun_declarator (22.5-24: )
Stack now 8 5 0
Entering state 14
Reducing stack by rule 7 (line 159):
-> $$ = nterm $@2 (22.25: )
Stack now 14 8 5 0
Entering state 17
Reading a token: Next token is token '{' (22.26: )
Shifting token '{' (22.26: )
Entering state 24
Reading a token: Next token is token '}' (22.27: )
Shifting token '}' (22.27: )
Entering state 46
Reducing stack by rule 27 (line 426):
   $1 = token '{' (22.26: )
   $2 = token '}' (22.27: )
-> $$ = nterm compound_statement (22.26-27: )
Stack now 17 14 8 5 0
Entering state 25
Reducing stack by rule 8 (line 158):
   $1 = nterm type_specifier (22.1-3: )
   $2 = nterm fun_declarator (22.5-24: )
   $3 = nterm $@2 (22.25: )
   $4 = nterm compound_statement (22.26-27: )
-> $$ = nterm function_definition (22.1-27: )
Stack now 5 0
Entering state 12
Reducing stack by rule 4 (line 130):
   $1 = nterm translation_unit (1.1-20.1: )
   $2 = nterm function_definition (22.1-27: )
-> $$ = nterm translation_unit (1.1-22.27: )
Stack now 0
Entering state 5
Reading a token: Next token is token INT (23.1-3: )
Shifting token INT (23.1-3: )
Entering state 2
Reducing stack by rule 10 (line 228):
   $1 = token INT (23.1-3: )
-> $$ = nterm type_specifier (23.1-3: )
Stack now 5 0
Entering state 8
Reading a token: Next token is token IDENTIFIER (23.5-9: main1)
Shifting token IDENTIFIER (23.5-9: main1)
Entering state 13
Reading a token: Next token is token '(' (23.10: )
Shifting token '(' (23.10: )
Entering state 16
Reading a token: Next token is token ')' (23.11: )
Shifting token ')' (23.11: )
Entering state 20
Reducing stack by rule 14 (line 244):
   $1 = token IDENTIFIER (23.5-9: main1)
   $2 = token '(' (23.10: )
   $3 = token ')' (23.11: )
-> $$ = nterm fun_declarator (23.5-11: )
Stack now 8 5 0
Entering state 14
Reducing stack by rule 7 (line 159):
-> $$ = nterm $@2 (23.12: )
Stack now 14 8 5 0
Entering state 17
Reading a token: Next token is token '{' (24.1: )
Shifting token '{' (24.1: )
Entering state 24
Reading a token: Next token is token VOID (25.5-8: )
Shifting token VOID (25.5-8: )
Entering state 1
Reducing stack by rule 9 (line 225):
   $1 = token VOID (25.5-8: )
-> $$ = nterm type_specifier (25.5-8: )
Stack now 24 17 14 8 5 0
Entering state 26
Reading a token: Next token is token '*' (25.10: )
Shifting token '*' (25.10: )
Entering state 31
Reading a token: Next token is token IDENTIFIER (25.11: e)
Shifting token IDENTIFIER (25.11: e)
Entering state 30
Reducing stack by rule 18 (line 275):
   $1 = token IDENTIFIER (25.11: e)
-> $$ = nterm declarator_arr (25.11: )
Stack now 31 26 24 17 14 8 5 0
Entering state 32
Reading a token: Next token is token '[' (25.12: )
Shifting token '[' (25.12: )
Entering state 69
Reading a token: Next token is token INT_CONSTANT (25.13-14: 10)
Shifting token INT_CONSTANT (25.13-14: 10)
Entering state 99
Reading a token: Next token is token ']' (25.15: )
Shifting token ']' (25.15: )
Entering state 128
Reducing stack by rule 19 (line 278):
   $1 = nterm declarator_arr (25.11: )
   $2 = token '[' (25.12: )
   $3 = token INT_CONSTANT (25.13-14: 10)
   $4 = token ']' (25.15: )
-> $$ = nterm declarator_arr (25.11-15: )
Stack now 31 26 24 17 14 8 5 0
Entering state 32
Reading a token: Next token is token ';' (25.16: )
Reducing stack by rule 20 (line 294):
   $1 = nterm declarator_arr (25.11-15: )
-> $$ = nterm declarator (25.11-15: )
Stack now 31 26 24 17 14 8 5 0
Entering state 68
Reducing stack by rule 21 (line 297):
   $1 = token '*' (25.10: )
   $2 = nterm declarator (25.11-15: )
-> $$ = nterm declarator (25.10-15: )
Stack now 26 24 17 14 8 5 0
Entering state 64
Reducing stack by rule 25 (line 414):
   $1 = nterm declarator (25.10-15: )
-> $$ = nterm declarator_list (25.10-15: )
Stack now 26 24 17 14 8 5 0
Entering state 65
Next token is token ';' (25.16: )
Shifting token ';' (25.16: )
Entering state 97
Reducing stack by rule 24 (line 408):
   $1 = nterm type_specifier (25.5-8: )
   $2 = nterm declarator_list (25.10-15: )
   $3 = token ';' (25.16: )
-> $$ = nterm declaration (25.5-16: )
Stack now 24 17 14 8 5 0
Entering state 27
Reducing stack by rule 22 (line 304):
   $1 = nterm declaration (25.5-16: )
-> $$ = nterm declaration_list (25.5-16: )
Stack now 24 17 14 8 5 0
Entering state 52
Reading a token: Next token is token IDENTIFIER (26.5: h)
Shifting token IDENTIFIER (26.5: h)
Entering state 40
Reading a token: Next token is token '(' (26.6: )
Shifting token '(' (26.6: )
Entering state 82
Reading a token: Next token is token IDENTIFIER (26.7: e)
Shifting token IDENTIFIER (26.7: e)
Entering state 71
Reading a token: Next token is token ')' (26.8: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (26.7: e)
-> $$ = nterm primary_expression (26.7: )
Stack now 82 40 52 24 17 14 8 5 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (26.7: )
-> $$ = nterm postfix_expression (26.7: )
Stack now 82 40 52 24 17 14 8 5 0
Entering state 58
Next token is token ')' (26.8: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (26.7: )
-> $$ = nterm unary_expression (26.7: )
Stack now 82 40 52 24 17 14 8 5 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (26.7: )
-> $$ = nterm multiplicative_expression (26.7: )
Stack now 82 40 52 24 17 14 8 5 0
Entering state 77
Next token is token ')' (26.8: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (26.7: )
-> $$ = nterm additive_expression (26.7: )
Stack now 82 40 52 24 17 14 8 5 0
Entering state 76
Next token is token ')' (26.8: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (26.7: )
-> $$ = nterm relational_expression (26.7: )
Stack now 82 40 52 24 17 14 8 5 0
Entering state 75
Next token is token ')' (26.8: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (26.7: )
-> $$ = nterm equality_expression (26.7: )
Stack now 82 40 52 24 17 14 8 5 0
Entering state 74
Next token is token ')' (26.8: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (26.7: )
-> $$ = nterm logical_and_expression (26.7: )
Stack now 82 40 52 24 17 14 8 5 0
Entering state 73
Next token is token ')' (26.8: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (26.7: )
-> $$ = nterm expression (26.7: )
Stack now 82 40 52 24 17 14 8 5 0
Entering state 118
Next token is token ')' (26.8: )
Reducing stack by rule 76 (line 1393):
   $1 = nterm expression (26.7: )
-> $$ = nterm expression_list (26.7: )
Stack now 82 40 52 24 17 14 8 5 0
Entering state 119
Next token is token ')' (26.8: )
Shifting token ')' (26.8: )
Entering state 147
Reading a token: Next token is token ';' (26.9: )
Shifting token ';' (26.9: )
Entering state 154
Reducing stack by rule 43 (line 594):
   $1 = token IDENTIFIER (26.5: h)
   $2 = token '(' (26.6: )
   $3 = nterm expression_list (26.7: )
   $4 = token ')' (26.8: )
   $5 = token ';' (26.9: )
