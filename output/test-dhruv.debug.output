Starting parse
Entering state 0
Reading a token: Next token is token INT (3.1-3: )
Shifting token INT (3.1-3: )
Entering state 2
Reducing stack by rule 10 (line 228):
   $1 = token INT (3.1-3: )
-> $$ = nterm type_specifier (3.1-3: )
Stack now 0
Entering state 8
Reading a token: Next token is token IDENTIFIER (3.5-8: main)
Shifting token IDENTIFIER (3.5-8: main)
Entering state 13
Reading a token: Next token is token '(' (3.9: )
Shifting token '(' (3.9: )
Entering state 16
Reading a token: Next token is token ')' (3.10: )
Shifting token ')' (3.10: )
Entering state 20
Reducing stack by rule 14 (line 244):
   $1 = token IDENTIFIER (3.5-8: main)
   $2 = token '(' (3.9: )
   $3 = token ')' (3.10: )
-> $$ = nterm fun_declarator (3.5-10: )
Stack now 8 0
Entering state 14
Reducing stack by rule 7 (line 159):
-> $$ = nterm $@2 (3.11: )
Stack now 14 8 0
Entering state 17
Reading a token: Next token is token '{' (4.1: )
Shifting token '{' (4.1: )
Entering state 24
Reading a token: Next token is token INT (5.3-5: )
Shifting token INT (5.3-5: )
Entering state 2
Reducing stack by rule 10 (line 228):
   $1 = token INT (5.3-5: )
-> $$ = nterm type_specifier (5.3-5: )
Stack now 24 17 14 8 0
Entering state 26
Reading a token: Next token is token IDENTIFIER (5.7: a)
Shifting token IDENTIFIER (5.7: a)
Entering state 30
Reducing stack by rule 18 (line 275):
   $1 = token IDENTIFIER (5.7: a)
-> $$ = nterm declarator_arr (5.7: )
Stack now 26 24 17 14 8 0
Entering state 32
Reading a token: Next token is token '[' (5.8: )
Shifting token '[' (5.8: )
Entering state 69
Reading a token: Next token is token INT_CONSTANT (5.9: 0)
Shifting token INT_CONSTANT (5.9: 0)
Entering state 99
Reading a token: Next token is token ']' (5.10: )
Shifting token ']' (5.10: )
Entering state 128
Reducing stack by rule 19 (line 278):
   $1 = nterm declarator_arr (5.7: )
   $2 = token '[' (5.8: )
   $3 = token INT_CONSTANT (5.9: 0)
   $4 = token ']' (5.10: )
-> $$ = nterm declarator_arr (5.7-10: )
Stack now 26 24 17 14 8 0
Entering state 32
Reading a token: Next token is token ';' (5.11: )
Reducing stack by rule 20 (line 294):
   $1 = nterm declarator_arr (5.7-10: )
-> $$ = nterm declarator (5.7-10: )
Stack now 26 24 17 14 8 0
Entering state 64
Reducing stack by rule 25 (line 414):
   $1 = nterm declarator (5.7-10: )
-> $$ = nterm declarator_list (5.7-10: )
Stack now 26 24 17 14 8 0
Entering state 65
Next token is token ';' (5.11: )
Shifting token ';' (5.11: )
Entering state 97
Reducing stack by rule 24 (line 408):
   $1 = nterm type_specifier (5.3-5: )
   $2 = nterm declarator_list (5.7-10: )
   $3 = token ';' (5.11: )
-> $$ = nterm declaration (5.3-11: )
Stack now 24 17 14 8 0
Entering state 27
Reducing stack by rule 22 (line 304):
   $1 = nterm declaration (5.3-11: )
-> $$ = nterm declaration_list (5.3-11: )
Stack now 24 17 14 8 0
Entering state 52
Reading a token: Next token is token INT (6.3-5: )
Shifting token INT (6.3-5: )
Entering state 2
Reducing stack by rule 10 (line 228):
   $1 = token INT (6.3-5: )
-> $$ = nterm type_specifier (6.3-5: )
Stack now 52 24 17 14 8 0
Entering state 26
Reading a token: Next token is token IDENTIFIER (6.7: b)
Shifting token IDENTIFIER (6.7: b)
Entering state 30
Reducing stack by rule 18 (line 275):
   $1 = token IDENTIFIER (6.7: b)
-> $$ = nterm declarator_arr (6.7: )
Stack now 26 52 24 17 14 8 0
Entering state 32
Reading a token: Next token is token ';' (6.8: )
Reducing stack by rule 20 (line 294):
   $1 = nterm declarator_arr (6.7: )
-> $$ = nterm declarator (6.7: )
Stack now 26 52 24 17 14 8 0
Entering state 64
Reducing stack by rule 25 (line 414):
   $1 = nterm declarator (6.7: )
-> $$ = nterm declarator_list (6.7: )
Stack now 26 52 24 17 14 8 0
Entering state 65
Next token is token ';' (6.8: )
Shifting token ';' (6.8: )
Entering state 97
Reducing stack by rule 24 (line 408):
   $1 = nterm type_specifier (6.3-5: )
   $2 = nterm declarator_list (6.7: )
   $3 = token ';' (6.8: )
-> $$ = nterm declaration (6.3-8: )
Stack now 52 24 17 14 8 0
Entering state 67
Reducing stack by rule 23 (line 356):
   $1 = nterm declaration_list (5.3-11: )
   $2 = nterm declaration (6.3-8: )
-> $$ = nterm declaration_list (5.3-6.8: )
Stack now 24 17 14 8 0
Entering state 52
Reading a token: Next token is token IDENTIFIER (7.3: b)
Shifting token IDENTIFIER (7.3: b)
Entering state 40
Reading a token: Next token is token '=' (7.5: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (7.3: b)
-> $$ = nterm primary_expression (7.3: )
Stack now 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (7.3: )
-> $$ = nterm postfix_expression (7.3: )
Stack now 52 24 17 14 8 0
Entering state 58
Next token is token '=' (7.5: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (7.3: )
-> $$ = nterm unary_expression (7.3: )
Stack now 52 24 17 14 8 0
Entering state 57
Next token is token '=' (7.5: )
Shifting token '=' (7.5: )
Entering state 90
Reading a token: Next token is token IDENTIFIER (7.7: a)
Shifting token IDENTIFIER (7.7: a)
Entering state 71
Reading a token: Next token is token '[' (7.8: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (7.7: a)
-> $$ = nterm primary_expression (7.7: )
Stack now 90 57 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (7.7: )
-> $$ = nterm postfix_expression (7.7: )
Stack now 90 57 52 24 17 14 8 0
Entering state 58
Next token is token '[' (7.8: )
Shifting token '[' (7.8: )
Entering state 91
Reading a token: Next token is token INT_CONSTANT (7.9: 0)
Shifting token INT_CONSTANT (7.9: 0)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (7.9: 0)
-> $$ = nterm primary_expression (7.9: )
Stack now 91 58 90 57 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (7.9: )
-> $$ = nterm postfix_expression (7.9: )
Stack now 91 58 90 57 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ']' (7.10: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (7.9: )
-> $$ = nterm unary_expression (7.9: )
Stack now 91 58 90 57 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (7.9: )
-> $$ = nterm multiplicative_expression (7.9: )
Stack now 91 58 90 57 52 24 17 14 8 0
Entering state 77
Next token is token ']' (7.10: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (7.9: )
-> $$ = nterm additive_expression (7.9: )
Stack now 91 58 90 57 52 24 17 14 8 0
Entering state 76
Next token is token ']' (7.10: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (7.9: )
-> $$ = nterm relational_expression (7.9: )
Stack now 91 58 90 57 52 24 17 14 8 0
Entering state 75
Next token is token ']' (7.10: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (7.9: )
-> $$ = nterm equality_expression (7.9: )
Stack now 91 58 90 57 52 24 17 14 8 0
Entering state 74
Next token is token ']' (7.10: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (7.9: )
-> $$ = nterm logical_and_expression (7.9: )
Stack now 91 58 90 57 52 24 17 14 8 0
Entering state 73
Next token is token ']' (7.10: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (7.9: )
-> $$ = nterm expression (7.9: )
Stack now 91 58 90 57 52 24 17 14 8 0
Entering state 124
Next token is token ']' (7.10: )
Shifting token ']' (7.10: )
Entering state 149
Reducing stack by rule 65 (line 1197):
   $1 = nterm postfix_expression (7.7: )
   $2 = token '[' (7.8: )
   $3 = nterm expression (7.9: )
   $4 = token ']' (7.10: )
-> $$ = nterm postfix_expression (7.7-10: )
Stack now 90 57 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ';' (7.11: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (7.7-10: )
-> $$ = nterm unary_expression (7.7-10: )
Stack now 90 57 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (7.7-10: )
-> $$ = nterm multiplicative_expression (7.7-10: )
Stack now 90 57 52 24 17 14 8 0
Entering state 77
Next token is token ';' (7.11: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (7.7-10: )
-> $$ = nterm additive_expression (7.7-10: )
Stack now 90 57 52 24 17 14 8 0
Entering state 76
Next token is token ';' (7.11: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (7.7-10: )
-> $$ = nterm relational_expression (7.7-10: )
Stack now 90 57 52 24 17 14 8 0
Entering state 75
Next token is token ';' (7.11: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (7.7-10: )
-> $$ = nterm equality_expression (7.7-10: )
Stack now 90 57 52 24 17 14 8 0
Entering state 74
Next token is token ';' (7.11: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (7.7-10: )
-> $$ = nterm logical_and_expression (7.7-10: )
Stack now 90 57 52 24 17 14 8 0
Entering state 73
Next token is token ';' (7.11: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (7.7-10: )
-> $$ = nterm expression (7.7-10: )
Stack now 90 57 52 24 17 14 8 0
Entering state 123
Next token is token ';' (7.11: )
Reducing stack by rule 40 (line 506):
   $1 = nterm unary_expression (7.3: )
   $2 = token '=' (7.5: )
   $3 = nterm expression (7.7-10: )
-> $$ = nterm assignment_expression (7.3-10: )
Stack now 52 24 17 14 8 0
Entering state 56
Next token is token ';' (7.11: )
Shifting token ';' (7.11: )
Entering state 89
Reducing stack by rule 41 (line 559):
   $1 = nterm assignment_expression (7.3-10: )
   $2 = token ';' (7.11: )
-> $$ = nterm assignment_statement (7.3-11: )
Stack now 52 24 17 14 8 0
Entering state 54
Reducing stack by rule 37 (line 469):
   $1 = nterm assignment_statement (7.3-11: )
-> $$ = nterm statement (7.3-11: )
Stack now 52 24 17 14 8 0
Entering state 53
Reducing stack by rule 31 (line 444):
   $1 = nterm statement (7.3-11: )
-> $$ = nterm statement_list (7.3-11: )
Stack now 52 24 17 14 8 0
Entering state 86
Reading a token: Next token is token '}' (8.1: )
Shifting token '}' (8.1: )
Entering state 122
Reducing stack by rule 30 (line 436):
   $1 = token '{' (4.1: )
   $2 = nterm declaration_list (5.3-6.8: )
   $3 = nterm statement_list (7.3-11: )
   $4 = token '}' (8.1: )
-> $$ = nterm compound_statement (4.1-8.1: )
Stack now 17 14 8 0
Entering state 25
Reducing stack by rule 8 (line 158):
   $1 = nterm type_specifier (3.1-3: )
   $2 = nterm fun_declarator (3.5-10: )
   $3 = nterm $@2 (3.11: )
   $4 = nterm compound_statement (4.1-8.1: )
-> $$ = nterm function_definition (3.1-8.1: )
Stack now 0
Entering state 7
Reducing stack by rule 2 (line 126):
   $1 = nterm function_definition (3.1-8.1: )
-> $$ = nterm translation_unit (3.1-8.1: )
Stack now 0
Entering state 5
Reading a token: Next token is token $end (8.1: )
Shifting token $end (8.1: )
Entering state 10
Cleanup: popping token $end (8.1: )
Cleanup: popping nterm translation_unit (3.1-8.1: )
