Starting parse
Entering state 0
Reading a token: Next token is token INT (1.1-3: )
Shifting token INT (1.1-3: )
Entering state 2
Reducing stack by rule 10 (line 228):
   $1 = token INT (1.1-3: )
-> $$ = nterm type_specifier (1.1-3: )
Stack now 0
Entering state 8
Reading a token: Next token is token IDENTIFIER (1.5-8: main)
Shifting token IDENTIFIER (1.5-8: main)
Entering state 13
Reading a token: Next token is token '(' (1.9: )
Shifting token '(' (1.9: )
Entering state 16
Reading a token: Next token is token ')' (1.10: )
Shifting token ')' (1.10: )
Entering state 20
Reducing stack by rule 14 (line 244):
   $1 = token IDENTIFIER (1.5-8: main)
   $2 = token '(' (1.9: )
   $3 = token ')' (1.10: )
-> $$ = nterm fun_declarator (1.5-10: )
Stack now 8 0
Entering state 14
Reducing stack by rule 7 (line 159):
-> $$ = nterm $@2 (1.11: )
Stack now 14 8 0
Entering state 17
Reading a token: Next token is token '{' (2.1: )
Shifting token '{' (2.1: )
Entering state 24
Reading a token: Next token is token INT (3.5-7: )
Shifting token INT (3.5-7: )
Entering state 2
Reducing stack by rule 10 (line 228):
   $1 = token INT (3.5-7: )
-> $$ = nterm type_specifier (3.5-7: )
Stack now 24 17 14 8 0
Entering state 26
Reading a token: Next token is token IDENTIFIER (3.9: q)
Shifting token IDENTIFIER (3.9: q)
Entering state 30
Reducing stack by rule 18 (line 275):
   $1 = token IDENTIFIER (3.9: q)
-> $$ = nterm declarator_arr (3.9: )
Stack now 26 24 17 14 8 0
Entering state 32
Reading a token: Next token is token ';' (3.10: )
Reducing stack by rule 20 (line 294):
   $1 = nterm declarator_arr (3.9: )
-> $$ = nterm declarator (3.9: )
Stack now 26 24 17 14 8 0
Entering state 64
Reducing stack by rule 25 (line 414):
   $1 = nterm declarator (3.9: )
-> $$ = nterm declarator_list (3.9: )
Stack now 26 24 17 14 8 0
Entering state 65
Next token is token ';' (3.10: )
Shifting token ';' (3.10: )
Entering state 97
Reducing stack by rule 24 (line 408):
   $1 = nterm type_specifier (3.5-7: )
   $2 = nterm declarator_list (3.9: )
   $3 = token ';' (3.10: )
-> $$ = nterm declaration (3.5-10: )
Stack now 24 17 14 8 0
Entering state 27
Reducing stack by rule 22 (line 304):
   $1 = nterm declaration (3.5-10: )
-> $$ = nterm declaration_list (3.5-10: )
Stack now 24 17 14 8 0
Entering state 52
Reading a token: Next token is token INT (4.5-7: )
Shifting token INT (4.5-7: )
Entering state 2
Reducing stack by rule 10 (line 228):
   $1 = token INT (4.5-7: )
-> $$ = nterm type_specifier (4.5-7: )
Stack now 52 24 17 14 8 0
Entering state 26
Reading a token: Next token is token '*' (4.9: )
Shifting token '*' (4.9: )
Entering state 31
Reading a token: Next token is token IDENTIFIER (4.10: r)
Shifting token IDENTIFIER (4.10: r)
Entering state 30
Reducing stack by rule 18 (line 275):
   $1 = token IDENTIFIER (4.10: r)
-> $$ = nterm declarator_arr (4.10: )
Stack now 31 26 52 24 17 14 8 0
Entering state 32
Reading a token: Next token is token ';' (4.11: )
Reducing stack by rule 20 (line 294):
   $1 = nterm declarator_arr (4.10: )
-> $$ = nterm declarator (4.10: )
Stack now 31 26 52 24 17 14 8 0
Entering state 68
Reducing stack by rule 21 (line 297):
   $1 = token '*' (4.9: )
   $2 = nterm declarator (4.10: )
-> $$ = nterm declarator (4.9-10: )
Stack now 26 52 24 17 14 8 0
Entering state 64
Reducing stack by rule 25 (line 414):
   $1 = nterm declarator (4.9-10: )
-> $$ = nterm declarator_list (4.9-10: )
Stack now 26 52 24 17 14 8 0
Entering state 65
Next token is token ';' (4.11: )
Shifting token ';' (4.11: )
Entering state 97
Reducing stack by rule 24 (line 408):
   $1 = nterm type_specifier (4.5-7: )
   $2 = nterm declarator_list (4.9-10: )
   $3 = token ';' (4.11: )
-> $$ = nterm declaration (4.5-11: )
Stack now 52 24 17 14 8 0
Entering state 67
Reducing stack by rule 23 (line 356):
   $1 = nterm declaration_list (3.5-10: )
   $2 = nterm declaration (4.5-11: )
-> $$ = nterm declaration_list (3.5-4.11: )
Stack now 24 17 14 8 0
Entering state 52
Reading a token: Next token is token IDENTIFIER (5.4: q)
Shifting token IDENTIFIER (5.4: q)
Entering state 40
Reading a token: Next token is token '=' (5.6: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (5.4: q)
-> $$ = nterm primary_expression (5.4: )
Stack now 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (5.4: )
-> $$ = nterm postfix_expression (5.4: )
Stack now 52 24 17 14 8 0
Entering state 58
Next token is token '=' (5.6: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (5.4: )
-> $$ = nterm unary_expression (5.4: )
Stack now 52 24 17 14 8 0
Entering state 57
Next token is token '=' (5.6: )
Shifting token '=' (5.6: )
Entering state 90
Reading a token: Next token is token '(' (5.8: )
Shifting token '(' (5.8: )
Entering state 44
Reading a token: Next token is token INT_CONSTANT (5.9: 1)
Shifting token INT_CONSTANT (5.9: 1)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (5.9: 1)
-> $$ = nterm primary_expression (5.9: )
Stack now 44 90 57 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (5.9: )
-> $$ = nterm postfix_expression (5.9: )
Stack now 44 90 57 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token EQ_OP (5.11-12: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (5.9: )
-> $$ = nterm unary_expression (5.9: )
Stack now 44 90 57 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (5.9: )
-> $$ = nterm multiplicative_expression (5.9: )
Stack now 44 90 57 52 24 17 14 8 0
Entering state 77
Next token is token EQ_OP (5.11-12: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (5.9: )
-> $$ = nterm additive_expression (5.9: )
Stack now 44 90 57 52 24 17 14 8 0
Entering state 76
Next token is token EQ_OP (5.11-12: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (5.9: )
-> $$ = nterm relational_expression (5.9: )
Stack now 44 90 57 52 24 17 14 8 0
Entering state 75
Next token is token EQ_OP (5.11-12: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (5.9: )
-> $$ = nterm equality_expression (5.9: )
Stack now 44 90 57 52 24 17 14 8 0
Entering state 74
Next token is token EQ_OP (5.11-12: )
Shifting token EQ_OP (5.11-12: )
Entering state 104
Reading a token: Next token is token INT_CONSTANT (5.14: 1)
Shifting token INT_CONSTANT (5.14: 1)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (5.14: 1)
-> $$ = nterm primary_expression (5.14: )
Stack now 104 74 44 90 57 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (5.14: )
-> $$ = nterm postfix_expression (5.14: )
Stack now 104 74 44 90 57 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ')' (5.15: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (5.14: )
-> $$ = nterm unary_expression (5.14: )
Stack now 104 74 44 90 57 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (5.14: )
-> $$ = nterm multiplicative_expression (5.14: )
Stack now 104 74 44 90 57 52 24 17 14 8 0
Entering state 77
Next token is token ')' (5.15: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (5.14: )
-> $$ = nterm additive_expression (5.14: )
Stack now 104 74 44 90 57 52 24 17 14 8 0
Entering state 76
Next token is token ')' (5.15: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (5.14: )
-> $$ = nterm relational_expression (5.14: )
Stack now 104 74 44 90 57 52 24 17 14 8 0
Entering state 133
Next token is token ')' (5.15: )
Reducing stack by rule 49 (line 701):
   $1 = nterm equality_expression (5.9: )
   $2 = token EQ_OP (5.11-12: )
   $3 = nterm relational_expression (5.14: )
-> $$ = nterm equality_expression (5.9-14: )
Stack now 44 90 57 52 24 17 14 8 0
Entering state 74
Next token is token ')' (5.15: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (5.9-14: )
-> $$ = nterm logical_and_expression (5.9-14: )
Stack now 44 90 57 52 24 17 14 8 0
Entering state 73
Next token is token ')' (5.15: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (5.9-14: )
-> $$ = nterm expression (5.9-14: )
Stack now 44 90 57 52 24 17 14 8 0
Entering state 83
Next token is token ')' (5.15: )
Shifting token ')' (5.15: )
Entering state 120
Reducing stack by rule 75 (line 1387):
   $1 = token '(' (5.8: )
   $2 = nterm expression (5.9-14: )
   $3 = token ')' (5.15: )
-> $$ = nterm primary_expression (5.8-15: )
Stack now 90 57 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (5.8-15: )
-> $$ = nterm postfix_expression (5.8-15: )
Stack now 90 57 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token EQ_OP (5.17-18: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (5.8-15: )
-> $$ = nterm unary_expression (5.8-15: )
Stack now 90 57 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (5.8-15: )
-> $$ = nterm multiplicative_expression (5.8-15: )
Stack now 90 57 52 24 17 14 8 0
Entering state 77
Next token is token EQ_OP (5.17-18: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (5.8-15: )
-> $$ = nterm additive_expression (5.8-15: )
Stack now 90 57 52 24 17 14 8 0
Entering state 76
Next token is token EQ_OP (5.17-18: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (5.8-15: )
-> $$ = nterm relational_expression (5.8-15: )
Stack now 90 57 52 24 17 14 8 0
Entering state 75
Next token is token EQ_OP (5.17-18: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (5.8-15: )
-> $$ = nterm equality_expression (5.8-15: )
Stack now 90 57 52 24 17 14 8 0
Entering state 74
Next token is token EQ_OP (5.17-18: )
Shifting token EQ_OP (5.17-18: )
Entering state 104
Reading a token: Next token is token IDENTIFIER (5.20: r)
Shifting token IDENTIFIER (5.20: r)
Entering state 71
Reading a token: Next token is token ';' (5.21: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (5.20: r)
-> $$ = nterm primary_expression (5.20: )
Stack now 104 74 90 57 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (5.20: )
-> $$ = nterm postfix_expression (5.20: )
Stack now 104 74 90 57 52 24 17 14 8 0
Entering state 58
Next token is token ';' (5.21: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (5.20: )
-> $$ = nterm unary_expression (5.20: )
Stack now 104 74 90 57 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (5.20: )
-> $$ = nterm multiplicative_expression (5.20: )
Stack now 104 74 90 57 52 24 17 14 8 0
Entering state 77
Next token is token ';' (5.21: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (5.20: )
-> $$ = nterm additive_expression (5.20: )
Stack now 104 74 90 57 52 24 17 14 8 0
Entering state 76
Next token is token ';' (5.21: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (5.20: )
-> $$ = nterm relational_expression (5.20: )
Stack now 104 74 90 57 52 24 17 14 8 0
Entering state 133
Next token is token ';' (5.21: )
Reducing stack by rule 49 (line 701):
   $1 = nterm equality_expression (5.8-15: )
   $2 = token EQ_OP (5.17-18: )
   $3 = nterm relational_expression (5.20: )
