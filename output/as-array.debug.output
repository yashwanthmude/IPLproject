Starting parse
Entering state 0
Reading a token: Next token is token INT (1.1-3: )
Shifting token INT (1.1-3: )
Entering state 2
Reducing stack by rule 10 (line 228):
   $1 = token INT (1.1-3: )
-> $$ = nterm type_specifier (1.1-3: )
Stack now 0
Entering state 8
Reading a token: Next token is token IDENTIFIER (1.5-8: main)
Shifting token IDENTIFIER (1.5-8: main)
Entering state 13
Reading a token: Next token is token '(' (1.9: )
Shifting token '(' (1.9: )
Entering state 16
Reading a token: Next token is token ')' (1.10: )
Shifting token ')' (1.10: )
Entering state 20
Reducing stack by rule 14 (line 244):
   $1 = token IDENTIFIER (1.5-8: main)
   $2 = token '(' (1.9: )
   $3 = token ')' (1.10: )
-> $$ = nterm fun_declarator (1.5-10: )
Stack now 8 0
Entering state 14
Reducing stack by rule 7 (line 159):
-> $$ = nterm $@2 (1.11: )
Stack now 14 8 0
Entering state 17
Reading a token: Next token is token '{' (1.11: )
Shifting token '{' (1.11: )
Entering state 24
Reading a token: Next token is token INT (3.4-6: )
Shifting token INT (3.4-6: )
Entering state 2
Reducing stack by rule 10 (line 228):
   $1 = token INT (3.4-6: )
-> $$ = nterm type_specifier (3.4-6: )
Stack now 24 17 14 8 0
Entering state 26
Reading a token: Next token is token IDENTIFIER (3.8-11: disp)
Shifting token IDENTIFIER (3.8-11: disp)
Entering state 30
Reducing stack by rule 18 (line 275):
   $1 = token IDENTIFIER (3.8-11: disp)
-> $$ = nterm declarator_arr (3.8-11: )
Stack now 26 24 17 14 8 0
Entering state 32
Reading a token: Next token is token '[' (3.12: )
Shifting token '[' (3.12: )
Entering state 69
Reading a token: Next token is token INT_CONSTANT (3.13: 2)
Shifting token INT_CONSTANT (3.13: 2)
Entering state 99
Reading a token: Next token is token ']' (3.14: )
Shifting token ']' (3.14: )
Entering state 128
Reducing stack by rule 19 (line 278):
   $1 = nterm declarator_arr (3.8-11: )
   $2 = token '[' (3.12: )
   $3 = token INT_CONSTANT (3.13: 2)
   $4 = token ']' (3.14: )
-> $$ = nterm declarator_arr (3.8-14: )
Stack now 26 24 17 14 8 0
Entering state 32
Reading a token: Next token is token '[' (3.15: )
Shifting token '[' (3.15: )
Entering state 69
Reading a token: Next token is token INT_CONSTANT (3.16: 3)
Shifting token INT_CONSTANT (3.16: 3)
Entering state 99
Reading a token: Next token is token ']' (3.17: )
Shifting token ']' (3.17: )
Entering state 128
Reducing stack by rule 19 (line 278):
   $1 = nterm declarator_arr (3.8-14: )
   $2 = token '[' (3.15: )
   $3 = token INT_CONSTANT (3.16: 3)
   $4 = token ']' (3.17: )
-> $$ = nterm declarator_arr (3.8-17: )
Stack now 26 24 17 14 8 0
Entering state 32
Reading a token: Next token is token ';' (3.18: )
Reducing stack by rule 20 (line 294):
   $1 = nterm declarator_arr (3.8-17: )
-> $$ = nterm declarator (3.8-17: )
Stack now 26 24 17 14 8 0
Entering state 64
Reducing stack by rule 25 (line 414):
   $1 = nterm declarator (3.8-17: )
-> $$ = nterm declarator_list (3.8-17: )
Stack now 26 24 17 14 8 0
Entering state 65
Next token is token ';' (3.18: )
Shifting token ';' (3.18: )
Entering state 97
Reducing stack by rule 24 (line 408):
   $1 = nterm type_specifier (3.4-6: )
   $2 = nterm declarator_list (3.8-17: )
   $3 = token ';' (3.18: )
-> $$ = nterm declaration (3.4-18: )
Stack now 24 17 14 8 0
Entering state 27
Reducing stack by rule 22 (line 304):
   $1 = nterm declaration (3.4-18: )
-> $$ = nterm declaration_list (3.4-18: )
Stack now 24 17 14 8 0
Entering state 52
Reading a token: Next token is token INT (5.4-6: )
Shifting token INT (5.4-6: )
Entering state 2
Reducing stack by rule 10 (line 228):
   $1 = token INT (5.4-6: )
-> $$ = nterm type_specifier (5.4-6: )
Stack now 52 24 17 14 8 0
Entering state 26
Reading a token: Next token is token IDENTIFIER (5.8: i)
Shifting token IDENTIFIER (5.8: i)
Entering state 30
Reducing stack by rule 18 (line 275):
   $1 = token IDENTIFIER (5.8: i)
-> $$ = nterm declarator_arr (5.8: )
Stack now 26 52 24 17 14 8 0
Entering state 32
Reading a token: Next token is token ',' (5.9: )
Reducing stack by rule 20 (line 294):
   $1 = nterm declarator_arr (5.8: )
-> $$ = nterm declarator (5.8: )
Stack now 26 52 24 17 14 8 0
Entering state 64
Reducing stack by rule 25 (line 414):
   $1 = nterm declarator (5.8: )
-> $$ = nterm declarator_list (5.8: )
Stack now 26 52 24 17 14 8 0
Entering state 65
Next token is token ',' (5.9: )
Shifting token ',' (5.9: )
Entering state 96
Reading a token: Next token is token IDENTIFIER (5.11: j)
Shifting token IDENTIFIER (5.11: j)
Entering state 30
Reducing stack by rule 18 (line 275):
   $1 = token IDENTIFIER (5.11: j)
-> $$ = nterm declarator_arr (5.11: )
Stack now 96 65 26 52 24 17 14 8 0
Entering state 32
Reading a token: Next token is token ';' (5.12: )
Reducing stack by rule 20 (line 294):
   $1 = nterm declarator_arr (5.11: )
-> $$ = nterm declarator (5.11: )
Stack now 96 65 26 52 24 17 14 8 0
Entering state 127
Reducing stack by rule 26 (line 418):
   $1 = nterm declarator_list (5.8: )
   $2 = token ',' (5.9: )
   $3 = nterm declarator (5.11: )
-> $$ = nterm declarator_list (5.8-11: )
Stack now 26 52 24 17 14 8 0
Entering state 65
Next token is token ';' (5.12: )
Shifting token ';' (5.12: )
Entering state 97
Reducing stack by rule 24 (line 408):
   $1 = nterm type_specifier (5.4-6: )
   $2 = nterm declarator_list (5.8-11: )
   $3 = token ';' (5.12: )
-> $$ = nterm declaration (5.4-12: )
Stack now 52 24 17 14 8 0
Entering state 67
Reducing stack by rule 23 (line 356):
   $1 = nterm declaration_list (3.4-18: )
   $2 = nterm declaration (5.4-12: )
-> $$ = nterm declaration_list (3.4-5.12: )
Stack now 24 17 14 8 0
Entering state 52
Reading a token: Next token is token FOR (6.4-6: )
Shifting token FOR (6.4-6: )
Entering state 38
Reading a token: Next token is token '(' (6.7: )
Shifting token '(' (6.7: )
Entering state 80
Reading a token: Next token is token IDENTIFIER (6.8: i)
Shifting token IDENTIFIER (6.8: i)
Entering state 71
Reading a token: Next token is token '=' (6.9: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (6.8: i)
-> $$ = nterm primary_expression (6.8: )
Stack now 80 38 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (6.8: )
-> $$ = nterm postfix_expression (6.8: )
Stack now 80 38 52 24 17 14 8 0
Entering state 58
Next token is token '=' (6.9: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (6.8: )
-> $$ = nterm unary_expression (6.8: )
Stack now 80 38 52 24 17 14 8 0
Entering state 57
Next token is token '=' (6.9: )
Shifting token '=' (6.9: )
Entering state 90
Reading a token: Next token is token INT_CONSTANT (6.10: 0)
Shifting token INT_CONSTANT (6.10: 0)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (6.10: 0)
-> $$ = nterm primary_expression (6.10: )
Stack now 90 57 80 38 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (6.10: )
-> $$ = nterm postfix_expression (6.10: )
Stack now 90 57 80 38 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ';' (6.11: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (6.10: )
-> $$ = nterm unary_expression (6.10: )
Stack now 90 57 80 38 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (6.10: )
-> $$ = nterm multiplicative_expression (6.10: )
Stack now 90 57 80 38 52 24 17 14 8 0
Entering state 77
Next token is token ';' (6.11: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (6.10: )
-> $$ = nterm additive_expression (6.10: )
Stack now 90 57 80 38 52 24 17 14 8 0
Entering state 76
Next token is token ';' (6.11: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (6.10: )
-> $$ = nterm relational_expression (6.10: )
Stack now 90 57 80 38 52 24 17 14 8 0
Entering state 75
Next token is token ';' (6.11: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (6.10: )
-> $$ = nterm equality_expression (6.10: )
Stack now 90 57 80 38 52 24 17 14 8 0
Entering state 74
Next token is token ';' (6.11: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (6.10: )
-> $$ = nterm logical_and_expression (6.10: )
Stack now 90 57 80 38 52 24 17 14 8 0
Entering state 73
Next token is token ';' (6.11: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (6.10: )
-> $$ = nterm expression (6.10: )
Stack now 90 57 80 38 52 24 17 14 8 0
Entering state 123
Next token is token ';' (6.11: )
Reducing stack by rule 40 (line 506):
   $1 = nterm unary_expression (6.8: )
   $2 = token '=' (6.9: )
   $3 = nterm expression (6.10: )
-> $$ = nterm assignment_expression (6.8-10: )
Stack now 80 38 52 24 17 14 8 0
Entering state 115
Next token is token ';' (6.11: )
Shifting token ';' (6.11: )
Entering state 144
Reading a token: Next token is token IDENTIFIER (6.13: i)
Shifting token IDENTIFIER (6.13: i)
Entering state 71
Reading a token: Next token is token '<' (6.14: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (6.13: i)
-> $$ = nterm primary_expression (6.13: )
Stack now 144 115 80 38 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (6.13: )
-> $$ = nterm postfix_expression (6.13: )
Stack now 144 115 80 38 52 24 17 14 8 0
Entering state 58
Next token is token '<' (6.14: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (6.13: )
-> $$ = nterm unary_expression (6.13: )
Stack now 144 115 80 38 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (6.13: )
-> $$ = nterm multiplicative_expression (6.13: )
Stack now 144 115 80 38 52 24 17 14 8 0
Entering state 77
Next token is token '<' (6.14: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (6.13: )
-> $$ = nterm additive_expression (6.13: )
Stack now 144 115 80 38 52 24 17 14 8 0
Entering state 76
Next token is token '<' (6.14: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (6.13: )
-> $$ = nterm relational_expression (6.13: )
Stack now 144 115 80 38 52 24 17 14 8 0
Entering state 75
Next token is token '<' (6.14: )
Shifting token '<' (6.14: )
Entering state 106
Reading a token: Next token is token INT_CONSTANT (6.15: 2)
Shifting token INT_CONSTANT (6.15: 2)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (6.15: 2)
-> $$ = nterm primary_expression (6.15: )
Stack now 106 75 144 115 80 38 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (6.15: )
-> $$ = nterm postfix_expression (6.15: )
Stack now 106 75 144 115 80 38 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ';' (6.16: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (6.15: )
-> $$ = nterm unary_expression (6.15: )
Stack now 106 75 144 115 80 38 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (6.15: )
-> $$ = nterm multiplicative_expression (6.15: )
Stack now 106 75 144 115 80 38 52 24 17 14 8 0
Entering state 77
Next token is token ';' (6.16: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (6.15: )
-> $$ = nterm additive_expression (6.15: )
Stack now 106 75 144 115 80 38 52 24 17 14 8 0
Entering state 135
Next token is token ';' (6.16: )
Reducing stack by rule 52 (line 779):
   $1 = nterm relational_expression (6.13: )
   $2 = token '<' (6.14: )
   $3 = nterm additive_expression (6.15: )
-> $$ = nterm relational_expression (6.13-15: )
Stack now 144 115 80 38 52 24 17 14 8 0
Entering state 75
Next token is token ';' (6.16: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (6.13-15: )
-> $$ = nterm equality_expression (6.13-15: )
Stack now 144 115 80 38 52 24 17 14 8 0
Entering state 74
Next token is token ';' (6.16: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (6.13-15: )
-> $$ = nterm logical_and_expression (6.13-15: )
Stack now 144 115 80 38 52 24 17 14 8 0
Entering state 73
Next token is token ';' (6.16: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (6.13-15: )
-> $$ = nterm expression (6.13-15: )
Stack now 144 115 80 38 52 24 17 14 8 0
Entering state 152
Next token is token ';' (6.16: )
Shifting token ';' (6.16: )
Entering state 156
Reading a token: Next token is token IDENTIFIER (6.18: i)
Shifting token IDENTIFIER (6.18: i)
Entering state 71
Reading a token: Next token is token '=' (6.19: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (6.18: i)
-> $$ = nterm primary_expression (6.18: )
Stack now 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (6.18: )
-> $$ = nterm postfix_expression (6.18: )
Stack now 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 58
Next token is token '=' (6.19: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (6.18: )
-> $$ = nterm unary_expression (6.18: )
Stack now 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 57
Next token is token '=' (6.19: )
Shifting token '=' (6.19: )
Entering state 90
Reading a token: Next token is token IDENTIFIER (6.20: i)
Shifting token IDENTIFIER (6.20: i)
Entering state 71
Reading a token: Next token is token '+' (6.21: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (6.20: i)
-> $$ = nterm primary_expression (6.20: )
Stack now 90 57 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (6.20: )
-> $$ = nterm postfix_expression (6.20: )
Stack now 90 57 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 58
Next token is token '+' (6.21: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (6.20: )
-> $$ = nterm unary_expression (6.20: )
Stack now 90 57 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (6.20: )
-> $$ = nterm multiplicative_expression (6.20: )
Stack now 90 57 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 77
Next token is token '+' (6.21: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (6.20: )
-> $$ = nterm additive_expression (6.20: )
Stack now 90 57 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 76
Next token is token '+' (6.21: )
Shifting token '+' (6.21: )
Entering state 110
Reading a token: Next token is token INT_CONSTANT (6.22: 1)
Shifting token INT_CONSTANT (6.22: 1)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (6.22: 1)
-> $$ = nterm primary_expression (6.22: )
Stack now 110 76 90 57 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (6.22: )
-> $$ = nterm postfix_expression (6.22: )
Stack now 110 76 90 57 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ')' (6.23: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (6.22: )
-> $$ = nterm unary_expression (6.22: )
Stack now 110 76 90 57 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (6.22: )
-> $$ = nterm multiplicative_expression (6.22: )
Stack now 110 76 90 57 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 139
Next token is token ')' (6.23: )
Reducing stack by rule 57 (line 954):
   $1 = nterm additive_expression (6.20: )
   $2 = token '+' (6.21: )
   $3 = nterm multiplicative_expression (6.22: )
-> $$ = nterm additive_expression (6.20-22: )
Stack now 90 57 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 76
Next token is token ')' (6.23: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (6.20-22: )
-> $$ = nterm relational_expression (6.20-22: )
Stack now 90 57 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 75
Next token is token ')' (6.23: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (6.20-22: )
-> $$ = nterm equality_expression (6.20-22: )
Stack now 90 57 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 74
Next token is token ')' (6.23: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (6.20-22: )
-> $$ = nterm logical_and_expression (6.20-22: )
Stack now 90 57 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 73
Next token is token ')' (6.23: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (6.20-22: )
-> $$ = nterm expression (6.20-22: )
Stack now 90 57 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 123
Next token is token ')' (6.23: )
Reducing stack by rule 40 (line 506):
   $1 = nterm unary_expression (6.18: )
   $2 = token '=' (6.19: )
   $3 = nterm expression (6.20-22: )
-> $$ = nterm assignment_expression (6.18-22: )
Stack now 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 158
Next token is token ')' (6.23: )
Shifting token ')' (6.23: )
Entering state 160
Reading a token: Next token is token '{' (6.25: )
Shifting token '{' (6.25: )
Entering state 45
Reading a token: Next token is token FOR (7.7-9: )
Shifting token FOR (7.7-9: )
Entering state 38
Reading a token: Next token is token '(' (7.10: )
Shifting token '(' (7.10: )
Entering state 80
Reading a token: Next token is token IDENTIFIER (7.11: j)
Shifting token IDENTIFIER (7.11: j)
Entering state 71
Reading a token: Next token is token '=' (7.12: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (7.11: j)
-> $$ = nterm primary_expression (7.11: )
Stack now 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (7.11: )
-> $$ = nterm postfix_expression (7.11: )
Stack now 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 58
Next token is token '=' (7.12: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (7.11: )
-> $$ = nterm unary_expression (7.11: )
Stack now 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 57
Next token is token '=' (7.12: )
Shifting token '=' (7.12: )
Entering state 90
Reading a token: Next token is token INT_CONSTANT (7.13: 0)
Shifting token INT_CONSTANT (7.13: 0)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (7.13: 0)
-> $$ = nterm primary_expression (7.13: )
Stack now 90 57 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (7.13: )
-> $$ = nterm postfix_expression (7.13: )
Stack now 90 57 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ';' (7.14: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (7.13: )
-> $$ = nterm unary_expression (7.13: )
Stack now 90 57 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (7.13: )
-> $$ = nterm multiplicative_expression (7.13: )
Stack now 90 57 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 77
Next token is token ';' (7.14: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (7.13: )
-> $$ = nterm additive_expression (7.13: )
Stack now 90 57 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 76
Next token is token ';' (7.14: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (7.13: )
-> $$ = nterm relational_expression (7.13: )
Stack now 90 57 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 75
Next token is token ';' (7.14: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (7.13: )
-> $$ = nterm equality_expression (7.13: )
Stack now 90 57 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 74
Next token is token ';' (7.14: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (7.13: )
-> $$ = nterm logical_and_expression (7.13: )
Stack now 90 57 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 73
Next token is token ';' (7.14: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (7.13: )
-> $$ = nterm expression (7.13: )
Stack now 90 57 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 123
Next token is token ';' (7.14: )
Reducing stack by rule 40 (line 506):
   $1 = nterm unary_expression (7.11: )
   $2 = token '=' (7.12: )
   $3 = nterm expression (7.13: )
-> $$ = nterm assignment_expression (7.11-13: )
Stack now 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 115
Next token is token ';' (7.14: )
Shifting token ';' (7.14: )
Entering state 144
Reading a token: Next token is token IDENTIFIER (7.15: j)
Shifting token IDENTIFIER (7.15: j)
Entering state 71
Reading a token: Next token is token '<' (7.16: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (7.15: j)
-> $$ = nterm primary_expression (7.15: )
Stack now 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (7.15: )
-> $$ = nterm postfix_expression (7.15: )
Stack now 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 58
Next token is token '<' (7.16: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (7.15: )
-> $$ = nterm unary_expression (7.15: )
Stack now 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (7.15: )
-> $$ = nterm multiplicative_expression (7.15: )
Stack now 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 77
Next token is token '<' (7.16: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (7.15: )
-> $$ = nterm additive_expression (7.15: )
Stack now 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 76
Next token is token '<' (7.16: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (7.15: )
-> $$ = nterm relational_expression (7.15: )
Stack now 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 75
Next token is token '<' (7.16: )
Shifting token '<' (7.16: )
Entering state 106
Reading a token: Next token is token INT_CONSTANT (7.17: 3)
Shifting token INT_CONSTANT (7.17: 3)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (7.17: 3)
-> $$ = nterm primary_expression (7.17: )
Stack now 106 75 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (7.17: )
-> $$ = nterm postfix_expression (7.17: )
Stack now 106 75 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ';' (7.18: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (7.17: )
-> $$ = nterm unary_expression (7.17: )
Stack now 106 75 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (7.17: )
-> $$ = nterm multiplicative_expression (7.17: )
Stack now 106 75 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 77
Next token is token ';' (7.18: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (7.17: )
-> $$ = nterm additive_expression (7.17: )
Stack now 106 75 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 135
Next token is token ';' (7.18: )
Reducing stack by rule 52 (line 779):
   $1 = nterm relational_expression (7.15: )
   $2 = token '<' (7.16: )
   $3 = nterm additive_expression (7.17: )
-> $$ = nterm relational_expression (7.15-17: )
Stack now 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 75
Next token is token ';' (7.18: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (7.15-17: )
-> $$ = nterm equality_expression (7.15-17: )
Stack now 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 74
Next token is token ';' (7.18: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (7.15-17: )
-> $$ = nterm logical_and_expression (7.15-17: )
Stack now 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 73
Next token is token ';' (7.18: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (7.15-17: )
-> $$ = nterm expression (7.15-17: )
Stack now 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 152
Next token is token ';' (7.18: )
Shifting token ';' (7.18: )
Entering state 156
Reading a token: Next token is token IDENTIFIER (7.19: j)
Shifting token IDENTIFIER (7.19: j)
Entering state 71
Reading a token: Next token is token '=' (7.20: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (7.19: j)
-> $$ = nterm primary_expression (7.19: )
Stack now 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (7.19: )
-> $$ = nterm postfix_expression (7.19: )
Stack now 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 58
Next token is token '=' (7.20: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (7.19: )
-> $$ = nterm unary_expression (7.19: )
Stack now 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 57
Next token is token '=' (7.20: )
Shifting token '=' (7.20: )
Entering state 90
Reading a token: Next token is token IDENTIFIER (7.21: j)
Shifting token IDENTIFIER (7.21: j)
Entering state 71
Reading a token: Next token is token '+' (7.22: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (7.21: j)
-> $$ = nterm primary_expression (7.21: )
Stack now 90 57 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (7.21: )
-> $$ = nterm postfix_expression (7.21: )
Stack now 90 57 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 58
Next token is token '+' (7.22: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (7.21: )
-> $$ = nterm unary_expression (7.21: )
Stack now 90 57 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (7.21: )
-> $$ = nterm multiplicative_expression (7.21: )
Stack now 90 57 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 77
Next token is token '+' (7.22: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (7.21: )
-> $$ = nterm additive_expression (7.21: )
Stack now 90 57 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 76
Next token is token '+' (7.22: )
Shifting token '+' (7.22: )
Entering state 110
Reading a token: Next token is token INT_CONSTANT (7.23: 1)
Shifting token INT_CONSTANT (7.23: 1)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (7.23: 1)
-> $$ = nterm primary_expression (7.23: )
Stack now 110 76 90 57 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (7.23: )
-> $$ = nterm postfix_expression (7.23: )
Stack now 110 76 90 57 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ')' (7.24: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (7.23: )
-> $$ = nterm unary_expression (7.23: )
Stack now 110 76 90 57 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (7.23: )
-> $$ = nterm multiplicative_expression (7.23: )
Stack now 110 76 90 57 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 139
Next token is token ')' (7.24: )
Reducing stack by rule 57 (line 954):
   $1 = nterm additive_expression (7.21: )
   $2 = token '+' (7.22: )
   $3 = nterm multiplicative_expression (7.23: )
-> $$ = nterm additive_expression (7.21-23: )
Stack now 90 57 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 76
Next token is token ')' (7.24: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (7.21-23: )
-> $$ = nterm relational_expression (7.21-23: )
Stack now 90 57 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 75
Next token is token ')' (7.24: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (7.21-23: )
-> $$ = nterm equality_expression (7.21-23: )
Stack now 90 57 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 74
Next token is token ')' (7.24: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (7.21-23: )
-> $$ = nterm logical_and_expression (7.21-23: )
Stack now 90 57 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 73
Next token is token ')' (7.24: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (7.21-23: )
-> $$ = nterm expression (7.21-23: )
Stack now 90 57 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 123
Next token is token ')' (7.24: )
Reducing stack by rule 40 (line 506):
   $1 = nterm unary_expression (7.19: )
   $2 = token '=' (7.20: )
   $3 = nterm expression (7.21-23: )
-> $$ = nterm assignment_expression (7.19-23: )
Stack now 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 158
Next token is token ')' (7.24: )
Shifting token ')' (7.24: )
Entering state 160
Reading a token: Next token is token '{' (7.26: )
Shifting token '{' (7.26: )
Entering state 45
Reading a token: Next token is token IDENTIFIER (8.10-15: printf)
Shifting token IDENTIFIER (8.10-15: printf)
Entering state 40
Reading a token: Next token is token '(' (8.16: )
Shifting token '(' (8.16: )
Entering state 82
Reading a token: Next token is token STRING_LITERAL (8.17-47: "Enter value for disp[%d][%d]:")
Shifting token STRING_LITERAL (8.17-47: "Enter value for disp[%d][%d]:")
Entering state 43
Reducing stack by rule 74 (line 1382):
   $1 = token STRING_LITERAL (8.17-47: "Enter value for disp[%d][%d]:")
-> $$ = nterm primary_expression (8.17-47: )
Stack now 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (8.17-47: )
-> $$ = nterm postfix_expression (8.17-47: )
Stack now 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ',' (8.48: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (8.17-47: )
-> $$ = nterm unary_expression (8.17-47: )
Stack now 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (8.17-47: )
-> $$ = nterm multiplicative_expression (8.17-47: )
Stack now 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 77
Next token is token ',' (8.48: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (8.17-47: )
-> $$ = nterm additive_expression (8.17-47: )
Stack now 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 76
Next token is token ',' (8.48: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (8.17-47: )
-> $$ = nterm relational_expression (8.17-47: )
Stack now 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 75
Next token is token ',' (8.48: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (8.17-47: )
-> $$ = nterm equality_expression (8.17-47: )
Stack now 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 74
Next token is token ',' (8.48: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (8.17-47: )
-> $$ = nterm logical_and_expression (8.17-47: )
Stack now 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 73
Next token is token ',' (8.48: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (8.17-47: )
-> $$ = nterm expression (8.17-47: )
Stack now 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 118
Next token is token ',' (8.48: )
Reducing stack by rule 76 (line 1393):
   $1 = nterm expression (8.17-47: )
-> $$ = nterm expression_list (8.17-47: )
Stack now 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 119
Next token is token ',' (8.48: )
Shifting token ',' (8.48: )
Entering state 148
Reading a token: Next token is token IDENTIFIER (8.50: i)
Shifting token IDENTIFIER (8.50: i)
Entering state 71
Reading a token: Next token is token ',' (8.51: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (8.50: i)
-> $$ = nterm primary_expression (8.50: )
Stack now 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (8.50: )
-> $$ = nterm postfix_expression (8.50: )
Stack now 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 58
Next token is token ',' (8.51: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (8.50: )
-> $$ = nterm unary_expression (8.50: )
Stack now 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (8.50: )
-> $$ = nterm multiplicative_expression (8.50: )
Stack now 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 77
Next token is token ',' (8.51: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (8.50: )
-> $$ = nterm additive_expression (8.50: )
Stack now 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 76
Next token is token ',' (8.51: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (8.50: )
-> $$ = nterm relational_expression (8.50: )
Stack now 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 75
Next token is token ',' (8.51: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (8.50: )
-> $$ = nterm equality_expression (8.50: )
Stack now 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 74
Next token is token ',' (8.51: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (8.50: )
-> $$ = nterm logical_and_expression (8.50: )
Stack now 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 73
Next token is token ',' (8.51: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (8.50: )
-> $$ = nterm expression (8.50: )
Stack now 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 155
Next token is token ',' (8.51: )
Reducing stack by rule 77 (line 1397):
   $1 = nterm expression_list (8.17-47: )
   $2 = token ',' (8.48: )
   $3 = nterm expression (8.50: )
-> $$ = nterm expression_list (8.17-50: )
Stack now 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 119
Next token is token ',' (8.51: )
Shifting token ',' (8.51: )
Entering state 148
Reading a token: Next token is token IDENTIFIER (8.53: j)
Shifting token IDENTIFIER (8.53: j)
Entering state 71
Reading a token: Next token is token ')' (8.54: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (8.53: j)
-> $$ = nterm primary_expression (8.53: )
Stack now 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (8.53: )
-> $$ = nterm postfix_expression (8.53: )
Stack now 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 58
Next token is token ')' (8.54: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (8.53: )
-> $$ = nterm unary_expression (8.53: )
Stack now 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (8.53: )
-> $$ = nterm multiplicative_expression (8.53: )
Stack now 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 77
Next token is token ')' (8.54: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (8.53: )
-> $$ = nterm additive_expression (8.53: )
Stack now 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 76
Next token is token ')' (8.54: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (8.53: )
-> $$ = nterm relational_expression (8.53: )
Stack now 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 75
Next token is token ')' (8.54: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (8.53: )
-> $$ = nterm equality_expression (8.53: )
Stack now 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 74
Next token is token ')' (8.54: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (8.53: )
-> $$ = nterm logical_and_expression (8.53: )
Stack now 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 73
Next token is token ')' (8.54: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (8.53: )
-> $$ = nterm expression (8.53: )
Stack now 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 155
Next token is token ')' (8.54: )
Reducing stack by rule 77 (line 1397):
   $1 = nterm expression_list (8.17-50: )
   $2 = token ',' (8.51: )
   $3 = nterm expression (8.53: )
-> $$ = nterm expression_list (8.17-53: )
Stack now 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 119
Next token is token ')' (8.54: )
Shifting token ')' (8.54: )
Entering state 147
Reading a token: Next token is token ';' (8.55: )
Shifting token ';' (8.55: )
Entering state 154
Reducing stack by rule 43 (line 594):
   $1 = token IDENTIFIER (8.10-15: printf)
   $2 = token '(' (8.16: )
   $3 = nterm expression_list (8.17-53: )
   $4 = token ')' (8.54: )
   $5 = token ';' (8.55: )
-> $$ = nterm procedure_call (8.10-55: )
Stack now 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 61
Reducing stack by rule 38 (line 474):
   $1 = nterm procedure_call (8.10-55: )
-> $$ = nterm statement (8.10-55: )
Stack now 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 53
Reducing stack by rule 31 (line 444):
   $1 = nterm statement (8.10-55: )
-> $$ = nterm statement_list (8.10-55: )
Stack now 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 84
Reading a token: Next token is token IDENTIFIER (9.10-14: scanf)
Shifting token IDENTIFIER (9.10-14: scanf)
Entering state 40
Reading a token: Next token is token '(' (9.15: )
Shifting token '(' (9.15: )
Entering state 82
Reading a token: Next token is token STRING_LITERAL (9.16-19: "%d")
Shifting token STRING_LITERAL (9.16-19: "%d")
Entering state 43
Reducing stack by rule 74 (line 1382):
   $1 = token STRING_LITERAL (9.16-19: "%d")
-> $$ = nterm primary_expression (9.16-19: )
Stack now 82 40 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (9.16-19: )
-> $$ = nterm postfix_expression (9.16-19: )
Stack now 82 40 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ',' (9.20: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (9.16-19: )
-> $$ = nterm unary_expression (9.16-19: )
Stack now 82 40 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (9.16-19: )
-> $$ = nterm multiplicative_expression (9.16-19: )
Stack now 82 40 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 77
Next token is token ',' (9.20: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (9.16-19: )
-> $$ = nterm additive_expression (9.16-19: )
Stack now 82 40 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 76
Next token is token ',' (9.20: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (9.16-19: )
-> $$ = nterm relational_expression (9.16-19: )
Stack now 82 40 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 75
Next token is token ',' (9.20: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (9.16-19: )
-> $$ = nterm equality_expression (9.16-19: )
Stack now 82 40 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 74
Next token is token ',' (9.20: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (9.16-19: )
-> $$ = nterm logical_and_expression (9.16-19: )
Stack now 82 40 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 73
Next token is token ',' (9.20: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (9.16-19: )
-> $$ = nterm expression (9.16-19: )
Stack now 82 40 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 118
Next token is token ',' (9.20: )
Reducing stack by rule 76 (line 1393):
   $1 = nterm expression (9.16-19: )
-> $$ = nterm expression_list (9.16-19: )
Stack now 82 40 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 119
Next token is token ',' (9.20: )
Shifting token ',' (9.20: )
Entering state 148
Reading a token: Next token is token '&' (9.22: )
Shifting token '&' (9.22: )
Entering state 51
Reducing stack by rule 80 (line 1410):
   $1 = token '&' (9.22: )
-> $$ = nterm unary_operator (9.22: )
Stack now 148 119 82 40 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 60
Reading a token: Next token is token IDENTIFIER (9.23-26: disp)
Shifting token IDENTIFIER (9.23-26: disp)
Entering state 71
Reading a token: Next token is token '[' (9.27: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (9.23-26: disp)
-> $$ = nterm primary_expression (9.23-26: )
Stack now 60 148 119 82 40 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (9.23-26: )
-> $$ = nterm postfix_expression (9.23-26: )
Stack now 60 148 119 82 40 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 58
Next token is token '[' (9.27: )
Shifting token '[' (9.27: )
Entering state 91
Reading a token: Next token is token IDENTIFIER (9.28: i)
Shifting token IDENTIFIER (9.28: i)
Entering state 71
Reading a token: Next token is token ']' (9.29: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (9.28: i)
-> $$ = nterm primary_expression (9.28: )
Stack now 91 58 60 148 119 82 40 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (9.28: )
-> $$ = nterm postfix_expression (9.28: )
Stack now 91 58 60 148 119 82 40 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 58
Next token is token ']' (9.29: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (9.28: )
-> $$ = nterm unary_expression (9.28: )
Stack now 91 58 60 148 119 82 40 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (9.28: )
-> $$ = nterm multiplicative_expression (9.28: )
Stack now 91 58 60 148 119 82 40 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 77
Next token is token ']' (9.29: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (9.28: )
-> $$ = nterm additive_expression (9.28: )
Stack now 91 58 60 148 119 82 40 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 76
Next token is token ']' (9.29: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (9.28: )
-> $$ = nterm relational_expression (9.28: )
Stack now 91 58 60 148 119 82 40 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 75
Next token is token ']' (9.29: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (9.28: )
-> $$ = nterm equality_expression (9.28: )
Stack now 91 58 60 148 119 82 40 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 74
Next token is token ']' (9.29: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (9.28: )
-> $$ = nterm logical_and_expression (9.28: )
Stack now 91 58 60 148 119 82 40 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 73
Next token is token ']' (9.29: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (9.28: )
-> $$ = nterm expression (9.28: )
Stack now 91 58 60 148 119 82 40 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 124
Next token is token ']' (9.29: )
Shifting token ']' (9.29: )
Entering state 149
Reducing stack by rule 65 (line 1197):
   $1 = nterm postfix_expression (9.23-26: )
   $2 = token '[' (9.27: )
   $3 = nterm expression (9.28: )
   $4 = token ']' (9.29: )
-> $$ = nterm postfix_expression (9.23-29: )
Stack now 60 148 119 82 40 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token '[' (9.30: )
Shifting token '[' (9.30: )
Entering state 91
Reading a token: Next token is token IDENTIFIER (9.31: j)
Shifting token IDENTIFIER (9.31: j)
Entering state 71
Reading a token: Next token is token ']' (9.32: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (9.31: j)
-> $$ = nterm primary_expression (9.31: )
Stack now 91 58 60 148 119 82 40 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (9.31: )
-> $$ = nterm postfix_expression (9.31: )
Stack now 91 58 60 148 119 82 40 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 58
Next token is token ']' (9.32: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (9.31: )
-> $$ = nterm unary_expression (9.31: )
Stack now 91 58 60 148 119 82 40 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (9.31: )
-> $$ = nterm multiplicative_expression (9.31: )
Stack now 91 58 60 148 119 82 40 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 77
Next token is token ']' (9.32: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (9.31: )
-> $$ = nterm additive_expression (9.31: )
Stack now 91 58 60 148 119 82 40 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 76
Next token is token ']' (9.32: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (9.31: )
-> $$ = nterm relational_expression (9.31: )
Stack now 91 58 60 148 119 82 40 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 75
Next token is token ']' (9.32: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (9.31: )
-> $$ = nterm equality_expression (9.31: )
Stack now 91 58 60 148 119 82 40 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 74
Next token is token ']' (9.32: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (9.31: )
-> $$ = nterm logical_and_expression (9.31: )
Stack now 91 58 60 148 119 82 40 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 73
Next token is token ']' (9.32: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (9.31: )
-> $$ = nterm expression (9.31: )
Stack now 91 58 60 148 119 82 40 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 124
Next token is token ']' (9.32: )
Shifting token ']' (9.32: )
Entering state 149
Reducing stack by rule 65 (line 1197):
   $1 = nterm postfix_expression (9.23-29: )
   $2 = token '[' (9.30: )
   $3 = nterm expression (9.31: )
   $4 = token ']' (9.32: )
-> $$ = nterm postfix_expression (9.23-32: )
Stack now 60 148 119 82 40 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ')' (9.33: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (9.23-32: )
-> $$ = nterm unary_expression (9.23-32: )
Stack now 60 148 119 82 40 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 95
Reducing stack by rule 60 (line 1063):
   $1 = nterm unary_operator (9.22: )
   $2 = nterm unary_expression (9.23-32: )
-> $$ = nterm unary_expression (9.22-32: )
Stack now 148 119 82 40 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (9.22-32: )
-> $$ = nterm multiplicative_expression (9.22-32: )
Stack now 148 119 82 40 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 77
Next token is token ')' (9.33: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (9.22-32: )
-> $$ = nterm additive_expression (9.22-32: )
Stack now 148 119 82 40 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 76
Next token is token ')' (9.33: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (9.22-32: )
-> $$ = nterm relational_expression (9.22-32: )
Stack now 148 119 82 40 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 75
Next token is token ')' (9.33: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (9.22-32: )
-> $$ = nterm equality_expression (9.22-32: )
Stack now 148 119 82 40 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 74
Next token is token ')' (9.33: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (9.22-32: )
-> $$ = nterm logical_and_expression (9.22-32: )
Stack now 148 119 82 40 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 73
Next token is token ')' (9.33: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (9.22-32: )
-> $$ = nterm expression (9.22-32: )
Stack now 148 119 82 40 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 155
Next token is token ')' (9.33: )
Reducing stack by rule 77 (line 1397):
   $1 = nterm expression_list (9.16-19: )
   $2 = token ',' (9.20: )
   $3 = nterm expression (9.22-32: )
-> $$ = nterm expression_list (9.16-32: )
Stack now 82 40 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 119
Next token is token ')' (9.33: )
Shifting token ')' (9.33: )
Entering state 147
Reading a token: Next token is token ';' (9.34: )
Shifting token ';' (9.34: )
Entering state 154
Reducing stack by rule 43 (line 594):
   $1 = token IDENTIFIER (9.10-14: scanf)
   $2 = token '(' (9.15: )
   $3 = nterm expression_list (9.16-32: )
   $4 = token ')' (9.33: )
   $5 = token ';' (9.34: )
-> $$ = nterm procedure_call (9.10-34: )
Stack now 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 61
Reducing stack by rule 38 (line 474):
   $1 = nterm procedure_call (9.10-34: )
-> $$ = nterm statement (9.10-34: )
Stack now 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 88
Reducing stack by rule 32 (line 449):
   $1 = nterm statement_list (8.10-55: )
   $2 = nterm statement (9.10-34: )
-> $$ = nterm statement_list (8.10-9.34: )
Stack now 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 84
Reading a token: Next token is token '}' (10.7: )
Shifting token '}' (10.7: )
Entering state 121
Reducing stack by rule 34 (line 460):
   $1 = token '{' (7.26: )
   $2 = nterm statement_list (8.10-9.34: )
   $3 = token '}' (10.7: )
-> $$ = nterm statement (7.26-10.7: )
Stack now 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 161
Reducing stack by rule 84 (line 1432):
   $1 = token FOR (7.7-9: )
   $2 = token '(' (7.10: )
   $3 = nterm assignment_expression (7.11-13: )
   $4 = token ';' (7.14: )
   $5 = nterm expression (7.15-17: )
   $6 = token ';' (7.18: )
   $7 = nterm assignment_expression (7.19-23: )
   $8 = token ')' (7.24: )
   $9 = nterm statement (7.26-10.7: )
-> $$ = nterm iteration_statement (7.7-10.7: )
Stack now 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 63
Reducing stack by rule 36 (line 466):
   $1 = nterm iteration_statement (7.7-10.7: )
-> $$ = nterm statement (7.7-10.7: )
Stack now 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 53
Reducing stack by rule 31 (line 444):
   $1 = nterm statement (7.7-10.7: )
-> $$ = nterm statement_list (7.7-10.7: )
Stack now 45 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 84
Reading a token: Next token is token '}' (11.4: )
Shifting token '}' (11.4: )
Entering state 121
Reducing stack by rule 34 (line 460):
   $1 = token '{' (6.25: )
   $2 = nterm statement_list (7.7-10.7: )
   $3 = token '}' (11.4: )
-> $$ = nterm statement (6.25-11.4: )
Stack now 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 161
Reducing stack by rule 84 (line 1432):
   $1 = token FOR (6.4-6: )
   $2 = token '(' (6.7: )
   $3 = nterm assignment_expression (6.8-10: )
   $4 = token ';' (6.11: )
   $5 = nterm expression (6.13-15: )
   $6 = token ';' (6.16: )
   $7 = nterm assignment_expression (6.18-22: )
   $8 = token ')' (6.23: )
   $9 = nterm statement (6.25-11.4: )
-> $$ = nterm iteration_statement (6.4-11.4: )
Stack now 52 24 17 14 8 0
Entering state 63
Reducing stack by rule 36 (line 466):
   $1 = nterm iteration_statement (6.4-11.4: )
-> $$ = nterm statement (6.4-11.4: )
Stack now 52 24 17 14 8 0
Entering state 53
Reducing stack by rule 31 (line 444):
   $1 = nterm statement (6.4-11.4: )
-> $$ = nterm statement_list (6.4-11.4: )
Stack now 52 24 17 14 8 0
Entering state 86
Reading a token: Next token is token IDENTIFIER (13.4-9: printf)
Shifting token IDENTIFIER (13.4-9: printf)
Entering state 40
Reading a token: Next token is token '(' (13.10: )
Shifting token '(' (13.10: )
Entering state 82
Reading a token: Next token is token STRING_LITERAL (13.11-45: "Two Dimensional array elements:\n")
Shifting token STRING_LITERAL (13.11-45: "Two Dimensional array elements:\n")
Entering state 43
Reducing stack by rule 74 (line 1382):
   $1 = token STRING_LITERAL (13.11-45: "Two Dimensional array elements:\n")
-> $$ = nterm primary_expression (13.11-45: )
Stack now 82 40 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (13.11-45: )
-> $$ = nterm postfix_expression (13.11-45: )
Stack now 82 40 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ')' (13.46: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (13.11-45: )
-> $$ = nterm unary_expression (13.11-45: )
Stack now 82 40 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (13.11-45: )
-> $$ = nterm multiplicative_expression (13.11-45: )
Stack now 82 40 86 52 24 17 14 8 0
Entering state 77
Next token is token ')' (13.46: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (13.11-45: )
-> $$ = nterm additive_expression (13.11-45: )
Stack now 82 40 86 52 24 17 14 8 0
Entering state 76
Next token is token ')' (13.46: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (13.11-45: )
-> $$ = nterm relational_expression (13.11-45: )
Stack now 82 40 86 52 24 17 14 8 0
Entering state 75
Next token is token ')' (13.46: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (13.11-45: )
-> $$ = nterm equality_expression (13.11-45: )
Stack now 82 40 86 52 24 17 14 8 0
Entering state 74
Next token is token ')' (13.46: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (13.11-45: )
-> $$ = nterm logical_and_expression (13.11-45: )
Stack now 82 40 86 52 24 17 14 8 0
Entering state 73
Next token is token ')' (13.46: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (13.11-45: )
-> $$ = nterm expression (13.11-45: )
Stack now 82 40 86 52 24 17 14 8 0
Entering state 118
Next token is token ')' (13.46: )
Reducing stack by rule 76 (line 1393):
   $1 = nterm expression (13.11-45: )
-> $$ = nterm expression_list (13.11-45: )
Stack now 82 40 86 52 24 17 14 8 0
Entering state 119
Next token is token ')' (13.46: )
Shifting token ')' (13.46: )
Entering state 147
Reading a token: Next token is token ';' (13.47: )
Shifting token ';' (13.47: )
Entering state 154
Reducing stack by rule 43 (line 594):
   $1 = token IDENTIFIER (13.4-9: printf)
   $2 = token '(' (13.10: )
   $3 = nterm expression_list (13.11-45: )
   $4 = token ')' (13.46: )
   $5 = token ';' (13.47: )
-> $$ = nterm procedure_call (13.4-47: )
Stack now 86 52 24 17 14 8 0
Entering state 61
Reducing stack by rule 38 (line 474):
   $1 = nterm procedure_call (13.4-47: )
-> $$ = nterm statement (13.4-47: )
Stack now 86 52 24 17 14 8 0
Entering state 88
Reducing stack by rule 32 (line 449):
   $1 = nterm statement_list (6.4-11.4: )
   $2 = nterm statement (13.4-47: )
-> $$ = nterm statement_list (6.4-13.47: )
Stack now 52 24 17 14 8 0
Entering state 86
Reading a token: Next token is token FOR (14.4-6: )
Shifting token FOR (14.4-6: )
Entering state 38
Reading a token: Next token is token '(' (14.7: )
Shifting token '(' (14.7: )
Entering state 80
Reading a token: Next token is token IDENTIFIER (14.8: i)
Shifting token IDENTIFIER (14.8: i)
Entering state 71
Reading a token: Next token is token '=' (14.9: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (14.8: i)
-> $$ = nterm primary_expression (14.8: )
Stack now 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (14.8: )
-> $$ = nterm postfix_expression (14.8: )
Stack now 80 38 86 52 24 17 14 8 0
Entering state 58
Next token is token '=' (14.9: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (14.8: )
-> $$ = nterm unary_expression (14.8: )
Stack now 80 38 86 52 24 17 14 8 0
Entering state 57
Next token is token '=' (14.9: )
Shifting token '=' (14.9: )
Entering state 90
Reading a token: Next token is token INT_CONSTANT (14.10: 0)
Shifting token INT_CONSTANT (14.10: 0)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (14.10: 0)
-> $$ = nterm primary_expression (14.10: )
Stack now 90 57 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (14.10: )
-> $$ = nterm postfix_expression (14.10: )
Stack now 90 57 80 38 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ';' (14.11: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (14.10: )
-> $$ = nterm unary_expression (14.10: )
Stack now 90 57 80 38 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (14.10: )
-> $$ = nterm multiplicative_expression (14.10: )
Stack now 90 57 80 38 86 52 24 17 14 8 0
Entering state 77
Next token is token ';' (14.11: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (14.10: )
-> $$ = nterm additive_expression (14.10: )
Stack now 90 57 80 38 86 52 24 17 14 8 0
Entering state 76
Next token is token ';' (14.11: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (14.10: )
-> $$ = nterm relational_expression (14.10: )
Stack now 90 57 80 38 86 52 24 17 14 8 0
Entering state 75
Next token is token ';' (14.11: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (14.10: )
-> $$ = nterm equality_expression (14.10: )
Stack now 90 57 80 38 86 52 24 17 14 8 0
Entering state 74
Next token is token ';' (14.11: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (14.10: )
-> $$ = nterm logical_and_expression (14.10: )
Stack now 90 57 80 38 86 52 24 17 14 8 0
Entering state 73
Next token is token ';' (14.11: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (14.10: )
-> $$ = nterm expression (14.10: )
Stack now 90 57 80 38 86 52 24 17 14 8 0
Entering state 123
Next token is token ';' (14.11: )
Reducing stack by rule 40 (line 506):
   $1 = nterm unary_expression (14.8: )
   $2 = token '=' (14.9: )
   $3 = nterm expression (14.10: )
-> $$ = nterm assignment_expression (14.8-10: )
Stack now 80 38 86 52 24 17 14 8 0
Entering state 115
Next token is token ';' (14.11: )
Shifting token ';' (14.11: )
Entering state 144
Reading a token: Next token is token IDENTIFIER (14.13: i)
Shifting token IDENTIFIER (14.13: i)
Entering state 71
Reading a token: Next token is token '<' (14.14: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (14.13: i)
-> $$ = nterm primary_expression (14.13: )
Stack now 144 115 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (14.13: )
-> $$ = nterm postfix_expression (14.13: )
Stack now 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Next token is token '<' (14.14: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (14.13: )
-> $$ = nterm unary_expression (14.13: )
Stack now 144 115 80 38 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (14.13: )
-> $$ = nterm multiplicative_expression (14.13: )
Stack now 144 115 80 38 86 52 24 17 14 8 0
Entering state 77
Next token is token '<' (14.14: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (14.13: )
-> $$ = nterm additive_expression (14.13: )
Stack now 144 115 80 38 86 52 24 17 14 8 0
Entering state 76
Next token is token '<' (14.14: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (14.13: )
-> $$ = nterm relational_expression (14.13: )
Stack now 144 115 80 38 86 52 24 17 14 8 0
Entering state 75
Next token is token '<' (14.14: )
Shifting token '<' (14.14: )
Entering state 106
Reading a token: Next token is token INT_CONSTANT (14.15: 2)
Shifting token INT_CONSTANT (14.15: 2)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (14.15: 2)
-> $$ = nterm primary_expression (14.15: )
Stack now 106 75 144 115 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (14.15: )
-> $$ = nterm postfix_expression (14.15: )
Stack now 106 75 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ';' (14.16: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (14.15: )
-> $$ = nterm unary_expression (14.15: )
Stack now 106 75 144 115 80 38 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (14.15: )
-> $$ = nterm multiplicative_expression (14.15: )
Stack now 106 75 144 115 80 38 86 52 24 17 14 8 0
Entering state 77
Next token is token ';' (14.16: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (14.15: )
-> $$ = nterm additive_expression (14.15: )
Stack now 106 75 144 115 80 38 86 52 24 17 14 8 0
Entering state 135
Next token is token ';' (14.16: )
Reducing stack by rule 52 (line 779):
   $1 = nterm relational_expression (14.13: )
   $2 = token '<' (14.14: )
   $3 = nterm additive_expression (14.15: )
-> $$ = nterm relational_expression (14.13-15: )
Stack now 144 115 80 38 86 52 24 17 14 8 0
Entering state 75
Next token is token ';' (14.16: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (14.13-15: )
-> $$ = nterm equality_expression (14.13-15: )
Stack now 144 115 80 38 86 52 24 17 14 8 0
Entering state 74
Next token is token ';' (14.16: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (14.13-15: )
-> $$ = nterm logical_and_expression (14.13-15: )
Stack now 144 115 80 38 86 52 24 17 14 8 0
Entering state 73
Next token is token ';' (14.16: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (14.13-15: )
-> $$ = nterm expression (14.13-15: )
Stack now 144 115 80 38 86 52 24 17 14 8 0
Entering state 152
Next token is token ';' (14.16: )
Shifting token ';' (14.16: )
Entering state 156
Reading a token: Next token is token IDENTIFIER (14.18: i)
Shifting token IDENTIFIER (14.18: i)
Entering state 71
Reading a token: Next token is token '=' (14.19: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (14.18: i)
-> $$ = nterm primary_expression (14.18: )
Stack now 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (14.18: )
-> $$ = nterm postfix_expression (14.18: )
Stack now 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Next token is token '=' (14.19: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (14.18: )
-> $$ = nterm unary_expression (14.18: )
Stack now 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 57
Next token is token '=' (14.19: )
Shifting token '=' (14.19: )
Entering state 90
Reading a token: Next token is token IDENTIFIER (14.20: i)
Shifting token IDENTIFIER (14.20: i)
Entering state 71
Reading a token: Next token is token '+' (14.21: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (14.20: i)
-> $$ = nterm primary_expression (14.20: )
Stack now 90 57 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (14.20: )
-> $$ = nterm postfix_expression (14.20: )
Stack now 90 57 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Next token is token '+' (14.21: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (14.20: )
-> $$ = nterm unary_expression (14.20: )
Stack now 90 57 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (14.20: )
-> $$ = nterm multiplicative_expression (14.20: )
Stack now 90 57 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 77
Next token is token '+' (14.21: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (14.20: )
-> $$ = nterm additive_expression (14.20: )
Stack now 90 57 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 76
Next token is token '+' (14.21: )
Shifting token '+' (14.21: )
Entering state 110
Reading a token: Next token is token INT_CONSTANT (14.22: 1)
Shifting token INT_CONSTANT (14.22: 1)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (14.22: 1)
-> $$ = nterm primary_expression (14.22: )
Stack now 110 76 90 57 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (14.22: )
-> $$ = nterm postfix_expression (14.22: )
Stack now 110 76 90 57 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ')' (14.23: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (14.22: )
-> $$ = nterm unary_expression (14.22: )
Stack now 110 76 90 57 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (14.22: )
-> $$ = nterm multiplicative_expression (14.22: )
Stack now 110 76 90 57 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 139
Next token is token ')' (14.23: )
Reducing stack by rule 57 (line 954):
   $1 = nterm additive_expression (14.20: )
   $2 = token '+' (14.21: )
   $3 = nterm multiplicative_expression (14.22: )
-> $$ = nterm additive_expression (14.20-22: )
Stack now 90 57 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 76
Next token is token ')' (14.23: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (14.20-22: )
-> $$ = nterm relational_expression (14.20-22: )
Stack now 90 57 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 75
Next token is token ')' (14.23: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (14.20-22: )
-> $$ = nterm equality_expression (14.20-22: )
Stack now 90 57 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 74
Next token is token ')' (14.23: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (14.20-22: )
-> $$ = nterm logical_and_expression (14.20-22: )
Stack now 90 57 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 73
Next token is token ')' (14.23: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (14.20-22: )
-> $$ = nterm expression (14.20-22: )
Stack now 90 57 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 123
Next token is token ')' (14.23: )
Reducing stack by rule 40 (line 506):
   $1 = nterm unary_expression (14.18: )
   $2 = token '=' (14.19: )
   $3 = nterm expression (14.20-22: )
-> $$ = nterm assignment_expression (14.18-22: )
Stack now 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 158
Next token is token ')' (14.23: )
Shifting token ')' (14.23: )
Entering state 160
Reading a token: Next token is token '{' (14.25: )
Shifting token '{' (14.25: )
Entering state 45
Reading a token: Next token is token FOR (15.7-9: )
Shifting token FOR (15.7-9: )
Entering state 38
Reading a token: Next token is token '(' (15.10: )
Shifting token '(' (15.10: )
Entering state 80
Reading a token: Next token is token IDENTIFIER (15.11: j)
Shifting token IDENTIFIER (15.11: j)
Entering state 71
Reading a token: Next token is token '=' (15.12: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (15.11: j)
-> $$ = nterm primary_expression (15.11: )
Stack now 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (15.11: )
-> $$ = nterm postfix_expression (15.11: )
Stack now 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Next token is token '=' (15.12: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (15.11: )
-> $$ = nterm unary_expression (15.11: )
Stack now 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 57
Next token is token '=' (15.12: )
Shifting token '=' (15.12: )
Entering state 90
Reading a token: Next token is token INT_CONSTANT (15.13: 0)
Shifting token INT_CONSTANT (15.13: 0)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (15.13: 0)
-> $$ = nterm primary_expression (15.13: )
Stack now 90 57 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (15.13: )
-> $$ = nterm postfix_expression (15.13: )
Stack now 90 57 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ';' (15.14: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (15.13: )
-> $$ = nterm unary_expression (15.13: )
Stack now 90 57 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (15.13: )
-> $$ = nterm multiplicative_expression (15.13: )
Stack now 90 57 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 77
Next token is token ';' (15.14: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (15.13: )
-> $$ = nterm additive_expression (15.13: )
Stack now 90 57 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 76
Next token is token ';' (15.14: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (15.13: )
-> $$ = nterm relational_expression (15.13: )
Stack now 90 57 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 75
Next token is token ';' (15.14: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (15.13: )
-> $$ = nterm equality_expression (15.13: )
Stack now 90 57 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 74
Next token is token ';' (15.14: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (15.13: )
-> $$ = nterm logical_and_expression (15.13: )
Stack now 90 57 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 73
Next token is token ';' (15.14: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (15.13: )
-> $$ = nterm expression (15.13: )
Stack now 90 57 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 123
Next token is token ';' (15.14: )
Reducing stack by rule 40 (line 506):
   $1 = nterm unary_expression (15.11: )
   $2 = token '=' (15.12: )
   $3 = nterm expression (15.13: )
-> $$ = nterm assignment_expression (15.11-13: )
Stack now 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 115
Next token is token ';' (15.14: )
Shifting token ';' (15.14: )
Entering state 144
Reading a token: Next token is token IDENTIFIER (15.15: j)
Shifting token IDENTIFIER (15.15: j)
Entering state 71
Reading a token: Next token is token '<' (15.16: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (15.15: j)
-> $$ = nterm primary_expression (15.15: )
Stack now 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (15.15: )
-> $$ = nterm postfix_expression (15.15: )
Stack now 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Next token is token '<' (15.16: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (15.15: )
-> $$ = nterm unary_expression (15.15: )
Stack now 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (15.15: )
-> $$ = nterm multiplicative_expression (15.15: )
Stack now 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 77
Next token is token '<' (15.16: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (15.15: )
-> $$ = nterm additive_expression (15.15: )
Stack now 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 76
Next token is token '<' (15.16: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (15.15: )
-> $$ = nterm relational_expression (15.15: )
Stack now 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 75
Next token is token '<' (15.16: )
Shifting token '<' (15.16: )
Entering state 106
Reading a token: Next token is token INT_CONSTANT (15.17: 3)
Shifting token INT_CONSTANT (15.17: 3)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (15.17: 3)
-> $$ = nterm primary_expression (15.17: )
Stack now 106 75 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (15.17: )
-> $$ = nterm postfix_expression (15.17: )
Stack now 106 75 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ';' (15.18: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (15.17: )
-> $$ = nterm unary_expression (15.17: )
Stack now 106 75 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (15.17: )
-> $$ = nterm multiplicative_expression (15.17: )
Stack now 106 75 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 77
Next token is token ';' (15.18: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (15.17: )
-> $$ = nterm additive_expression (15.17: )
Stack now 106 75 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 135
Next token is token ';' (15.18: )
Reducing stack by rule 52 (line 779):
   $1 = nterm relational_expression (15.15: )
   $2 = token '<' (15.16: )
   $3 = nterm additive_expression (15.17: )
-> $$ = nterm relational_expression (15.15-17: )
Stack now 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 75
Next token is token ';' (15.18: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (15.15-17: )
-> $$ = nterm equality_expression (15.15-17: )
Stack now 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 74
Next token is token ';' (15.18: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (15.15-17: )
-> $$ = nterm logical_and_expression (15.15-17: )
Stack now 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 73
Next token is token ';' (15.18: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (15.15-17: )
-> $$ = nterm expression (15.15-17: )
Stack now 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 152
Next token is token ';' (15.18: )
Shifting token ';' (15.18: )
Entering state 156
Reading a token: Next token is token IDENTIFIER (15.19: j)
Shifting token IDENTIFIER (15.19: j)
Entering state 71
Reading a token: Next token is token '=' (15.20: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (15.19: j)
-> $$ = nterm primary_expression (15.19: )
Stack now 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (15.19: )
-> $$ = nterm postfix_expression (15.19: )
Stack now 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Next token is token '=' (15.20: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (15.19: )
-> $$ = nterm unary_expression (15.19: )
Stack now 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 57
Next token is token '=' (15.20: )
Shifting token '=' (15.20: )
Entering state 90
Reading a token: Next token is token IDENTIFIER (15.21: j)
Shifting token IDENTIFIER (15.21: j)
Entering state 71
Reading a token: Next token is token '+' (15.22: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (15.21: j)
-> $$ = nterm primary_expression (15.21: )
Stack now 90 57 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (15.21: )
-> $$ = nterm postfix_expression (15.21: )
Stack now 90 57 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Next token is token '+' (15.22: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (15.21: )
-> $$ = nterm unary_expression (15.21: )
Stack now 90 57 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (15.21: )
-> $$ = nterm multiplicative_expression (15.21: )
Stack now 90 57 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 77
Next token is token '+' (15.22: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (15.21: )
-> $$ = nterm additive_expression (15.21: )
Stack now 90 57 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 76
Next token is token '+' (15.22: )
Shifting token '+' (15.22: )
Entering state 110
Reading a token: Next token is token INT_CONSTANT (15.23: 1)
Shifting token INT_CONSTANT (15.23: 1)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (15.23: 1)
-> $$ = nterm primary_expression (15.23: )
Stack now 110 76 90 57 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (15.23: )
-> $$ = nterm postfix_expression (15.23: )
Stack now 110 76 90 57 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ')' (15.24: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (15.23: )
-> $$ = nterm unary_expression (15.23: )
Stack now 110 76 90 57 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (15.23: )
-> $$ = nterm multiplicative_expression (15.23: )
Stack now 110 76 90 57 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 139
Next token is token ')' (15.24: )
Reducing stack by rule 57 (line 954):
   $1 = nterm additive_expression (15.21: )
   $2 = token '+' (15.22: )
   $3 = nterm multiplicative_expression (15.23: )
-> $$ = nterm additive_expression (15.21-23: )
Stack now 90 57 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 76
Next token is token ')' (15.24: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (15.21-23: )
-> $$ = nterm relational_expression (15.21-23: )
Stack now 90 57 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 75
Next token is token ')' (15.24: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (15.21-23: )
-> $$ = nterm equality_expression (15.21-23: )
Stack now 90 57 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 74
Next token is token ')' (15.24: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (15.21-23: )
-> $$ = nterm logical_and_expression (15.21-23: )
Stack now 90 57 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 73
Next token is token ')' (15.24: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (15.21-23: )
-> $$ = nterm expression (15.21-23: )
Stack now 90 57 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 123
Next token is token ')' (15.24: )
Reducing stack by rule 40 (line 506):
   $1 = nterm unary_expression (15.19: )
   $2 = token '=' (15.20: )
   $3 = nterm expression (15.21-23: )
-> $$ = nterm assignment_expression (15.19-23: )
Stack now 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 158
Next token is token ')' (15.24: )
Shifting token ')' (15.24: )
Entering state 160
Reading a token: Next token is token '{' (15.26: )
Shifting token '{' (15.26: )
Entering state 45
Reading a token: Next token is token IDENTIFIER (16.10-15: printf)
Shifting token IDENTIFIER (16.10-15: printf)
Entering state 40
Reading a token: Next token is token '(' (16.16: )
Shifting token '(' (16.16: )
Entering state 82
Reading a token: Next token is token STRING_LITERAL (16.17-21: "%d ")
Shifting token STRING_LITERAL (16.17-21: "%d ")
Entering state 43
Reducing stack by rule 74 (line 1382):
   $1 = token STRING_LITERAL (16.17-21: "%d ")
-> $$ = nterm primary_expression (16.17-21: )
Stack now 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (16.17-21: )
-> $$ = nterm postfix_expression (16.17-21: )
Stack now 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ',' (16.22: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (16.17-21: )
-> $$ = nterm unary_expression (16.17-21: )
Stack now 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (16.17-21: )
-> $$ = nterm multiplicative_expression (16.17-21: )
Stack now 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 77
Next token is token ',' (16.22: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (16.17-21: )
-> $$ = nterm additive_expression (16.17-21: )
Stack now 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 76
Next token is token ',' (16.22: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (16.17-21: )
-> $$ = nterm relational_expression (16.17-21: )
Stack now 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 75
Next token is token ',' (16.22: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (16.17-21: )
-> $$ = nterm equality_expression (16.17-21: )
Stack now 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 74
Next token is token ',' (16.22: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (16.17-21: )
-> $$ = nterm logical_and_expression (16.17-21: )
Stack now 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 73
Next token is token ',' (16.22: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (16.17-21: )
-> $$ = nterm expression (16.17-21: )
Stack now 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 118
Next token is token ',' (16.22: )
Reducing stack by rule 76 (line 1393):
   $1 = nterm expression (16.17-21: )
-> $$ = nterm expression_list (16.17-21: )
Stack now 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 119
Next token is token ',' (16.22: )
Shifting token ',' (16.22: )
Entering state 148
Reading a token: Next token is token '&' (16.24: )
Shifting token '&' (16.24: )
Entering state 51
Reducing stack by rule 80 (line 1410):
   $1 = token '&' (16.24: )
-> $$ = nterm unary_operator (16.24: )
Stack now 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 60
Reading a token: Next token is token IDENTIFIER (16.25-28: disp)
Shifting token IDENTIFIER (16.25-28: disp)
Entering state 71
Reading a token: Next token is token '[' (16.29: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (16.25-28: disp)
-> $$ = nterm primary_expression (16.25-28: )
Stack now 60 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (16.25-28: )
-> $$ = nterm postfix_expression (16.25-28: )
Stack now 60 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Next token is token '[' (16.29: )
Shifting token '[' (16.29: )
Entering state 91
Reading a token: Next token is token IDENTIFIER (16.30: i)
Shifting token IDENTIFIER (16.30: i)
Entering state 71
Reading a token: Next token is token ']' (16.31: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (16.30: i)
-> $$ = nterm primary_expression (16.30: )
Stack now 91 58 60 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (16.30: )
-> $$ = nterm postfix_expression (16.30: )
Stack now 91 58 60 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Next token is token ']' (16.31: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (16.30: )
-> $$ = nterm unary_expression (16.30: )
Stack now 91 58 60 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (16.30: )
-> $$ = nterm multiplicative_expression (16.30: )
Stack now 91 58 60 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 77
Next token is token ']' (16.31: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (16.30: )
-> $$ = nterm additive_expression (16.30: )
Stack now 91 58 60 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 76
Next token is token ']' (16.31: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (16.30: )
-> $$ = nterm relational_expression (16.30: )
Stack now 91 58 60 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 75
Next token is token ']' (16.31: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (16.30: )
-> $$ = nterm equality_expression (16.30: )
Stack now 91 58 60 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 74
Next token is token ']' (16.31: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (16.30: )
-> $$ = nterm logical_and_expression (16.30: )
Stack now 91 58 60 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 73
Next token is token ']' (16.31: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (16.30: )
-> $$ = nterm expression (16.30: )
Stack now 91 58 60 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 124
Next token is token ']' (16.31: )
Shifting token ']' (16.31: )
Entering state 149
Reducing stack by rule 65 (line 1197):
   $1 = nterm postfix_expression (16.25-28: )
   $2 = token '[' (16.29: )
   $3 = nterm expression (16.30: )
   $4 = token ']' (16.31: )
-> $$ = nterm postfix_expression (16.25-31: )
Stack now 60 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token '[' (16.32: )
Shifting token '[' (16.32: )
Entering state 91
Reading a token: Next token is token IDENTIFIER (16.33: j)
Shifting token IDENTIFIER (16.33: j)
Entering state 71
Reading a token: Next token is token ']' (16.34: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (16.33: j)
-> $$ = nterm primary_expression (16.33: )
Stack now 91 58 60 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (16.33: )
-> $$ = nterm postfix_expression (16.33: )
Stack now 91 58 60 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Next token is token ']' (16.34: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (16.33: )
-> $$ = nterm unary_expression (16.33: )
Stack now 91 58 60 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (16.33: )
-> $$ = nterm multiplicative_expression (16.33: )
Stack now 91 58 60 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 77
Next token is token ']' (16.34: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (16.33: )
-> $$ = nterm additive_expression (16.33: )
Stack now 91 58 60 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 76
Next token is token ']' (16.34: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (16.33: )
-> $$ = nterm relational_expression (16.33: )
Stack now 91 58 60 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 75
Next token is token ']' (16.34: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (16.33: )
-> $$ = nterm equality_expression (16.33: )
Stack now 91 58 60 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 74
Next token is token ']' (16.34: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (16.33: )
-> $$ = nterm logical_and_expression (16.33: )
Stack now 91 58 60 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 73
Next token is token ']' (16.34: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (16.33: )
-> $$ = nterm expression (16.33: )
Stack now 91 58 60 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 124
Next token is token ']' (16.34: )
Shifting token ']' (16.34: )
Entering state 149
Reducing stack by rule 65 (line 1197):
   $1 = nterm postfix_expression (16.25-31: )
   $2 = token '[' (16.32: )
   $3 = nterm expression (16.33: )
   $4 = token ']' (16.34: )
-> $$ = nterm postfix_expression (16.25-34: )
Stack now 60 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ')' (16.35: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (16.25-34: )
-> $$ = nterm unary_expression (16.25-34: )
Stack now 60 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 95
Reducing stack by rule 60 (line 1063):
   $1 = nterm unary_operator (16.24: )
   $2 = nterm unary_expression (16.25-34: )
-> $$ = nterm unary_expression (16.24-34: )
Stack now 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (16.24-34: )
-> $$ = nterm multiplicative_expression (16.24-34: )
Stack now 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 77
Next token is token ')' (16.35: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (16.24-34: )
-> $$ = nterm additive_expression (16.24-34: )
Stack now 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 76
Next token is token ')' (16.35: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (16.24-34: )
-> $$ = nterm relational_expression (16.24-34: )
Stack now 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 75
Next token is token ')' (16.35: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (16.24-34: )
-> $$ = nterm equality_expression (16.24-34: )
Stack now 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 74
Next token is token ')' (16.35: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (16.24-34: )
-> $$ = nterm logical_and_expression (16.24-34: )
Stack now 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 73
Next token is token ')' (16.35: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (16.24-34: )
-> $$ = nterm expression (16.24-34: )
Stack now 148 119 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 155
Next token is token ')' (16.35: )
Reducing stack by rule 77 (line 1397):
   $1 = nterm expression_list (16.17-21: )
   $2 = token ',' (16.22: )
   $3 = nterm expression (16.24-34: )
-> $$ = nterm expression_list (16.17-34: )
Stack now 82 40 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 119
Next token is token ')' (16.35: )
Shifting token ')' (16.35: )
Entering state 147
Reading a token: Next token is token ';' (16.36: )
Shifting token ';' (16.36: )
Entering state 154
Reducing stack by rule 43 (line 594):
   $1 = token IDENTIFIER (16.10-15: printf)
   $2 = token '(' (16.16: )
   $3 = nterm expression_list (16.17-34: )
   $4 = token ')' (16.35: )
   $5 = token ';' (16.36: )
-> $$ = nterm procedure_call (16.10-36: )
Stack now 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 61
Reducing stack by rule 38 (line 474):
   $1 = nterm procedure_call (16.10-36: )
-> $$ = nterm statement (16.10-36: )
Stack now 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 53
Reducing stack by rule 31 (line 444):
   $1 = nterm statement (16.10-36: )
-> $$ = nterm statement_list (16.10-36: )
Stack now 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 84
Reading a token: Next token is token IF (17.10-11: )
Shifting token IF (17.10-11: )
Entering state 39
Reading a token: Next token is token '(' (17.12: )
Shifting token '(' (17.12: )
Entering state 81
Reading a token: Next token is token IDENTIFIER (17.13: j)
Shifting token IDENTIFIER (17.13: j)
Entering state 71
Reading a token: Next token is token EQ_OP (17.14-15: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (17.13: j)
-> $$ = nterm primary_expression (17.13: )
Stack now 81 39 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (17.13: )
-> $$ = nterm postfix_expression (17.13: )
Stack now 81 39 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Next token is token EQ_OP (17.14-15: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (17.13: )
-> $$ = nterm unary_expression (17.13: )
Stack now 81 39 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (17.13: )
-> $$ = nterm multiplicative_expression (17.13: )
Stack now 81 39 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 77
Next token is token EQ_OP (17.14-15: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (17.13: )
-> $$ = nterm additive_expression (17.13: )
Stack now 81 39 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 76
Next token is token EQ_OP (17.14-15: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (17.13: )
-> $$ = nterm relational_expression (17.13: )
Stack now 81 39 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 75
Next token is token EQ_OP (17.14-15: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (17.13: )
-> $$ = nterm equality_expression (17.13: )
Stack now 81 39 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 74
Next token is token EQ_OP (17.14-15: )
Shifting token EQ_OP (17.14-15: )
Entering state 104
Reading a token: Next token is token INT_CONSTANT (17.16: 2)
Shifting token INT_CONSTANT (17.16: 2)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (17.16: 2)
-> $$ = nterm primary_expression (17.16: )
Stack now 104 74 81 39 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (17.16: )
-> $$ = nterm postfix_expression (17.16: )
Stack now 104 74 81 39 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ')' (17.17: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (17.16: )
-> $$ = nterm unary_expression (17.16: )
Stack now 104 74 81 39 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (17.16: )
-> $$ = nterm multiplicative_expression (17.16: )
Stack now 104 74 81 39 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 77
Next token is token ')' (17.17: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (17.16: )
-> $$ = nterm additive_expression (17.16: )
Stack now 104 74 81 39 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 76
Next token is token ')' (17.17: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (17.16: )
-> $$ = nterm relational_expression (17.16: )
Stack now 104 74 81 39 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 133
Next token is token ')' (17.17: )
Reducing stack by rule 49 (line 701):
   $1 = nterm equality_expression (17.13: )
   $2 = token EQ_OP (17.14-15: )
   $3 = nterm relational_expression (17.16: )
-> $$ = nterm equality_expression (17.13-16: )
Stack now 81 39 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 74
Next token is token ')' (17.17: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (17.13-16: )
-> $$ = nterm logical_and_expression (17.13-16: )
Stack now 81 39 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 73
Next token is token ')' (17.17: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (17.13-16: )
-> $$ = nterm expression (17.13-16: )
Stack now 81 39 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 116
Next token is token ')' (17.17: )
Shifting token ')' (17.17: )
Entering state 145
Reading a token: Next token is token '{' (17.18: )
Shifting token '{' (17.18: )
Entering state 45
Reading a token: Next token is token IDENTIFIER (18.5-10: printf)
Shifting token IDENTIFIER (18.5-10: printf)
Entering state 40
Reading a token: Next token is token '(' (18.11: )
Shifting token '(' (18.11: )
Entering state 82
Reading a token: Next token is token STRING_LITERAL (18.12-15: "\n")
Shifting token STRING_LITERAL (18.12-15: "\n")
Entering state 43
Reducing stack by rule 74 (line 1382):
   $1 = token STRING_LITERAL (18.12-15: "\n")
-> $$ = nterm primary_expression (18.12-15: )
Stack now 82 40 45 145 116 81 39 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (18.12-15: )
-> $$ = nterm postfix_expression (18.12-15: )
Stack now 82 40 45 145 116 81 39 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ')' (18.16: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (18.12-15: )
-> $$ = nterm unary_expression (18.12-15: )
Stack now 82 40 45 145 116 81 39 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (18.12-15: )
-> $$ = nterm multiplicative_expression (18.12-15: )
Stack now 82 40 45 145 116 81 39 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 77
Next token is token ')' (18.16: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (18.12-15: )
-> $$ = nterm additive_expression (18.12-15: )
Stack now 82 40 45 145 116 81 39 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 76
Next token is token ')' (18.16: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (18.12-15: )
-> $$ = nterm relational_expression (18.12-15: )
Stack now 82 40 45 145 116 81 39 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 75
Next token is token ')' (18.16: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (18.12-15: )
-> $$ = nterm equality_expression (18.12-15: )
Stack now 82 40 45 145 116 81 39 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 74
Next token is token ')' (18.16: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (18.12-15: )
-> $$ = nterm logical_and_expression (18.12-15: )
Stack now 82 40 45 145 116 81 39 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 73
Next token is token ')' (18.16: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (18.12-15: )
-> $$ = nterm expression (18.12-15: )
Stack now 82 40 45 145 116 81 39 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 118
Next token is token ')' (18.16: )
Reducing stack by rule 76 (line 1393):
   $1 = nterm expression (18.12-15: )
-> $$ = nterm expression_list (18.12-15: )
Stack now 82 40 45 145 116 81 39 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 119
Next token is token ')' (18.16: )
Shifting token ')' (18.16: )
Entering state 147
Reading a token: Next token is token ';' (18.17: )
Shifting token ';' (18.17: )
Entering state 154
Reducing stack by rule 43 (line 594):
   $1 = token IDENTIFIER (18.5-10: printf)
   $2 = token '(' (18.11: )
   $3 = nterm expression_list (18.12-15: )
   $4 = token ')' (18.16: )
   $5 = token ';' (18.17: )
-> $$ = nterm procedure_call (18.5-17: )
Stack now 45 145 116 81 39 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 61
Reducing stack by rule 38 (line 474):
   $1 = nterm procedure_call (18.5-17: )
-> $$ = nterm statement (18.5-17: )
Stack now 45 145 116 81 39 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 53
Reducing stack by rule 31 (line 444):
   $1 = nterm statement (18.5-17: )
-> $$ = nterm statement_list (18.5-17: )
Stack now 45 145 116 81 39 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 84
Reading a token: Next token is token '}' (19.10: )
Shifting token '}' (19.10: )
Entering state 121
Reducing stack by rule 34 (line 460):
   $1 = token '{' (17.18: )
   $2 = nterm statement_list (18.5-17: )
   $3 = token '}' (19.10: )
-> $$ = nterm statement (17.18-19.10: )
Stack now 145 116 81 39 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 153
Reading a token: Next token is token ELSE (20.3-6: )
Shifting token ELSE (20.3-6: )
Entering state 157
Reading a token: Next token is token ';' (20.8: )
Shifting token ';' (20.8: )
Entering state 48
Reducing stack by rule 33 (line 457):
   $1 = token ';' (20.8: )
-> $$ = nterm statement (20.8: )
Stack now 157 153 145 116 81 39 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 159
Reducing stack by rule 82 (line 1419):
   $1 = token IF (17.10-11: )
   $2 = token '(' (17.12: )
   $3 = nterm expression (17.13-16: )
   $4 = token ')' (17.17: )
   $5 = nterm statement (17.18-19.10: )
   $6 = token ELSE (20.3-6: )
   $7 = nterm statement (20.8: )
-> $$ = nterm selection_statement (17.10-20.8: )
Stack now 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 62
Reducing stack by rule 35 (line 463):
   $1 = nterm selection_statement (17.10-20.8: )
-> $$ = nterm statement (17.10-20.8: )
Stack now 84 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 88
Reducing stack by rule 32 (line 449):
   $1 = nterm statement_list (16.10-36: )
   $2 = nterm statement (17.10-20.8: )
-> $$ = nterm statement_list (16.10-20.8: )
Stack now 45 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 84
Reading a token: Next token is token '}' (21.7: )
Shifting token '}' (21.7: )
Entering state 121
Reducing stack by rule 34 (line 460):
   $1 = token '{' (15.26: )
   $2 = nterm statement_list (16.10-20.8: )
   $3 = token '}' (21.7: )
-> $$ = nterm statement (15.26-21.7: )
Stack now 160 158 156 152 144 115 80 38 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 161
Reducing stack by rule 84 (line 1432):
   $1 = token FOR (15.7-9: )
   $2 = token '(' (15.10: )
   $3 = nterm assignment_expression (15.11-13: )
   $4 = token ';' (15.14: )
   $5 = nterm expression (15.15-17: )
   $6 = token ';' (15.18: )
   $7 = nterm assignment_expression (15.19-23: )
   $8 = token ')' (15.24: )
   $9 = nterm statement (15.26-21.7: )
-> $$ = nterm iteration_statement (15.7-21.7: )
Stack now 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 63
Reducing stack by rule 36 (line 466):
   $1 = nterm iteration_statement (15.7-21.7: )
-> $$ = nterm statement (15.7-21.7: )
Stack now 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 53
Reducing stack by rule 31 (line 444):
   $1 = nterm statement (15.7-21.7: )
-> $$ = nterm statement_list (15.7-21.7: )
Stack now 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 84
Reading a token: Next token is token '}' (22.4: )
Shifting token '}' (22.4: )
Entering state 121
Reducing stack by rule 34 (line 460):
   $1 = token '{' (14.25: )
   $2 = nterm statement_list (15.7-21.7: )
   $3 = token '}' (22.4: )
-> $$ = nterm statement (14.25-22.4: )
Stack now 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 161
Reducing stack by rule 84 (line 1432):
   $1 = token FOR (14.4-6: )
   $2 = token '(' (14.7: )
   $3 = nterm assignment_expression (14.8-10: )
   $4 = token ';' (14.11: )
   $5 = nterm expression (14.13-15: )
   $6 = token ';' (14.16: )
   $7 = nterm assignment_expression (14.18-22: )
   $8 = token ')' (14.23: )
   $9 = nterm statement (14.25-22.4: )
-> $$ = nterm iteration_statement (14.4-22.4: )
Stack now 86 52 24 17 14 8 0
Entering state 63
Reducing stack by rule 36 (line 466):
   $1 = nterm iteration_statement (14.4-22.4: )
-> $$ = nterm statement (14.4-22.4: )
Stack now 86 52 24 17 14 8 0
Entering state 88
Reducing stack by rule 32 (line 449):
   $1 = nterm statement_list (6.4-13.47: )
   $2 = nterm statement (14.4-22.4: )
-> $$ = nterm statement_list (6.4-22.4: )
Stack now 52 24 17 14 8 0
Entering state 86
Reading a token: Next token is token RETURN (23.4-9: )
Shifting token RETURN (23.4-9: )
Entering state 36
Reading a token: Next token is token INT_CONSTANT (23.11: 0)
Shifting token INT_CONSTANT (23.11: 0)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (23.11: 0)
-> $$ = nterm primary_expression (23.11: )
Stack now 36 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (23.11: )
-> $$ = nterm postfix_expression (23.11: )
Stack now 36 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ';' (23.12: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (23.11: )
-> $$ = nterm unary_expression (23.11: )
Stack now 36 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (23.11: )
-> $$ = nterm multiplicative_expression (23.11: )
Stack now 36 86 52 24 17 14 8 0
Entering state 77
Next token is token ';' (23.12: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (23.11: )
-> $$ = nterm additive_expression (23.11: )
Stack now 36 86 52 24 17 14 8 0
Entering state 76
Next token is token ';' (23.12: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (23.11: )
-> $$ = nterm relational_expression (23.11: )
Stack now 36 86 52 24 17 14 8 0
Entering state 75
Next token is token ';' (23.12: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (23.11: )
-> $$ = nterm equality_expression (23.11: )
Stack now 36 86 52 24 17 14 8 0
Entering state 74
Next token is token ';' (23.12: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (23.11: )
-> $$ = nterm logical_and_expression (23.11: )
Stack now 36 86 52 24 17 14 8 0
Entering state 73
Next token is token ';' (23.12: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (23.11: )
-> $$ = nterm expression (23.11: )
Stack now 36 86 52 24 17 14 8 0
Entering state 72
Next token is token ';' (23.12: )
Shifting token ';' (23.12: )
Entering state 102
Reducing stack by rule 39 (line 477):
   $1 = token RETURN (23.4-9: )
   $2 = nterm expression (23.11: )
   $3 = token ';' (23.12: )
-> $$ = nterm statement (23.4-12: )
Stack now 86 52 24 17 14 8 0
Entering state 88
Reducing stack by rule 32 (line 449):
   $1 = nterm statement_list (6.4-22.4: )
   $2 = nterm statement (23.4-12: )
-> $$ = nterm statement_list (6.4-23.12: )
Stack now 52 24 17 14 8 0
Entering state 86
Reading a token: Next token is token '}' (24.1: )
Shifting token '}' (24.1: )
Entering state 122
Reducing stack by rule 30 (line 436):
   $1 = token '{' (1.11: )
   $2 = nterm declaration_list (3.4-5.12: )
   $3 = nterm statement_list (6.4-23.12: )
   $4 = token '}' (24.1: )
-> $$ = nterm compound_statement (1.11-24.1: )
Stack now 17 14 8 0
Entering state 25
Reducing stack by rule 8 (line 158):
   $1 = nterm type_specifier (1.1-3: )
   $2 = nterm fun_declarator (1.5-10: )
   $3 = nterm $@2 (1.11: )
   $4 = nterm compound_statement (1.11-24.1: )
-> $$ = nterm function_definition (1.1-24.1: )
Stack now 0
Entering state 7
Reducing stack by rule 2 (line 126):
   $1 = nterm function_definition (1.1-24.1: )
-> $$ = nterm translation_unit (1.1-24.1: )
Stack now 0
Entering state 5
Reading a token: Next token is token $end (24.2-25.0: )
Shifting token $end (24.2-25.0: )
Entering state 10
Cleanup: popping token $end (24.2-25.0: )
Cleanup: popping nterm translation_unit (1.1-24.1: )
