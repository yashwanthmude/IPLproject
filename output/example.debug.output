Starting parse
Entering state 0
Reading a token: Next token is token INT (1.1-3: )
Shifting token INT (1.1-3: )
Entering state 2
Reducing stack by rule 10 (line 228):
   $1 = token INT (1.1-3: )
-> $$ = nterm type_specifier (1.1-3: )
Stack now 0
Entering state 8
Reading a token: Next token is token IDENTIFIER (1.5-8: main)
Shifting token IDENTIFIER (1.5-8: main)
Entering state 13
Reading a token: Next token is token '(' (1.9: )
Shifting token '(' (1.9: )
Entering state 16
Reading a token: Next token is token ')' (1.10: )
Shifting token ')' (1.10: )
Entering state 20
Reducing stack by rule 14 (line 244):
   $1 = token IDENTIFIER (1.5-8: main)
   $2 = token '(' (1.9: )
   $3 = token ')' (1.10: )
-> $$ = nterm fun_declarator (1.5-10: )
Stack now 8 0
Entering state 14
Reducing stack by rule 7 (line 159):
-> $$ = nterm $@2 (1.11: )
Stack now 14 8 0
Entering state 17
Reading a token: Next token is token '{' (2.1: )
Shifting token '{' (2.1: )
Entering state 24
Reading a token: Next token is token INT (3.3-5: )
Shifting token INT (3.3-5: )
Entering state 2
Reducing stack by rule 10 (line 228):
   $1 = token INT (3.3-5: )
-> $$ = nterm type_specifier (3.3-5: )
Stack now 24 17 14 8 0
Entering state 26
Reading a token: Next token is token IDENTIFIER (3.7: x)
Shifting token IDENTIFIER (3.7: x)
Entering state 30
Reducing stack by rule 18 (line 275):
   $1 = token IDENTIFIER (3.7: x)
-> $$ = nterm declarator_arr (3.7: )
Stack now 26 24 17 14 8 0
Entering state 32
Reading a token: Next token is token ',' (3.8: )
Reducing stack by rule 20 (line 294):
   $1 = nterm declarator_arr (3.7: )
-> $$ = nterm declarator (3.7: )
Stack now 26 24 17 14 8 0
Entering state 64
Reducing stack by rule 25 (line 414):
   $1 = nterm declarator (3.7: )
-> $$ = nterm declarator_list (3.7: )
Stack now 26 24 17 14 8 0
Entering state 65
Next token is token ',' (3.8: )
Shifting token ',' (3.8: )
Entering state 96
Reading a token: Next token is token IDENTIFIER (3.10: y)
Shifting token IDENTIFIER (3.10: y)
Entering state 30
Reducing stack by rule 18 (line 275):
   $1 = token IDENTIFIER (3.10: y)
-> $$ = nterm declarator_arr (3.10: )
Stack now 96 65 26 24 17 14 8 0
Entering state 32
Reading a token: Next token is token ';' (3.11: )
Reducing stack by rule 20 (line 294):
   $1 = nterm declarator_arr (3.10: )
-> $$ = nterm declarator (3.10: )
Stack now 96 65 26 24 17 14 8 0
Entering state 127
Reducing stack by rule 26 (line 418):
   $1 = nterm declarator_list (3.7: )
   $2 = token ',' (3.8: )
   $3 = nterm declarator (3.10: )
-> $$ = nterm declarator_list (3.7-10: )
Stack now 26 24 17 14 8 0
Entering state 65
Next token is token ';' (3.11: )
Shifting token ';' (3.11: )
Entering state 97
Reducing stack by rule 24 (line 408):
   $1 = nterm type_specifier (3.3-5: )
   $2 = nterm declarator_list (3.7-10: )
   $3 = token ';' (3.11: )
-> $$ = nterm declaration (3.3-11: )
Stack now 24 17 14 8 0
Entering state 27
Reducing stack by rule 22 (line 304):
   $1 = nterm declaration (3.3-11: )
-> $$ = nterm declaration_list (3.3-11: )
Stack now 24 17 14 8 0
Entering state 52
Reading a token: Next token is token FOR (4.3-5: )
Shifting token FOR (4.3-5: )
Entering state 38
Reading a token: Next token is token '(' (4.7: )
Shifting token '(' (4.7: )
Entering state 80
Reading a token: Next token is token IDENTIFIER (4.8: x)
Shifting token IDENTIFIER (4.8: x)
Entering state 71
Reading a token: Next token is token '=' (4.9: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (4.8: x)
-> $$ = nterm primary_expression (4.8: )
Stack now 80 38 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (4.8: )
-> $$ = nterm postfix_expression (4.8: )
Stack now 80 38 52 24 17 14 8 0
Entering state 58
Next token is token '=' (4.9: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (4.8: )
-> $$ = nterm unary_expression (4.8: )
Stack now 80 38 52 24 17 14 8 0
Entering state 57
Next token is token '=' (4.9: )
Shifting token '=' (4.9: )
Entering state 90
Reading a token: Next token is token INT_CONSTANT (4.10: 0)
Shifting token INT_CONSTANT (4.10: 0)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (4.10: 0)
-> $$ = nterm primary_expression (4.10: )
Stack now 90 57 80 38 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (4.10: )
-> $$ = nterm postfix_expression (4.10: )
Stack now 90 57 80 38 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ';' (4.11: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (4.10: )
-> $$ = nterm unary_expression (4.10: )
Stack now 90 57 80 38 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (4.10: )
-> $$ = nterm multiplicative_expression (4.10: )
Stack now 90 57 80 38 52 24 17 14 8 0
Entering state 77
Next token is token ';' (4.11: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (4.10: )
-> $$ = nterm additive_expression (4.10: )
Stack now 90 57 80 38 52 24 17 14 8 0
Entering state 76
Next token is token ';' (4.11: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (4.10: )
-> $$ = nterm relational_expression (4.10: )
Stack now 90 57 80 38 52 24 17 14 8 0
Entering state 75
Next token is token ';' (4.11: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (4.10: )
-> $$ = nterm equality_expression (4.10: )
Stack now 90 57 80 38 52 24 17 14 8 0
Entering state 74
Next token is token ';' (4.11: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (4.10: )
-> $$ = nterm logical_and_expression (4.10: )
Stack now 90 57 80 38 52 24 17 14 8 0
Entering state 73
Next token is token ';' (4.11: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (4.10: )
-> $$ = nterm expression (4.10: )
Stack now 90 57 80 38 52 24 17 14 8 0
Entering state 123
Next token is token ';' (4.11: )
Reducing stack by rule 40 (line 506):
   $1 = nterm unary_expression (4.8: )
   $2 = token '=' (4.9: )
   $3 = nterm expression (4.10: )
-> $$ = nterm assignment_expression (4.8-10: )
Stack now 80 38 52 24 17 14 8 0
Entering state 115
Next token is token ';' (4.11: )
Shifting token ';' (4.11: )
Entering state 144
Reading a token: Next token is token IDENTIFIER (4.13: x)
Shifting token IDENTIFIER (4.13: x)
Entering state 71
Reading a token: Next token is token '<' (4.15: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (4.13: x)
-> $$ = nterm primary_expression (4.13: )
Stack now 144 115 80 38 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (4.13: )
-> $$ = nterm postfix_expression (4.13: )
Stack now 144 115 80 38 52 24 17 14 8 0
Entering state 58
Next token is token '<' (4.15: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (4.13: )
-> $$ = nterm unary_expression (4.13: )
Stack now 144 115 80 38 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (4.13: )
-> $$ = nterm multiplicative_expression (4.13: )
Stack now 144 115 80 38 52 24 17 14 8 0
Entering state 77
Next token is token '<' (4.15: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (4.13: )
-> $$ = nterm additive_expression (4.13: )
Stack now 144 115 80 38 52 24 17 14 8 0
Entering state 76
Next token is token '<' (4.15: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (4.13: )
-> $$ = nterm relational_expression (4.13: )
Stack now 144 115 80 38 52 24 17 14 8 0
Entering state 75
Next token is token '<' (4.15: )
Shifting token '<' (4.15: )
Entering state 106
Reading a token: Next token is token INT_CONSTANT (4.16-17: 10)
Shifting token INT_CONSTANT (4.16-17: 10)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (4.16-17: 10)
-> $$ = nterm primary_expression (4.16-17: )
Stack now 106 75 144 115 80 38 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (4.16-17: )
-> $$ = nterm postfix_expression (4.16-17: )
Stack now 106 75 144 115 80 38 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ';' (4.18: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (4.16-17: )
-> $$ = nterm unary_expression (4.16-17: )
Stack now 106 75 144 115 80 38 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (4.16-17: )
-> $$ = nterm multiplicative_expression (4.16-17: )
Stack now 106 75 144 115 80 38 52 24 17 14 8 0
Entering state 77
Next token is token ';' (4.18: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (4.16-17: )
-> $$ = nterm additive_expression (4.16-17: )
Stack now 106 75 144 115 80 38 52 24 17 14 8 0
Entering state 135
Next token is token ';' (4.18: )
Reducing stack by rule 52 (line 779):
   $1 = nterm relational_expression (4.13: )
   $2 = token '<' (4.15: )
   $3 = nterm additive_expression (4.16-17: )
-> $$ = nterm relational_expression (4.13-17: )
Stack now 144 115 80 38 52 24 17 14 8 0
Entering state 75
Next token is token ';' (4.18: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (4.13-17: )
-> $$ = nterm equality_expression (4.13-17: )
Stack now 144 115 80 38 52 24 17 14 8 0
Entering state 74
Next token is token ';' (4.18: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (4.13-17: )
-> $$ = nterm logical_and_expression (4.13-17: )
Stack now 144 115 80 38 52 24 17 14 8 0
Entering state 73
Next token is token ';' (4.18: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (4.13-17: )
-> $$ = nterm expression (4.13-17: )
Stack now 144 115 80 38 52 24 17 14 8 0
Entering state 152
Next token is token ';' (4.18: )
Shifting token ';' (4.18: )
Entering state 156
Reading a token: Next token is token IDENTIFIER (4.20: x)
Shifting token IDENTIFIER (4.20: x)
Entering state 71
Reading a token: Next token is token '=' (4.21: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (4.20: x)
-> $$ = nterm primary_expression (4.20: )
Stack now 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (4.20: )
-> $$ = nterm postfix_expression (4.20: )
Stack now 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 58
Next token is token '=' (4.21: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (4.20: )
-> $$ = nterm unary_expression (4.20: )
Stack now 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 57
Next token is token '=' (4.21: )
Shifting token '=' (4.21: )
Entering state 90
Reading a token: Next token is token IDENTIFIER (4.22: x)
Shifting token IDENTIFIER (4.22: x)
Entering state 71
Reading a token: Next token is token '+' (4.23: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (4.22: x)
-> $$ = nterm primary_expression (4.22: )
Stack now 90 57 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (4.22: )
-> $$ = nterm postfix_expression (4.22: )
Stack now 90 57 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 58
Next token is token '+' (4.23: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (4.22: )
-> $$ = nterm unary_expression (4.22: )
Stack now 90 57 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (4.22: )
-> $$ = nterm multiplicative_expression (4.22: )
Stack now 90 57 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 77
Next token is token '+' (4.23: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (4.22: )
-> $$ = nterm additive_expression (4.22: )
Stack now 90 57 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 76
Next token is token '+' (4.23: )
Shifting token '+' (4.23: )
Entering state 110
Reading a token: Next token is token INT_CONSTANT (4.24: 1)
Shifting token INT_CONSTANT (4.24: 1)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (4.24: 1)
-> $$ = nterm primary_expression (4.24: )
Stack now 110 76 90 57 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (4.24: )
-> $$ = nterm postfix_expression (4.24: )
Stack now 110 76 90 57 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ')' (4.25: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (4.24: )
-> $$ = nterm unary_expression (4.24: )
Stack now 110 76 90 57 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (4.24: )
-> $$ = nterm multiplicative_expression (4.24: )
Stack now 110 76 90 57 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 139
Next token is token ')' (4.25: )
Reducing stack by rule 57 (line 954):
   $1 = nterm additive_expression (4.22: )
   $2 = token '+' (4.23: )
   $3 = nterm multiplicative_expression (4.24: )
-> $$ = nterm additive_expression (4.22-24: )
Stack now 90 57 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 76
Next token is token ')' (4.25: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (4.22-24: )
-> $$ = nterm relational_expression (4.22-24: )
Stack now 90 57 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 75
Next token is token ')' (4.25: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (4.22-24: )
-> $$ = nterm equality_expression (4.22-24: )
Stack now 90 57 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 74
Next token is token ')' (4.25: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (4.22-24: )
-> $$ = nterm logical_and_expression (4.22-24: )
Stack now 90 57 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 73
Next token is token ')' (4.25: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (4.22-24: )
-> $$ = nterm expression (4.22-24: )
Stack now 90 57 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 123
Next token is token ')' (4.25: )
Reducing stack by rule 40 (line 506):
   $1 = nterm unary_expression (4.20: )
   $2 = token '=' (4.21: )
   $3 = nterm expression (4.22-24: )
-> $$ = nterm assignment_expression (4.20-24: )
Stack now 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 158
Next token is token ')' (4.25: )
Shifting token ')' (4.25: )
Entering state 160
Reading a token: Next token is token ';' (4.26: )
Shifting token ';' (4.26: )
Entering state 48
Reducing stack by rule 33 (line 457):
   $1 = token ';' (4.26: )
-> $$ = nterm statement (4.26: )
Stack now 160 158 156 152 144 115 80 38 52 24 17 14 8 0
Entering state 161
Reducing stack by rule 84 (line 1432):
   $1 = token FOR (4.3-5: )
   $2 = token '(' (4.7: )
   $3 = nterm assignment_expression (4.8-10: )
   $4 = token ';' (4.11: )
   $5 = nterm expression (4.13-17: )
   $6 = token ';' (4.18: )
   $7 = nterm assignment_expression (4.20-24: )
   $8 = token ')' (4.25: )
   $9 = nterm statement (4.26: )
-> $$ = nterm iteration_statement (4.3-26: )
Stack now 52 24 17 14 8 0
Entering state 63
Reducing stack by rule 36 (line 466):
   $1 = nterm iteration_statement (4.3-26: )
-> $$ = nterm statement (4.3-26: )
Stack now 52 24 17 14 8 0
Entering state 53
Reducing stack by rule 31 (line 444):
   $1 = nterm statement (4.3-26: )
-> $$ = nterm statement_list (4.3-26: )
Stack now 52 24 17 14 8 0
Entering state 86
Reading a token: Next token is token IF (5.3-4: )
Shifting token IF (5.3-4: )
Entering state 39
Reading a token: Next token is token '(' (5.6: )
Shifting token '(' (5.6: )
Entering state 81
Reading a token: Next token is token IDENTIFIER (5.7: y)
Shifting token IDENTIFIER (5.7: y)
Entering state 71
Reading a token: Next token is token '>' (5.9: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (5.7: y)
-> $$ = nterm primary_expression (5.7: )
Stack now 81 39 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (5.7: )
-> $$ = nterm postfix_expression (5.7: )
Stack now 81 39 86 52 24 17 14 8 0
Entering state 58
Next token is token '>' (5.9: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (5.7: )
-> $$ = nterm unary_expression (5.7: )
Stack now 81 39 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (5.7: )
-> $$ = nterm multiplicative_expression (5.7: )
Stack now 81 39 86 52 24 17 14 8 0
Entering state 77
Next token is token '>' (5.9: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (5.7: )
-> $$ = nterm additive_expression (5.7: )
Stack now 81 39 86 52 24 17 14 8 0
Entering state 76
Next token is token '>' (5.9: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (5.7: )
-> $$ = nterm relational_expression (5.7: )
Stack now 81 39 86 52 24 17 14 8 0
Entering state 75
Next token is token '>' (5.9: )
Shifting token '>' (5.9: )
Entering state 108
Reading a token: Next token is token INT_CONSTANT (5.10: 1)
Shifting token INT_CONSTANT (5.10: 1)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (5.10: 1)
-> $$ = nterm primary_expression (5.10: )
Stack now 108 75 81 39 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (5.10: )
-> $$ = nterm postfix_expression (5.10: )
Stack now 108 75 81 39 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ')' (5.11: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (5.10: )
-> $$ = nterm unary_expression (5.10: )
Stack now 108 75 81 39 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (5.10: )
-> $$ = nterm multiplicative_expression (5.10: )
Stack now 108 75 81 39 86 52 24 17 14 8 0
Entering state 77
Next token is token ')' (5.11: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (5.10: )
-> $$ = nterm additive_expression (5.10: )
Stack now 108 75 81 39 86 52 24 17 14 8 0
Entering state 137
Next token is token ')' (5.11: )
Reducing stack by rule 53 (line 820):
   $1 = nterm relational_expression (5.7: )
   $2 = token '>' (5.9: )
   $3 = nterm additive_expression (5.10: )
-> $$ = nterm relational_expression (5.7-10: )
Stack now 81 39 86 52 24 17 14 8 0
Entering state 75
Next token is token ')' (5.11: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (5.7-10: )
-> $$ = nterm equality_expression (5.7-10: )
Stack now 81 39 86 52 24 17 14 8 0
Entering state 74
Next token is token ')' (5.11: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (5.7-10: )
-> $$ = nterm logical_and_expression (5.7-10: )
Stack now 81 39 86 52 24 17 14 8 0
Entering state 73
Next token is token ')' (5.11: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (5.7-10: )
-> $$ = nterm expression (5.7-10: )
Stack now 81 39 86 52 24 17 14 8 0
Entering state 116
Next token is token ')' (5.11: )
Shifting token ')' (5.11: )
Entering state 145
Reading a token: Next token is token '{' (5.13: )
Shifting token '{' (5.13: )
Entering state 45
Reading a token: Next token is token IDENTIFIER (5.14: x)
Shifting token IDENTIFIER (5.14: x)
Entering state 40
Reading a token: Next token is token '=' (5.15: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (5.14: x)
-> $$ = nterm primary_expression (5.14: )
Stack now 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (5.14: )
-> $$ = nterm postfix_expression (5.14: )
Stack now 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 58
Next token is token '=' (5.15: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (5.14: )
-> $$ = nterm unary_expression (5.14: )
Stack now 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 57
Next token is token '=' (5.15: )
Shifting token '=' (5.15: )
Entering state 90
Reading a token: Next token is token IDENTIFIER (5.16: x)
Shifting token IDENTIFIER (5.16: x)
Entering state 71
Reading a token: Next token is token '-' (5.17: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (5.16: x)
-> $$ = nterm primary_expression (5.16: )
Stack now 90 57 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (5.16: )
-> $$ = nterm postfix_expression (5.16: )
Stack now 90 57 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 58
Next token is token '-' (5.17: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (5.16: )
-> $$ = nterm unary_expression (5.16: )
Stack now 90 57 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (5.16: )
-> $$ = nterm multiplicative_expression (5.16: )
Stack now 90 57 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 77
Next token is token '-' (5.17: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (5.16: )
-> $$ = nterm additive_expression (5.16: )
Stack now 90 57 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 76
Next token is token '-' (5.17: )
Shifting token '-' (5.17: )
Entering state 111
Reading a token: Next token is token INT_CONSTANT (5.18: 1)
Shifting token INT_CONSTANT (5.18: 1)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (5.18: 1)
-> $$ = nterm primary_expression (5.18: )
Stack now 111 76 90 57 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (5.18: )
-> $$ = nterm postfix_expression (5.18: )
Stack now 111 76 90 57 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ';' (5.19: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (5.18: )
-> $$ = nterm unary_expression (5.18: )
Stack now 111 76 90 57 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (5.18: )
-> $$ = nterm multiplicative_expression (5.18: )
Stack now 111 76 90 57 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 140
Next token is token ';' (5.19: )
Reducing stack by rule 58 (line 1008):
   $1 = nterm additive_expression (5.16: )
   $2 = token '-' (5.17: )
   $3 = nterm multiplicative_expression (5.18: )
-> $$ = nterm additive_expression (5.16-18: )
Stack now 90 57 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 76
Next token is token ';' (5.19: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (5.16-18: )
-> $$ = nterm relational_expression (5.16-18: )
Stack now 90 57 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 75
Next token is token ';' (5.19: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (5.16-18: )
-> $$ = nterm equality_expression (5.16-18: )
Stack now 90 57 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 74
Next token is token ';' (5.19: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (5.16-18: )
-> $$ = nterm logical_and_expression (5.16-18: )
Stack now 90 57 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 73
Next token is token ';' (5.19: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (5.16-18: )
-> $$ = nterm expression (5.16-18: )
Stack now 90 57 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 123
Next token is token ';' (5.19: )
Reducing stack by rule 40 (line 506):
   $1 = nterm unary_expression (5.14: )
   $2 = token '=' (5.15: )
   $3 = nterm expression (5.16-18: )
-> $$ = nterm assignment_expression (5.14-18: )
Stack now 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 56
Next token is token ';' (5.19: )
Shifting token ';' (5.19: )
Entering state 89
Reducing stack by rule 41 (line 559):
   $1 = nterm assignment_expression (5.14-18: )
   $2 = token ';' (5.19: )
-> $$ = nterm assignment_statement (5.14-19: )
Stack now 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 54
Reducing stack by rule 37 (line 469):
   $1 = nterm assignment_statement (5.14-19: )
-> $$ = nterm statement (5.14-19: )
Stack now 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 53
Reducing stack by rule 31 (line 444):
   $1 = nterm statement (5.14-19: )
-> $$ = nterm statement_list (5.14-19: )
Stack now 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 84
Reading a token: Next token is token IDENTIFIER (5.21: y)
Shifting token IDENTIFIER (5.21: y)
Entering state 40
Reading a token: Next token is token '=' (5.22: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (5.21: y)
-> $$ = nterm primary_expression (5.21: )
Stack now 84 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (5.21: )
-> $$ = nterm postfix_expression (5.21: )
Stack now 84 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 58
Next token is token '=' (5.22: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (5.21: )
-> $$ = nterm unary_expression (5.21: )
Stack now 84 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 57
Next token is token '=' (5.22: )
Shifting token '=' (5.22: )
Entering state 90
Reading a token: Next token is token IDENTIFIER (5.23: y)
Shifting token IDENTIFIER (5.23: y)
Entering state 71
Reading a token: Next token is token '+' (5.24: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (5.23: y)
-> $$ = nterm primary_expression (5.23: )
Stack now 90 57 84 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (5.23: )
-> $$ = nterm postfix_expression (5.23: )
Stack now 90 57 84 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 58
Next token is token '+' (5.24: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (5.23: )
-> $$ = nterm unary_expression (5.23: )
Stack now 90 57 84 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (5.23: )
-> $$ = nterm multiplicative_expression (5.23: )
Stack now 90 57 84 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 77
Next token is token '+' (5.24: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (5.23: )
-> $$ = nterm additive_expression (5.23: )
Stack now 90 57 84 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 76
Next token is token '+' (5.24: )
Shifting token '+' (5.24: )
Entering state 110
Reading a token: Next token is token INT_CONSTANT (5.25: 1)
Shifting token INT_CONSTANT (5.25: 1)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (5.25: 1)
-> $$ = nterm primary_expression (5.25: )
Stack now 110 76 90 57 84 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (5.25: )
-> $$ = nterm postfix_expression (5.25: )
Stack now 110 76 90 57 84 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ';' (5.26: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (5.25: )
-> $$ = nterm unary_expression (5.25: )
Stack now 110 76 90 57 84 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (5.25: )
-> $$ = nterm multiplicative_expression (5.25: )
Stack now 110 76 90 57 84 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 139
Next token is token ';' (5.26: )
Reducing stack by rule 57 (line 954):
   $1 = nterm additive_expression (5.23: )
   $2 = token '+' (5.24: )
   $3 = nterm multiplicative_expression (5.25: )
-> $$ = nterm additive_expression (5.23-25: )
Stack now 90 57 84 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 76
Next token is token ';' (5.26: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (5.23-25: )
-> $$ = nterm relational_expression (5.23-25: )
Stack now 90 57 84 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 75
Next token is token ';' (5.26: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (5.23-25: )
-> $$ = nterm equality_expression (5.23-25: )
Stack now 90 57 84 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 74
Next token is token ';' (5.26: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (5.23-25: )
-> $$ = nterm logical_and_expression (5.23-25: )
Stack now 90 57 84 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 73
Next token is token ';' (5.26: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (5.23-25: )
-> $$ = nterm expression (5.23-25: )
Stack now 90 57 84 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 123
Next token is token ';' (5.26: )
Reducing stack by rule 40 (line 506):
   $1 = nterm unary_expression (5.21: )
   $2 = token '=' (5.22: )
   $3 = nterm expression (5.23-25: )
-> $$ = nterm assignment_expression (5.21-25: )
Stack now 84 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 56
Next token is token ';' (5.26: )
Shifting token ';' (5.26: )
Entering state 89
Reducing stack by rule 41 (line 559):
   $1 = nterm assignment_expression (5.21-25: )
   $2 = token ';' (5.26: )
-> $$ = nterm assignment_statement (5.21-26: )
Stack now 84 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 54
Reducing stack by rule 37 (line 469):
   $1 = nterm assignment_statement (5.21-26: )
-> $$ = nterm statement (5.21-26: )
Stack now 84 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 88
Reducing stack by rule 32 (line 449):
   $1 = nterm statement_list (5.14-19: )
   $2 = nterm statement (5.21-26: )
-> $$ = nterm statement_list (5.14-26: )
Stack now 45 145 116 81 39 86 52 24 17 14 8 0
Entering state 84
Reading a token: Next token is token '}' (5.27: )
Shifting token '}' (5.27: )
Entering state 121
Reducing stack by rule 34 (line 460):
   $1 = token '{' (5.13: )
   $2 = nterm statement_list (5.14-26: )
   $3 = token '}' (5.27: )
-> $$ = nterm statement (5.13-27: )
Stack now 145 116 81 39 86 52 24 17 14 8 0
Entering state 153
Reading a token: Next token is token ELSE (5.29-32: )
Shifting token ELSE (5.29-32: )
Entering state 157
Reading a token: Next token is token ';' (5.34: )
Shifting token ';' (5.34: )
Entering state 48
Reducing stack by rule 33 (line 457):
   $1 = token ';' (5.34: )
-> $$ = nterm statement (5.34: )
Stack now 157 153 145 116 81 39 86 52 24 17 14 8 0
Entering state 159
Reducing stack by rule 82 (line 1419):
   $1 = token IF (5.3-4: )
   $2 = token '(' (5.6: )
   $3 = nterm expression (5.7-10: )
   $4 = token ')' (5.11: )
   $5 = nterm statement (5.13-27: )
   $6 = token ELSE (5.29-32: )
   $7 = nterm statement (5.34: )
-> $$ = nterm selection_statement (5.3-34: )
Stack now 86 52 24 17 14 8 0
Entering state 62
Reducing stack by rule 35 (line 463):
   $1 = nterm selection_statement (5.3-34: )
-> $$ = nterm statement (5.3-34: )
Stack now 86 52 24 17 14 8 0
Entering state 88
Reducing stack by rule 32 (line 449):
   $1 = nterm statement_list (4.3-26: )
   $2 = nterm statement (5.3-34: )
-> $$ = nterm statement_list (4.3-5.34: )
Stack now 52 24 17 14 8 0
Entering state 86
Reading a token: Next token is token '}' (6.1: )
Shifting token '}' (6.1: )
Entering state 122
Reducing stack by rule 30 (line 436):
   $1 = token '{' (2.1: )
   $2 = nterm declaration_list (3.3-11: )
   $3 = nterm statement_list (4.3-5.34: )
   $4 = token '}' (6.1: )
-> $$ = nterm compound_statement (2.1-6.1: )
Stack now 17 14 8 0
Entering state 25
Reducing stack by rule 8 (line 158):
   $1 = nterm type_specifier (1.1-3: )
   $2 = nterm fun_declarator (1.5-10: )
   $3 = nterm $@2 (1.11: )
   $4 = nterm compound_statement (2.1-6.1: )
-> $$ = nterm function_definition (1.1-6.1: )
Stack now 0
Entering state 7
Reducing stack by rule 2 (line 126):
   $1 = nterm function_definition (1.1-6.1: )
-> $$ = nterm translation_unit (1.1-6.1: )
Stack now 0
Entering state 5
Reading a token: Next token is token $end (6.2-7.0: )
Shifting token $end (6.2-7.0: )
Entering state 10
Cleanup: popping token $end (6.2-7.0: )
Cleanup: popping nterm translation_unit (1.1-6.1: )
