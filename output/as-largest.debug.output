Starting parse
Entering state 0
Reading a token: Next token is token INT (2.1-3: )
Shifting token INT (2.1-3: )
Entering state 2
Reducing stack by rule 10 (line 228):
   $1 = token INT (2.1-3: )
-> $$ = nterm type_specifier (2.1-3: )
Stack now 0
Entering state 8
Reading a token: Next token is token IDENTIFIER (2.5-8: main)
Shifting token IDENTIFIER (2.5-8: main)
Entering state 13
Reading a token: Next token is token '(' (2.9: )
Shifting token '(' (2.9: )
Entering state 16
Reading a token: Next token is token ')' (2.10: )
Shifting token ')' (2.10: )
Entering state 20
Reducing stack by rule 14 (line 244):
   $1 = token IDENTIFIER (2.5-8: main)
   $2 = token '(' (2.9: )
   $3 = token ')' (2.10: )
-> $$ = nterm fun_declarator (2.5-10: )
Stack now 8 0
Entering state 14
Reducing stack by rule 7 (line 159):
-> $$ = nterm $@2 (2.11: )
Stack now 14 8 0
Entering state 17
Reading a token: Next token is token '{' (2.12: )
Shifting token '{' (2.12: )
Entering state 24
Reading a token: Next token is token INT (3.3-5: )
Shifting token INT (3.3-5: )
Entering state 2
Reducing stack by rule 10 (line 228):
   $1 = token INT (3.3-5: )
-> $$ = nterm type_specifier (3.3-5: )
Stack now 24 17 14 8 0
Entering state 26
Reading a token: Next token is token IDENTIFIER (3.7: n)
Shifting token IDENTIFIER (3.7: n)
Entering state 30
Reducing stack by rule 18 (line 275):
   $1 = token IDENTIFIER (3.7: n)
-> $$ = nterm declarator_arr (3.7: )
Stack now 26 24 17 14 8 0
Entering state 32
Reading a token: Next token is token ',' (3.8: )
Reducing stack by rule 20 (line 294):
   $1 = nterm declarator_arr (3.7: )
-> $$ = nterm declarator (3.7: )
Stack now 26 24 17 14 8 0
Entering state 64
Reducing stack by rule 25 (line 414):
   $1 = nterm declarator (3.7: )
-> $$ = nterm declarator_list (3.7: )
Stack now 26 24 17 14 8 0
Entering state 65
Next token is token ',' (3.8: )
Shifting token ',' (3.8: )
Entering state 96
Reading a token: Next token is token IDENTIFIER (3.9: i)
Shifting token IDENTIFIER (3.9: i)
Entering state 30
Reducing stack by rule 18 (line 275):
   $1 = token IDENTIFIER (3.9: i)
-> $$ = nterm declarator_arr (3.9: )
Stack now 96 65 26 24 17 14 8 0
Entering state 32
Reading a token: Next token is token ';' (3.10: )
Reducing stack by rule 20 (line 294):
   $1 = nterm declarator_arr (3.9: )
-> $$ = nterm declarator (3.9: )
Stack now 96 65 26 24 17 14 8 0
Entering state 127
Reducing stack by rule 26 (line 418):
   $1 = nterm declarator_list (3.7: )
   $2 = token ',' (3.8: )
   $3 = nterm declarator (3.9: )
-> $$ = nterm declarator_list (3.7-9: )
Stack now 26 24 17 14 8 0
Entering state 65
Next token is token ';' (3.10: )
Shifting token ';' (3.10: )
Entering state 97
Reducing stack by rule 24 (line 408):
   $1 = nterm type_specifier (3.3-5: )
   $2 = nterm declarator_list (3.7-9: )
   $3 = token ';' (3.10: )
-> $$ = nterm declaration (3.3-10: )
Stack now 24 17 14 8 0
Entering state 27
Reducing stack by rule 22 (line 304):
   $1 = nterm declaration (3.3-10: )
-> $$ = nterm declaration_list (3.3-10: )
Stack now 24 17 14 8 0
Entering state 52
Reading a token: Next token is token FLOAT (4.3-7: )
Shifting token FLOAT (4.3-7: )
Entering state 3
Reducing stack by rule 11 (line 231):
   $1 = token FLOAT (4.3-7: )
-> $$ = nterm type_specifier (4.3-7: )
Stack now 52 24 17 14 8 0
Entering state 26
Reading a token: Next token is token IDENTIFIER (4.9-11: arr)
Shifting token IDENTIFIER (4.9-11: arr)
Entering state 30
Reducing stack by rule 18 (line 275):
   $1 = token IDENTIFIER (4.9-11: arr)
-> $$ = nterm declarator_arr (4.9-11: )
Stack now 26 52 24 17 14 8 0
Entering state 32
Reading a token: Next token is token '[' (4.12: )
Shifting token '[' (4.12: )
Entering state 69
Reading a token: Next token is token INT_CONSTANT (4.13-15: 100)
Shifting token INT_CONSTANT (4.13-15: 100)
Entering state 99
Reading a token: Next token is token ']' (4.16: )
Shifting token ']' (4.16: )
Entering state 128
Reducing stack by rule 19 (line 278):
   $1 = nterm declarator_arr (4.9-11: )
   $2 = token '[' (4.12: )
   $3 = token INT_CONSTANT (4.13-15: 100)
   $4 = token ']' (4.16: )
-> $$ = nterm declarator_arr (4.9-16: )
Stack now 26 52 24 17 14 8 0
Entering state 32
Reading a token: Next token is token ';' (4.17: )
Reducing stack by rule 20 (line 294):
   $1 = nterm declarator_arr (4.9-16: )
-> $$ = nterm declarator (4.9-16: )
Stack now 26 52 24 17 14 8 0
Entering state 64
Reducing stack by rule 25 (line 414):
   $1 = nterm declarator (4.9-16: )
-> $$ = nterm declarator_list (4.9-16: )
Stack now 26 52 24 17 14 8 0
Entering state 65
Next token is token ';' (4.17: )
Shifting token ';' (4.17: )
Entering state 97
Reducing stack by rule 24 (line 408):
   $1 = nterm type_specifier (4.3-7: )
   $2 = nterm declarator_list (4.9-16: )
   $3 = token ';' (4.17: )
-> $$ = nterm declaration (4.3-17: )
Stack now 52 24 17 14 8 0
Entering state 67
Reducing stack by rule 23 (line 356):
   $1 = nterm declaration_list (3.3-10: )
   $2 = nterm declaration (4.3-17: )
-> $$ = nterm declaration_list (3.3-4.17: )
Stack now 24 17 14 8 0
Entering state 52
Reading a token: Next token is token IDENTIFIER (5.3-8: printf)
Shifting token IDENTIFIER (5.3-8: printf)
Entering state 40
Reading a token: Next token is token '(' (5.9: )
Shifting token '(' (5.9: )
Entering state 82
Reading a token: Next token is token STRING_LITERAL (5.10-52: "Enter the number of elements (1 to 100): ")
Shifting token STRING_LITERAL (5.10-52: "Enter the number of elements (1 to 100): ")
Entering state 43
Reducing stack by rule 74 (line 1382):
   $1 = token STRING_LITERAL (5.10-52: "Enter the number of elements (1 to 100): ")
-> $$ = nterm primary_expression (5.10-52: )
Stack now 82 40 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (5.10-52: )
-> $$ = nterm postfix_expression (5.10-52: )
Stack now 82 40 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ')' (5.53: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (5.10-52: )
-> $$ = nterm unary_expression (5.10-52: )
Stack now 82 40 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (5.10-52: )
-> $$ = nterm multiplicative_expression (5.10-52: )
Stack now 82 40 52 24 17 14 8 0
Entering state 77
Next token is token ')' (5.53: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (5.10-52: )
-> $$ = nterm additive_expression (5.10-52: )
Stack now 82 40 52 24 17 14 8 0
Entering state 76
Next token is token ')' (5.53: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (5.10-52: )
-> $$ = nterm relational_expression (5.10-52: )
Stack now 82 40 52 24 17 14 8 0
Entering state 75
Next token is token ')' (5.53: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (5.10-52: )
-> $$ = nterm equality_expression (5.10-52: )
Stack now 82 40 52 24 17 14 8 0
Entering state 74
Next token is token ')' (5.53: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (5.10-52: )
-> $$ = nterm logical_and_expression (5.10-52: )
Stack now 82 40 52 24 17 14 8 0
Entering state 73
Next token is token ')' (5.53: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (5.10-52: )
-> $$ = nterm expression (5.10-52: )
Stack now 82 40 52 24 17 14 8 0
Entering state 118
Next token is token ')' (5.53: )
Reducing stack by rule 76 (line 1393):
   $1 = nterm expression (5.10-52: )
-> $$ = nterm expression_list (5.10-52: )
Stack now 82 40 52 24 17 14 8 0
Entering state 119
Next token is token ')' (5.53: )
Shifting token ')' (5.53: )
Entering state 147
Reading a token: Next token is token ';' (5.54: )
Shifting token ';' (5.54: )
Entering state 154
Reducing stack by rule 43 (line 594):
   $1 = token IDENTIFIER (5.3-8: printf)
   $2 = token '(' (5.9: )
   $3 = nterm expression_list (5.10-52: )
   $4 = token ')' (5.53: )
   $5 = token ';' (5.54: )
-> $$ = nterm procedure_call (5.3-54: )
Stack now 52 24 17 14 8 0
Entering state 61
Reducing stack by rule 38 (line 474):
   $1 = nterm procedure_call (5.3-54: )
-> $$ = nterm statement (5.3-54: )
Stack now 52 24 17 14 8 0
Entering state 53
Reducing stack by rule 31 (line 444):
   $1 = nterm statement (5.3-54: )
-> $$ = nterm statement_list (5.3-54: )
Stack now 52 24 17 14 8 0
Entering state 86
Reading a token: Next token is token IDENTIFIER (6.3-7: scanf)
Shifting token IDENTIFIER (6.3-7: scanf)
Entering state 40
Reading a token: Next token is token '(' (6.8: )
Shifting token '(' (6.8: )
Entering state 82
Reading a token: Next token is token STRING_LITERAL (6.9-12: "%d")
Shifting token STRING_LITERAL (6.9-12: "%d")
Entering state 43
Reducing stack by rule 74 (line 1382):
   $1 = token STRING_LITERAL (6.9-12: "%d")
-> $$ = nterm primary_expression (6.9-12: )
Stack now 82 40 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (6.9-12: )
-> $$ = nterm postfix_expression (6.9-12: )
Stack now 82 40 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ',' (6.13: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (6.9-12: )
-> $$ = nterm unary_expression (6.9-12: )
Stack now 82 40 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (6.9-12: )
-> $$ = nterm multiplicative_expression (6.9-12: )
Stack now 82 40 86 52 24 17 14 8 0
Entering state 77
Next token is token ',' (6.13: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (6.9-12: )
-> $$ = nterm additive_expression (6.9-12: )
Stack now 82 40 86 52 24 17 14 8 0
Entering state 76
Next token is token ',' (6.13: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (6.9-12: )
-> $$ = nterm relational_expression (6.9-12: )
Stack now 82 40 86 52 24 17 14 8 0
Entering state 75
Next token is token ',' (6.13: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (6.9-12: )
-> $$ = nterm equality_expression (6.9-12: )
Stack now 82 40 86 52 24 17 14 8 0
Entering state 74
Next token is token ',' (6.13: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (6.9-12: )
-> $$ = nterm logical_and_expression (6.9-12: )
Stack now 82 40 86 52 24 17 14 8 0
Entering state 73
Next token is token ',' (6.13: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (6.9-12: )
-> $$ = nterm expression (6.9-12: )
Stack now 82 40 86 52 24 17 14 8 0
Entering state 118
Next token is token ',' (6.13: )
Reducing stack by rule 76 (line 1393):
   $1 = nterm expression (6.9-12: )
-> $$ = nterm expression_list (6.9-12: )
Stack now 82 40 86 52 24 17 14 8 0
Entering state 119
Next token is token ',' (6.13: )
Shifting token ',' (6.13: )
Entering state 148
Reading a token: Next token is token '&' (6.15: )
Shifting token '&' (6.15: )
Entering state 51
Reducing stack by rule 80 (line 1410):
   $1 = token '&' (6.15: )
-> $$ = nterm unary_operator (6.15: )
Stack now 148 119 82 40 86 52 24 17 14 8 0
Entering state 60
Reading a token: Next token is token IDENTIFIER (6.16: n)
Shifting token IDENTIFIER (6.16: n)
Entering state 71
Reading a token: Next token is token ')' (6.17: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (6.16: n)
-> $$ = nterm primary_expression (6.16: )
Stack now 60 148 119 82 40 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (6.16: )
-> $$ = nterm postfix_expression (6.16: )
Stack now 60 148 119 82 40 86 52 24 17 14 8 0
Entering state 58
Next token is token ')' (6.17: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (6.16: )
-> $$ = nterm unary_expression (6.16: )
Stack now 60 148 119 82 40 86 52 24 17 14 8 0
Entering state 95
Reducing stack by rule 60 (line 1063):
   $1 = nterm unary_operator (6.15: )
   $2 = nterm unary_expression (6.16: )
-> $$ = nterm unary_expression (6.15-16: )
Stack now 148 119 82 40 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (6.15-16: )
-> $$ = nterm multiplicative_expression (6.15-16: )
Stack now 148 119 82 40 86 52 24 17 14 8 0
Entering state 77
Next token is token ')' (6.17: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (6.15-16: )
-> $$ = nterm additive_expression (6.15-16: )
Stack now 148 119 82 40 86 52 24 17 14 8 0
Entering state 76
Next token is token ')' (6.17: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (6.15-16: )
-> $$ = nterm relational_expression (6.15-16: )
Stack now 148 119 82 40 86 52 24 17 14 8 0
Entering state 75
Next token is token ')' (6.17: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (6.15-16: )
-> $$ = nterm equality_expression (6.15-16: )
Stack now 148 119 82 40 86 52 24 17 14 8 0
Entering state 74
Next token is token ')' (6.17: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (6.15-16: )
-> $$ = nterm logical_and_expression (6.15-16: )
Stack now 148 119 82 40 86 52 24 17 14 8 0
Entering state 73
Next token is token ')' (6.17: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (6.15-16: )
-> $$ = nterm expression (6.15-16: )
Stack now 148 119 82 40 86 52 24 17 14 8 0
Entering state 155
Next token is token ')' (6.17: )
Reducing stack by rule 77 (line 1397):
   $1 = nterm expression_list (6.9-12: )
   $2 = token ',' (6.13: )
   $3 = nterm expression (6.15-16: )
-> $$ = nterm expression_list (6.9-16: )
Stack now 82 40 86 52 24 17 14 8 0
Entering state 119
Next token is token ')' (6.17: )
Shifting token ')' (6.17: )
Entering state 147
Reading a token: Next token is token ';' (6.18: )
Shifting token ';' (6.18: )
Entering state 154
Reducing stack by rule 43 (line 594):
   $1 = token IDENTIFIER (6.3-7: scanf)
   $2 = token '(' (6.8: )
   $3 = nterm expression_list (6.9-16: )
   $4 = token ')' (6.17: )
   $5 = token ';' (6.18: )
-> $$ = nterm procedure_call (6.3-18: )
Stack now 86 52 24 17 14 8 0
Entering state 61
Reducing stack by rule 38 (line 474):
   $1 = nterm procedure_call (6.3-18: )
-> $$ = nterm statement (6.3-18: )
Stack now 86 52 24 17 14 8 0
Entering state 88
Reducing stack by rule 32 (line 449):
   $1 = nterm statement_list (5.3-54: )
   $2 = nterm statement (6.3-18: )
-> $$ = nterm statement_list (5.3-6.18: )
Stack now 52 24 17 14 8 0
Entering state 86
Reading a token: Next token is token FOR (8.3-5: )
Shifting token FOR (8.3-5: )
Entering state 38
Reading a token: Next token is token '(' (8.7: )
Shifting token '(' (8.7: )
Entering state 80
Reading a token: Next token is token IDENTIFIER (8.8: i)
Shifting token IDENTIFIER (8.8: i)
Entering state 71
Reading a token: Next token is token '=' (8.10: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (8.8: i)
-> $$ = nterm primary_expression (8.8: )
Stack now 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (8.8: )
-> $$ = nterm postfix_expression (8.8: )
Stack now 80 38 86 52 24 17 14 8 0
Entering state 58
Next token is token '=' (8.10: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (8.8: )
-> $$ = nterm unary_expression (8.8: )
Stack now 80 38 86 52 24 17 14 8 0
Entering state 57
Next token is token '=' (8.10: )
Shifting token '=' (8.10: )
Entering state 90
Reading a token: Next token is token INT_CONSTANT (8.12: 0)
Shifting token INT_CONSTANT (8.12: 0)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (8.12: 0)
-> $$ = nterm primary_expression (8.12: )
Stack now 90 57 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (8.12: )
-> $$ = nterm postfix_expression (8.12: )
Stack now 90 57 80 38 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ';' (8.13: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (8.12: )
-> $$ = nterm unary_expression (8.12: )
Stack now 90 57 80 38 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (8.12: )
-> $$ = nterm multiplicative_expression (8.12: )
Stack now 90 57 80 38 86 52 24 17 14 8 0
Entering state 77
Next token is token ';' (8.13: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (8.12: )
-> $$ = nterm additive_expression (8.12: )
Stack now 90 57 80 38 86 52 24 17 14 8 0
Entering state 76
Next token is token ';' (8.13: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (8.12: )
-> $$ = nterm relational_expression (8.12: )
Stack now 90 57 80 38 86 52 24 17 14 8 0
Entering state 75
Next token is token ';' (8.13: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (8.12: )
-> $$ = nterm equality_expression (8.12: )
Stack now 90 57 80 38 86 52 24 17 14 8 0
Entering state 74
Next token is token ';' (8.13: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (8.12: )
-> $$ = nterm logical_and_expression (8.12: )
Stack now 90 57 80 38 86 52 24 17 14 8 0
Entering state 73
Next token is token ';' (8.13: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (8.12: )
-> $$ = nterm expression (8.12: )
Stack now 90 57 80 38 86 52 24 17 14 8 0
Entering state 123
Next token is token ';' (8.13: )
Reducing stack by rule 40 (line 506):
   $1 = nterm unary_expression (8.8: )
   $2 = token '=' (8.10: )
   $3 = nterm expression (8.12: )
-> $$ = nterm assignment_expression (8.8-12: )
Stack now 80 38 86 52 24 17 14 8 0
Entering state 115
Next token is token ';' (8.13: )
Shifting token ';' (8.13: )
Entering state 144
Reading a token: Next token is token IDENTIFIER (8.15: i)
Shifting token IDENTIFIER (8.15: i)
Entering state 71
Reading a token: Next token is token '<' (8.17: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (8.15: i)
-> $$ = nterm primary_expression (8.15: )
Stack now 144 115 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (8.15: )
-> $$ = nterm postfix_expression (8.15: )
Stack now 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Next token is token '<' (8.17: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (8.15: )
-> $$ = nterm unary_expression (8.15: )
Stack now 144 115 80 38 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (8.15: )
-> $$ = nterm multiplicative_expression (8.15: )
Stack now 144 115 80 38 86 52 24 17 14 8 0
Entering state 77
Next token is token '<' (8.17: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (8.15: )
-> $$ = nterm additive_expression (8.15: )
Stack now 144 115 80 38 86 52 24 17 14 8 0
Entering state 76
Next token is token '<' (8.17: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (8.15: )
-> $$ = nterm relational_expression (8.15: )
Stack now 144 115 80 38 86 52 24 17 14 8 0
Entering state 75
Next token is token '<' (8.17: )
Shifting token '<' (8.17: )
Entering state 106
Reading a token: Next token is token IDENTIFIER (8.19: n)
Shifting token IDENTIFIER (8.19: n)
Entering state 71
Reading a token: Next token is token ';' (8.20: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (8.19: n)
-> $$ = nterm primary_expression (8.19: )
Stack now 106 75 144 115 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (8.19: )
-> $$ = nterm postfix_expression (8.19: )
Stack now 106 75 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Next token is token ';' (8.20: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (8.19: )
-> $$ = nterm unary_expression (8.19: )
Stack now 106 75 144 115 80 38 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (8.19: )
-> $$ = nterm multiplicative_expression (8.19: )
Stack now 106 75 144 115 80 38 86 52 24 17 14 8 0
Entering state 77
Next token is token ';' (8.20: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (8.19: )
-> $$ = nterm additive_expression (8.19: )
Stack now 106 75 144 115 80 38 86 52 24 17 14 8 0
Entering state 135
Next token is token ';' (8.20: )
Reducing stack by rule 52 (line 779):
   $1 = nterm relational_expression (8.15: )
   $2 = token '<' (8.17: )
   $3 = nterm additive_expression (8.19: )
-> $$ = nterm relational_expression (8.15-19: )
Stack now 144 115 80 38 86 52 24 17 14 8 0
Entering state 75
Next token is token ';' (8.20: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (8.15-19: )
-> $$ = nterm equality_expression (8.15-19: )
Stack now 144 115 80 38 86 52 24 17 14 8 0
Entering state 74
Next token is token ';' (8.20: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (8.15-19: )
-> $$ = nterm logical_and_expression (8.15-19: )
Stack now 144 115 80 38 86 52 24 17 14 8 0
Entering state 73
Next token is token ';' (8.20: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (8.15-19: )
-> $$ = nterm expression (8.15-19: )
Stack now 144 115 80 38 86 52 24 17 14 8 0
Entering state 152
Next token is token ';' (8.20: )
Shifting token ';' (8.20: )
Entering state 156
Reading a token: Next token is token IDENTIFIER (8.22: i)
Shifting token IDENTIFIER (8.22: i)
Entering state 71
Reading a token: Next token is token '=' (8.24: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (8.22: i)
-> $$ = nterm primary_expression (8.22: )
Stack now 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (8.22: )
-> $$ = nterm postfix_expression (8.22: )
Stack now 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Next token is token '=' (8.24: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (8.22: )
-> $$ = nterm unary_expression (8.22: )
Stack now 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 57
Next token is token '=' (8.24: )
Shifting token '=' (8.24: )
Entering state 90
Reading a token: Next token is token IDENTIFIER (8.26: i)
Shifting token IDENTIFIER (8.26: i)
Entering state 71
Reading a token: Next token is token '+' (8.28: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (8.26: i)
-> $$ = nterm primary_expression (8.26: )
Stack now 90 57 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (8.26: )
-> $$ = nterm postfix_expression (8.26: )
Stack now 90 57 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Next token is token '+' (8.28: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (8.26: )
-> $$ = nterm unary_expression (8.26: )
Stack now 90 57 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (8.26: )
-> $$ = nterm multiplicative_expression (8.26: )
Stack now 90 57 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 77
Next token is token '+' (8.28: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (8.26: )
-> $$ = nterm additive_expression (8.26: )
Stack now 90 57 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 76
Next token is token '+' (8.28: )
Shifting token '+' (8.28: )
Entering state 110
Reading a token: Next token is token INT_CONSTANT (8.30: 1)
Shifting token INT_CONSTANT (8.30: 1)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (8.30: 1)
-> $$ = nterm primary_expression (8.30: )
Stack now 110 76 90 57 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (8.30: )
-> $$ = nterm postfix_expression (8.30: )
Stack now 110 76 90 57 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ')' (8.31: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (8.30: )
-> $$ = nterm unary_expression (8.30: )
Stack now 110 76 90 57 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (8.30: )
-> $$ = nterm multiplicative_expression (8.30: )
Stack now 110 76 90 57 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 139
Next token is token ')' (8.31: )
Reducing stack by rule 57 (line 954):
   $1 = nterm additive_expression (8.26: )
   $2 = token '+' (8.28: )
   $3 = nterm multiplicative_expression (8.30: )
-> $$ = nterm additive_expression (8.26-30: )
Stack now 90 57 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 76
Next token is token ')' (8.31: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (8.26-30: )
-> $$ = nterm relational_expression (8.26-30: )
Stack now 90 57 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 75
Next token is token ')' (8.31: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (8.26-30: )
-> $$ = nterm equality_expression (8.26-30: )
Stack now 90 57 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 74
Next token is token ')' (8.31: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (8.26-30: )
-> $$ = nterm logical_and_expression (8.26-30: )
Stack now 90 57 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 73
Next token is token ')' (8.31: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (8.26-30: )
-> $$ = nterm expression (8.26-30: )
Stack now 90 57 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 123
Next token is token ')' (8.31: )
Reducing stack by rule 40 (line 506):
   $1 = nterm unary_expression (8.22: )
   $2 = token '=' (8.24: )
   $3 = nterm expression (8.26-30: )
-> $$ = nterm assignment_expression (8.22-30: )
Stack now 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 158
Next token is token ')' (8.31: )
Shifting token ')' (8.31: )
Entering state 160
Reading a token: Next token is token '{' (8.33: )
Shifting token '{' (8.33: )
Entering state 45
Reading a token: Next token is token IDENTIFIER (9.5-10: printf)
Shifting token IDENTIFIER (9.5-10: printf)
Entering state 40
Reading a token: Next token is token '(' (9.11: )
Shifting token '(' (9.11: )
Entering state 82
Reading a token: Next token is token STRING_LITERAL (9.12-29: "Enter number%d: ")
Shifting token STRING_LITERAL (9.12-29: "Enter number%d: ")
Entering state 43
Reducing stack by rule 74 (line 1382):
   $1 = token STRING_LITERAL (9.12-29: "Enter number%d: ")
-> $$ = nterm primary_expression (9.12-29: )
Stack now 82 40 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (9.12-29: )
-> $$ = nterm postfix_expression (9.12-29: )
Stack now 82 40 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ',' (9.30: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (9.12-29: )
-> $$ = nterm unary_expression (9.12-29: )
Stack now 82 40 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (9.12-29: )
-> $$ = nterm multiplicative_expression (9.12-29: )
Stack now 82 40 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 77
Next token is token ',' (9.30: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (9.12-29: )
-> $$ = nterm additive_expression (9.12-29: )
Stack now 82 40 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 76
Next token is token ',' (9.30: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (9.12-29: )
-> $$ = nterm relational_expression (9.12-29: )
Stack now 82 40 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 75
Next token is token ',' (9.30: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (9.12-29: )
-> $$ = nterm equality_expression (9.12-29: )
Stack now 82 40 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 74
Next token is token ',' (9.30: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (9.12-29: )
-> $$ = nterm logical_and_expression (9.12-29: )
Stack now 82 40 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 73
Next token is token ',' (9.30: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (9.12-29: )
-> $$ = nterm expression (9.12-29: )
Stack now 82 40 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 118
Next token is token ',' (9.30: )
Reducing stack by rule 76 (line 1393):
   $1 = nterm expression (9.12-29: )
-> $$ = nterm expression_list (9.12-29: )
Stack now 82 40 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 119
Next token is token ',' (9.30: )
Shifting token ',' (9.30: )
Entering state 148
Reading a token: Next token is token IDENTIFIER (9.32: i)
Shifting token IDENTIFIER (9.32: i)
Entering state 71
Reading a token: Next token is token '+' (9.34: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (9.32: i)
-> $$ = nterm primary_expression (9.32: )
Stack now 148 119 82 40 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (9.32: )
-> $$ = nterm postfix_expression (9.32: )
Stack now 148 119 82 40 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Next token is token '+' (9.34: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (9.32: )
-> $$ = nterm unary_expression (9.32: )
Stack now 148 119 82 40 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (9.32: )
-> $$ = nterm multiplicative_expression (9.32: )
Stack now 148 119 82 40 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 77
Next token is token '+' (9.34: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (9.32: )
-> $$ = nterm additive_expression (9.32: )
Stack now 148 119 82 40 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 76
Next token is token '+' (9.34: )
Shifting token '+' (9.34: )
Entering state 110
Reading a token: Next token is token INT_CONSTANT (9.36: 1)
Shifting token INT_CONSTANT (9.36: 1)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (9.36: 1)
-> $$ = nterm primary_expression (9.36: )
Stack now 110 76 148 119 82 40 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (9.36: )
-> $$ = nterm postfix_expression (9.36: )
Stack now 110 76 148 119 82 40 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ')' (9.37: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (9.36: )
-> $$ = nterm unary_expression (9.36: )
Stack now 110 76 148 119 82 40 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (9.36: )
-> $$ = nterm multiplicative_expression (9.36: )
Stack now 110 76 148 119 82 40 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 139
Next token is token ')' (9.37: )
Reducing stack by rule 57 (line 954):
   $1 = nterm additive_expression (9.32: )
   $2 = token '+' (9.34: )
   $3 = nterm multiplicative_expression (9.36: )
-> $$ = nterm additive_expression (9.32-36: )
Stack now 148 119 82 40 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 76
Next token is token ')' (9.37: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (9.32-36: )
-> $$ = nterm relational_expression (9.32-36: )
Stack now 148 119 82 40 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 75
Next token is token ')' (9.37: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (9.32-36: )
-> $$ = nterm equality_expression (9.32-36: )
Stack now 148 119 82 40 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 74
Next token is token ')' (9.37: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (9.32-36: )
-> $$ = nterm logical_and_expression (9.32-36: )
Stack now 148 119 82 40 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 73
Next token is token ')' (9.37: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (9.32-36: )
-> $$ = nterm expression (9.32-36: )
Stack now 148 119 82 40 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 155
Next token is token ')' (9.37: )
Reducing stack by rule 77 (line 1397):
   $1 = nterm expression_list (9.12-29: )
   $2 = token ',' (9.30: )
   $3 = nterm expression (9.32-36: )
-> $$ = nterm expression_list (9.12-36: )
Stack now 82 40 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 119
Next token is token ')' (9.37: )
Shifting token ')' (9.37: )
Entering state 147
Reading a token: Next token is token ';' (9.38: )
Shifting token ';' (9.38: )
Entering state 154
Reducing stack by rule 43 (line 594):
   $1 = token IDENTIFIER (9.5-10: printf)
   $2 = token '(' (9.11: )
   $3 = nterm expression_list (9.12-36: )
   $4 = token ')' (9.37: )
   $5 = token ';' (9.38: )
-> $$ = nterm procedure_call (9.5-38: )
Stack now 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 61
Reducing stack by rule 38 (line 474):
   $1 = nterm procedure_call (9.5-38: )
-> $$ = nterm statement (9.5-38: )
Stack now 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 53
Reducing stack by rule 31 (line 444):
   $1 = nterm statement (9.5-38: )
-> $$ = nterm statement_list (9.5-38: )
Stack now 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 84
Reading a token: Next token is token IDENTIFIER (10.5-9: scanf)
Shifting token IDENTIFIER (10.5-9: scanf)
Entering state 40
Reading a token: Next token is token '(' (10.10: )
Shifting token '(' (10.10: )
Entering state 82
Reading a token: Next token is token STRING_LITERAL (10.11-14: "%f")
Shifting token STRING_LITERAL (10.11-14: "%f")
Entering state 43
Reducing stack by rule 74 (line 1382):
   $1 = token STRING_LITERAL (10.11-14: "%f")
-> $$ = nterm primary_expression (10.11-14: )
Stack now 82 40 84 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (10.11-14: )
-> $$ = nterm postfix_expression (10.11-14: )
Stack now 82 40 84 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ',' (10.15: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (10.11-14: )
-> $$ = nterm unary_expression (10.11-14: )
Stack now 82 40 84 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (10.11-14: )
-> $$ = nterm multiplicative_expression (10.11-14: )
Stack now 82 40 84 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 77
Next token is token ',' (10.15: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (10.11-14: )
-> $$ = nterm additive_expression (10.11-14: )
Stack now 82 40 84 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 76
Next token is token ',' (10.15: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (10.11-14: )
-> $$ = nterm relational_expression (10.11-14: )
Stack now 82 40 84 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 75
Next token is token ',' (10.15: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (10.11-14: )
-> $$ = nterm equality_expression (10.11-14: )
Stack now 82 40 84 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 74
Next token is token ',' (10.15: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (10.11-14: )
-> $$ = nterm logical_and_expression (10.11-14: )
Stack now 82 40 84 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 73
Next token is token ',' (10.15: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (10.11-14: )
-> $$ = nterm expression (10.11-14: )
Stack now 82 40 84 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 118
Next token is token ',' (10.15: )
Reducing stack by rule 76 (line 1393):
   $1 = nterm expression (10.11-14: )
-> $$ = nterm expression_list (10.11-14: )
Stack now 82 40 84 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 119
Next token is token ',' (10.15: )
Shifting token ',' (10.15: )
Entering state 148
Reading a token: Next token is token '&' (10.17: )
Shifting token '&' (10.17: )
Entering state 51
Reducing stack by rule 80 (line 1410):
   $1 = token '&' (10.17: )
-> $$ = nterm unary_operator (10.17: )
Stack now 148 119 82 40 84 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 60
Reading a token: Next token is token IDENTIFIER (10.18-20: arr)
Shifting token IDENTIFIER (10.18-20: arr)
Entering state 71
Reading a token: Next token is token '[' (10.21: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (10.18-20: arr)
-> $$ = nterm primary_expression (10.18-20: )
Stack now 60 148 119 82 40 84 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (10.18-20: )
-> $$ = nterm postfix_expression (10.18-20: )
Stack now 60 148 119 82 40 84 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Next token is token '[' (10.21: )
Shifting token '[' (10.21: )
Entering state 91
Reading a token: Next token is token IDENTIFIER (10.22: i)
Shifting token IDENTIFIER (10.22: i)
Entering state 71
Reading a token: Next token is token ']' (10.23: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (10.22: i)
-> $$ = nterm primary_expression (10.22: )
Stack now 91 58 60 148 119 82 40 84 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (10.22: )
-> $$ = nterm postfix_expression (10.22: )
Stack now 91 58 60 148 119 82 40 84 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Next token is token ']' (10.23: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (10.22: )
-> $$ = nterm unary_expression (10.22: )
Stack now 91 58 60 148 119 82 40 84 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (10.22: )
-> $$ = nterm multiplicative_expression (10.22: )
Stack now 91 58 60 148 119 82 40 84 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 77
Next token is token ']' (10.23: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (10.22: )
-> $$ = nterm additive_expression (10.22: )
Stack now 91 58 60 148 119 82 40 84 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 76
Next token is token ']' (10.23: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (10.22: )
-> $$ = nterm relational_expression (10.22: )
Stack now 91 58 60 148 119 82 40 84 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 75
Next token is token ']' (10.23: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (10.22: )
-> $$ = nterm equality_expression (10.22: )
Stack now 91 58 60 148 119 82 40 84 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 74
Next token is token ']' (10.23: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (10.22: )
-> $$ = nterm logical_and_expression (10.22: )
Stack now 91 58 60 148 119 82 40 84 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 73
Next token is token ']' (10.23: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (10.22: )
-> $$ = nterm expression (10.22: )
Stack now 91 58 60 148 119 82 40 84 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 124
Next token is token ']' (10.23: )
Shifting token ']' (10.23: )
Entering state 149
Reducing stack by rule 65 (line 1197):
   $1 = nterm postfix_expression (10.18-20: )
   $2 = token '[' (10.21: )
   $3 = nterm expression (10.22: )
   $4 = token ']' (10.23: )
-> $$ = nterm postfix_expression (10.18-23: )
Stack now 60 148 119 82 40 84 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ')' (10.24: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (10.18-23: )
-> $$ = nterm unary_expression (10.18-23: )
Stack now 60 148 119 82 40 84 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 95
Reducing stack by rule 60 (line 1063):
   $1 = nterm unary_operator (10.17: )
   $2 = nterm unary_expression (10.18-23: )
-> $$ = nterm unary_expression (10.17-23: )
Stack now 148 119 82 40 84 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (10.17-23: )
-> $$ = nterm multiplicative_expression (10.17-23: )
Stack now 148 119 82 40 84 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 77
Next token is token ')' (10.24: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (10.17-23: )
-> $$ = nterm additive_expression (10.17-23: )
Stack now 148 119 82 40 84 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 76
Next token is token ')' (10.24: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (10.17-23: )
-> $$ = nterm relational_expression (10.17-23: )
Stack now 148 119 82 40 84 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 75
Next token is token ')' (10.24: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (10.17-23: )
-> $$ = nterm equality_expression (10.17-23: )
Stack now 148 119 82 40 84 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 74
Next token is token ')' (10.24: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (10.17-23: )
-> $$ = nterm logical_and_expression (10.17-23: )
Stack now 148 119 82 40 84 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 73
Next token is token ')' (10.24: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (10.17-23: )
-> $$ = nterm expression (10.17-23: )
Stack now 148 119 82 40 84 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 155
Next token is token ')' (10.24: )
Reducing stack by rule 77 (line 1397):
   $1 = nterm expression_list (10.11-14: )
   $2 = token ',' (10.15: )
   $3 = nterm expression (10.17-23: )
-> $$ = nterm expression_list (10.11-23: )
Stack now 82 40 84 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 119
Next token is token ')' (10.24: )
Shifting token ')' (10.24: )
Entering state 147
Reading a token: Next token is token ';' (10.25: )
Shifting token ';' (10.25: )
Entering state 154
Reducing stack by rule 43 (line 594):
   $1 = token IDENTIFIER (10.5-9: scanf)
   $2 = token '(' (10.10: )
   $3 = nterm expression_list (10.11-23: )
   $4 = token ')' (10.24: )
   $5 = token ';' (10.25: )
-> $$ = nterm procedure_call (10.5-25: )
Stack now 84 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 61
Reducing stack by rule 38 (line 474):
   $1 = nterm procedure_call (10.5-25: )
-> $$ = nterm statement (10.5-25: )
Stack now 84 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 88
Reducing stack by rule 32 (line 449):
   $1 = nterm statement_list (9.5-38: )
   $2 = nterm statement (10.5-25: )
-> $$ = nterm statement_list (9.5-10.25: )
Stack now 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 84
Reading a token: Next token is token '}' (11.3: )
Shifting token '}' (11.3: )
Entering state 121
Reducing stack by rule 34 (line 460):
   $1 = token '{' (8.33: )
   $2 = nterm statement_list (9.5-10.25: )
   $3 = token '}' (11.3: )
-> $$ = nterm statement (8.33-11.3: )
Stack now 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 161
Reducing stack by rule 84 (line 1432):
   $1 = token FOR (8.3-5: )
   $2 = token '(' (8.7: )
   $3 = nterm assignment_expression (8.8-12: )
   $4 = token ';' (8.13: )
   $5 = nterm expression (8.15-19: )
   $6 = token ';' (8.20: )
   $7 = nterm assignment_expression (8.22-30: )
   $8 = token ')' (8.31: )
   $9 = nterm statement (8.33-11.3: )
-> $$ = nterm iteration_statement (8.3-11.3: )
Stack now 86 52 24 17 14 8 0
Entering state 63
Reducing stack by rule 36 (line 466):
   $1 = nterm iteration_statement (8.3-11.3: )
-> $$ = nterm statement (8.3-11.3: )
Stack now 86 52 24 17 14 8 0
Entering state 88
Reducing stack by rule 32 (line 449):
   $1 = nterm statement_list (5.3-6.18: )
   $2 = nterm statement (8.3-11.3: )
-> $$ = nterm statement_list (5.3-11.3: )
Stack now 52 24 17 14 8 0
Entering state 86
Reading a token: Next token is token FOR (14.3-5: )
Shifting token FOR (14.3-5: )
Entering state 38
Reading a token: Next token is token '(' (14.7: )
Shifting token '(' (14.7: )
Entering state 80
Reading a token: Next token is token IDENTIFIER (14.8: i)
Shifting token IDENTIFIER (14.8: i)
Entering state 71
Reading a token: Next token is token '=' (14.10: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (14.8: i)
-> $$ = nterm primary_expression (14.8: )
Stack now 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (14.8: )
-> $$ = nterm postfix_expression (14.8: )
Stack now 80 38 86 52 24 17 14 8 0
Entering state 58
Next token is token '=' (14.10: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (14.8: )
-> $$ = nterm unary_expression (14.8: )
Stack now 80 38 86 52 24 17 14 8 0
Entering state 57
Next token is token '=' (14.10: )
Shifting token '=' (14.10: )
Entering state 90
Reading a token: Next token is token INT_CONSTANT (14.12: 1)
Shifting token INT_CONSTANT (14.12: 1)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (14.12: 1)
-> $$ = nterm primary_expression (14.12: )
Stack now 90 57 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (14.12: )
-> $$ = nterm postfix_expression (14.12: )
Stack now 90 57 80 38 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ';' (14.13: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (14.12: )
-> $$ = nterm unary_expression (14.12: )
Stack now 90 57 80 38 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (14.12: )
-> $$ = nterm multiplicative_expression (14.12: )
Stack now 90 57 80 38 86 52 24 17 14 8 0
Entering state 77
Next token is token ';' (14.13: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (14.12: )
-> $$ = nterm additive_expression (14.12: )
Stack now 90 57 80 38 86 52 24 17 14 8 0
Entering state 76
Next token is token ';' (14.13: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (14.12: )
-> $$ = nterm relational_expression (14.12: )
Stack now 90 57 80 38 86 52 24 17 14 8 0
Entering state 75
Next token is token ';' (14.13: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (14.12: )
-> $$ = nterm equality_expression (14.12: )
Stack now 90 57 80 38 86 52 24 17 14 8 0
Entering state 74
Next token is token ';' (14.13: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (14.12: )
-> $$ = nterm logical_and_expression (14.12: )
Stack now 90 57 80 38 86 52 24 17 14 8 0
Entering state 73
Next token is token ';' (14.13: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (14.12: )
-> $$ = nterm expression (14.12: )
Stack now 90 57 80 38 86 52 24 17 14 8 0
Entering state 123
Next token is token ';' (14.13: )
Reducing stack by rule 40 (line 506):
   $1 = nterm unary_expression (14.8: )
   $2 = token '=' (14.10: )
   $3 = nterm expression (14.12: )
-> $$ = nterm assignment_expression (14.8-12: )
Stack now 80 38 86 52 24 17 14 8 0
Entering state 115
Next token is token ';' (14.13: )
Shifting token ';' (14.13: )
Entering state 144
Reading a token: Next token is token IDENTIFIER (14.15: i)
Shifting token IDENTIFIER (14.15: i)
Entering state 71
Reading a token: Next token is token '<' (14.17: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (14.15: i)
-> $$ = nterm primary_expression (14.15: )
Stack now 144 115 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (14.15: )
-> $$ = nterm postfix_expression (14.15: )
Stack now 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Next token is token '<' (14.17: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (14.15: )
-> $$ = nterm unary_expression (14.15: )
Stack now 144 115 80 38 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (14.15: )
-> $$ = nterm multiplicative_expression (14.15: )
Stack now 144 115 80 38 86 52 24 17 14 8 0
Entering state 77
Next token is token '<' (14.17: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (14.15: )
-> $$ = nterm additive_expression (14.15: )
Stack now 144 115 80 38 86 52 24 17 14 8 0
Entering state 76
Next token is token '<' (14.17: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (14.15: )
-> $$ = nterm relational_expression (14.15: )
Stack now 144 115 80 38 86 52 24 17 14 8 0
Entering state 75
Next token is token '<' (14.17: )
Shifting token '<' (14.17: )
Entering state 106
Reading a token: Next token is token IDENTIFIER (14.19: n)
Shifting token IDENTIFIER (14.19: n)
Entering state 71
Reading a token: Next token is token ';' (14.20: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (14.19: n)
-> $$ = nterm primary_expression (14.19: )
Stack now 106 75 144 115 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (14.19: )
-> $$ = nterm postfix_expression (14.19: )
Stack now 106 75 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Next token is token ';' (14.20: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (14.19: )
-> $$ = nterm unary_expression (14.19: )
Stack now 106 75 144 115 80 38 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (14.19: )
-> $$ = nterm multiplicative_expression (14.19: )
Stack now 106 75 144 115 80 38 86 52 24 17 14 8 0
Entering state 77
Next token is token ';' (14.20: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (14.19: )
-> $$ = nterm additive_expression (14.19: )
Stack now 106 75 144 115 80 38 86 52 24 17 14 8 0
Entering state 135
Next token is token ';' (14.20: )
Reducing stack by rule 52 (line 779):
   $1 = nterm relational_expression (14.15: )
   $2 = token '<' (14.17: )
   $3 = nterm additive_expression (14.19: )
-> $$ = nterm relational_expression (14.15-19: )
Stack now 144 115 80 38 86 52 24 17 14 8 0
Entering state 75
Next token is token ';' (14.20: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (14.15-19: )
-> $$ = nterm equality_expression (14.15-19: )
Stack now 144 115 80 38 86 52 24 17 14 8 0
Entering state 74
Next token is token ';' (14.20: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (14.15-19: )
-> $$ = nterm logical_and_expression (14.15-19: )
Stack now 144 115 80 38 86 52 24 17 14 8 0
Entering state 73
Next token is token ';' (14.20: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (14.15-19: )
-> $$ = nterm expression (14.15-19: )
Stack now 144 115 80 38 86 52 24 17 14 8 0
Entering state 152
Next token is token ';' (14.20: )
Shifting token ';' (14.20: )
Entering state 156
Reading a token: Next token is token IDENTIFIER (14.22: i)
Shifting token IDENTIFIER (14.22: i)
Entering state 71
Reading a token: Next token is token '=' (14.24: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (14.22: i)
-> $$ = nterm primary_expression (14.22: )
Stack now 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (14.22: )
-> $$ = nterm postfix_expression (14.22: )
Stack now 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Next token is token '=' (14.24: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (14.22: )
-> $$ = nterm unary_expression (14.22: )
Stack now 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 57
Next token is token '=' (14.24: )
Shifting token '=' (14.24: )
Entering state 90
Reading a token: Next token is token IDENTIFIER (14.26: i)
Shifting token IDENTIFIER (14.26: i)
Entering state 71
Reading a token: Next token is token '+' (14.28: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (14.26: i)
-> $$ = nterm primary_expression (14.26: )
Stack now 90 57 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (14.26: )
-> $$ = nterm postfix_expression (14.26: )
Stack now 90 57 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Next token is token '+' (14.28: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (14.26: )
-> $$ = nterm unary_expression (14.26: )
Stack now 90 57 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (14.26: )
-> $$ = nterm multiplicative_expression (14.26: )
Stack now 90 57 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 77
Next token is token '+' (14.28: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (14.26: )
-> $$ = nterm additive_expression (14.26: )
Stack now 90 57 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 76
Next token is token '+' (14.28: )
Shifting token '+' (14.28: )
Entering state 110
Reading a token: Next token is token INT_CONSTANT (14.30: 1)
Shifting token INT_CONSTANT (14.30: 1)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (14.30: 1)
-> $$ = nterm primary_expression (14.30: )
Stack now 110 76 90 57 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (14.30: )
-> $$ = nterm postfix_expression (14.30: )
Stack now 110 76 90 57 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ')' (14.31: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (14.30: )
-> $$ = nterm unary_expression (14.30: )
Stack now 110 76 90 57 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (14.30: )
-> $$ = nterm multiplicative_expression (14.30: )
Stack now 110 76 90 57 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 139
Next token is token ')' (14.31: )
Reducing stack by rule 57 (line 954):
   $1 = nterm additive_expression (14.26: )
   $2 = token '+' (14.28: )
   $3 = nterm multiplicative_expression (14.30: )
-> $$ = nterm additive_expression (14.26-30: )
Stack now 90 57 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 76
Next token is token ')' (14.31: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (14.26-30: )
-> $$ = nterm relational_expression (14.26-30: )
Stack now 90 57 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 75
Next token is token ')' (14.31: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (14.26-30: )
-> $$ = nterm equality_expression (14.26-30: )
Stack now 90 57 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 74
Next token is token ')' (14.31: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (14.26-30: )
-> $$ = nterm logical_and_expression (14.26-30: )
Stack now 90 57 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 73
Next token is token ')' (14.31: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (14.26-30: )
-> $$ = nterm expression (14.26-30: )
Stack now 90 57 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 123
Next token is token ')' (14.31: )
Reducing stack by rule 40 (line 506):
   $1 = nterm unary_expression (14.22: )
   $2 = token '=' (14.24: )
   $3 = nterm expression (14.26-30: )
-> $$ = nterm assignment_expression (14.22-30: )
Stack now 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 158
Next token is token ')' (14.31: )
Shifting token ')' (14.31: )
Entering state 160
Reading a token: Next token is token '{' (14.33: )
Shifting token '{' (14.33: )
Entering state 45
Reading a token: Next token is token IF (15.5-6: )
Shifting token IF (15.5-6: )
Entering state 39
Reading a token: Next token is token '(' (15.8: )
Shifting token '(' (15.8: )
Entering state 81
Reading a token: Next token is token IDENTIFIER (15.9-11: arr)
Shifting token IDENTIFIER (15.9-11: arr)
Entering state 71
Reading a token: Next token is token '[' (15.12: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (15.9-11: arr)
-> $$ = nterm primary_expression (15.9-11: )
Stack now 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (15.9-11: )
-> $$ = nterm postfix_expression (15.9-11: )
Stack now 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Next token is token '[' (15.12: )
Shifting token '[' (15.12: )
Entering state 91
Reading a token: Next token is token INT_CONSTANT (15.13: 0)
Shifting token INT_CONSTANT (15.13: 0)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (15.13: 0)
-> $$ = nterm primary_expression (15.13: )
Stack now 91 58 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (15.13: )
-> $$ = nterm postfix_expression (15.13: )
Stack now 91 58 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ']' (15.14: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (15.13: )
-> $$ = nterm unary_expression (15.13: )
Stack now 91 58 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (15.13: )
-> $$ = nterm multiplicative_expression (15.13: )
Stack now 91 58 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 77
Next token is token ']' (15.14: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (15.13: )
-> $$ = nterm additive_expression (15.13: )
Stack now 91 58 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 76
Next token is token ']' (15.14: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (15.13: )
-> $$ = nterm relational_expression (15.13: )
Stack now 91 58 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 75
Next token is token ']' (15.14: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (15.13: )
-> $$ = nterm equality_expression (15.13: )
Stack now 91 58 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 74
Next token is token ']' (15.14: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (15.13: )
-> $$ = nterm logical_and_expression (15.13: )
Stack now 91 58 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 73
Next token is token ']' (15.14: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (15.13: )
-> $$ = nterm expression (15.13: )
Stack now 91 58 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 124
Next token is token ']' (15.14: )
Shifting token ']' (15.14: )
Entering state 149
Reducing stack by rule 65 (line 1197):
   $1 = nterm postfix_expression (15.9-11: )
   $2 = token '[' (15.12: )
   $3 = nterm expression (15.13: )
   $4 = token ']' (15.14: )
-> $$ = nterm postfix_expression (15.9-14: )
Stack now 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token '<' (15.16: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (15.9-14: )
-> $$ = nterm unary_expression (15.9-14: )
Stack now 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (15.9-14: )
-> $$ = nterm multiplicative_expression (15.9-14: )
Stack now 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 77
Next token is token '<' (15.16: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (15.9-14: )
-> $$ = nterm additive_expression (15.9-14: )
Stack now 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 76
Next token is token '<' (15.16: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (15.9-14: )
-> $$ = nterm relational_expression (15.9-14: )
Stack now 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 75
Next token is token '<' (15.16: )
Shifting token '<' (15.16: )
Entering state 106
Reading a token: Next token is token IDENTIFIER (15.18-20: arr)
Shifting token IDENTIFIER (15.18-20: arr)
Entering state 71
Reading a token: Next token is token '[' (15.21: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (15.18-20: arr)
-> $$ = nterm primary_expression (15.18-20: )
Stack now 106 75 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (15.18-20: )
-> $$ = nterm postfix_expression (15.18-20: )
Stack now 106 75 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Next token is token '[' (15.21: )
Shifting token '[' (15.21: )
Entering state 91
Reading a token: Next token is token IDENTIFIER (15.22: i)
Shifting token IDENTIFIER (15.22: i)
Entering state 71
Reading a token: Next token is token ']' (15.23: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (15.22: i)
-> $$ = nterm primary_expression (15.22: )
Stack now 91 58 106 75 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (15.22: )
-> $$ = nterm postfix_expression (15.22: )
Stack now 91 58 106 75 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Next token is token ']' (15.23: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (15.22: )
-> $$ = nterm unary_expression (15.22: )
Stack now 91 58 106 75 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (15.22: )
-> $$ = nterm multiplicative_expression (15.22: )
Stack now 91 58 106 75 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 77
Next token is token ']' (15.23: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (15.22: )
-> $$ = nterm additive_expression (15.22: )
Stack now 91 58 106 75 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 76
Next token is token ']' (15.23: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (15.22: )
-> $$ = nterm relational_expression (15.22: )
Stack now 91 58 106 75 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 75
Next token is token ']' (15.23: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (15.22: )
-> $$ = nterm equality_expression (15.22: )
Stack now 91 58 106 75 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 74
Next token is token ']' (15.23: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (15.22: )
-> $$ = nterm logical_and_expression (15.22: )
Stack now 91 58 106 75 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 73
Next token is token ']' (15.23: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (15.22: )
-> $$ = nterm expression (15.22: )
Stack now 91 58 106 75 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 124
Next token is token ']' (15.23: )
Shifting token ']' (15.23: )
Entering state 149
Reducing stack by rule 65 (line 1197):
   $1 = nterm postfix_expression (15.18-20: )
   $2 = token '[' (15.21: )
   $3 = nterm expression (15.22: )
   $4 = token ']' (15.23: )
-> $$ = nterm postfix_expression (15.18-23: )
Stack now 106 75 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ')' (15.24: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (15.18-23: )
-> $$ = nterm unary_expression (15.18-23: )
Stack now 106 75 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (15.18-23: )
-> $$ = nterm multiplicative_expression (15.18-23: )
Stack now 106 75 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 77
Next token is token ')' (15.24: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (15.18-23: )
-> $$ = nterm additive_expression (15.18-23: )
Stack now 106 75 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 135
Next token is token ')' (15.24: )
Reducing stack by rule 52 (line 779):
   $1 = nterm relational_expression (15.9-14: )
   $2 = token '<' (15.16: )
   $3 = nterm additive_expression (15.18-23: )
-> $$ = nterm relational_expression (15.9-23: )
Stack now 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 75
Next token is token ')' (15.24: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (15.9-23: )
-> $$ = nterm equality_expression (15.9-23: )
Stack now 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 74
Next token is token ')' (15.24: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (15.9-23: )
-> $$ = nterm logical_and_expression (15.9-23: )
Stack now 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 73
Next token is token ')' (15.24: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (15.9-23: )
-> $$ = nterm expression (15.9-23: )
Stack now 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 116
Next token is token ')' (15.24: )
Shifting token ')' (15.24: )
Entering state 145
Reading a token: Next token is token '{' (15.26: )
Shifting token '{' (15.26: )
Entering state 45
Reading a token: Next token is token IDENTIFIER (16.7-9: arr)
Shifting token IDENTIFIER (16.7-9: arr)
Entering state 40
Reading a token: Next token is token '[' (16.10: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (16.7-9: arr)
-> $$ = nterm primary_expression (16.7-9: )
Stack now 45 145 116 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (16.7-9: )
-> $$ = nterm postfix_expression (16.7-9: )
Stack now 45 145 116 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Next token is token '[' (16.10: )
Shifting token '[' (16.10: )
Entering state 91
Reading a token: Next token is token INT_CONSTANT (16.11: 0)
Shifting token INT_CONSTANT (16.11: 0)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (16.11: 0)
-> $$ = nterm primary_expression (16.11: )
Stack now 91 58 45 145 116 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (16.11: )
-> $$ = nterm postfix_expression (16.11: )
Stack now 91 58 45 145 116 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ']' (16.12: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (16.11: )
-> $$ = nterm unary_expression (16.11: )
Stack now 91 58 45 145 116 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (16.11: )
-> $$ = nterm multiplicative_expression (16.11: )
Stack now 91 58 45 145 116 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 77
Next token is token ']' (16.12: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (16.11: )
-> $$ = nterm additive_expression (16.11: )
Stack now 91 58 45 145 116 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 76
Next token is token ']' (16.12: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (16.11: )
-> $$ = nterm relational_expression (16.11: )
Stack now 91 58 45 145 116 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 75
Next token is token ']' (16.12: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (16.11: )
-> $$ = nterm equality_expression (16.11: )
Stack now 91 58 45 145 116 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 74
Next token is token ']' (16.12: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (16.11: )
-> $$ = nterm logical_and_expression (16.11: )
Stack now 91 58 45 145 116 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 73
Next token is token ']' (16.12: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (16.11: )
-> $$ = nterm expression (16.11: )
Stack now 91 58 45 145 116 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 124
Next token is token ']' (16.12: )
Shifting token ']' (16.12: )
Entering state 149
Reducing stack by rule 65 (line 1197):
   $1 = nterm postfix_expression (16.7-9: )
   $2 = token '[' (16.10: )
   $3 = nterm expression (16.11: )
   $4 = token ']' (16.12: )
-> $$ = nterm postfix_expression (16.7-12: )
Stack now 45 145 116 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token '=' (16.14: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (16.7-12: )
-> $$ = nterm unary_expression (16.7-12: )
Stack now 45 145 116 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 57
Next token is token '=' (16.14: )
Shifting token '=' (16.14: )
Entering state 90
Reading a token: Next token is token IDENTIFIER (16.16-18: arr)
Shifting token IDENTIFIER (16.16-18: arr)
Entering state 71
Reading a token: Next token is token '[' (16.19: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (16.16-18: arr)
-> $$ = nterm primary_expression (16.16-18: )
Stack now 90 57 45 145 116 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (16.16-18: )
-> $$ = nterm postfix_expression (16.16-18: )
Stack now 90 57 45 145 116 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Next token is token '[' (16.19: )
Shifting token '[' (16.19: )
Entering state 91
Reading a token: Next token is token IDENTIFIER (16.20: i)
Shifting token IDENTIFIER (16.20: i)
Entering state 71
Reading a token: Next token is token ']' (16.21: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (16.20: i)
-> $$ = nterm primary_expression (16.20: )
Stack now 91 58 90 57 45 145 116 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (16.20: )
-> $$ = nterm postfix_expression (16.20: )
Stack now 91 58 90 57 45 145 116 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Next token is token ']' (16.21: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (16.20: )
-> $$ = nterm unary_expression (16.20: )
Stack now 91 58 90 57 45 145 116 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (16.20: )
-> $$ = nterm multiplicative_expression (16.20: )
Stack now 91 58 90 57 45 145 116 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 77
Next token is token ']' (16.21: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (16.20: )
-> $$ = nterm additive_expression (16.20: )
Stack now 91 58 90 57 45 145 116 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 76
Next token is token ']' (16.21: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (16.20: )
-> $$ = nterm relational_expression (16.20: )
Stack now 91 58 90 57 45 145 116 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 75
Next token is token ']' (16.21: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (16.20: )
-> $$ = nterm equality_expression (16.20: )
Stack now 91 58 90 57 45 145 116 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 74
Next token is token ']' (16.21: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (16.20: )
-> $$ = nterm logical_and_expression (16.20: )
Stack now 91 58 90 57 45 145 116 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 73
Next token is token ']' (16.21: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (16.20: )
-> $$ = nterm expression (16.20: )
Stack now 91 58 90 57 45 145 116 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 124
Next token is token ']' (16.21: )
Shifting token ']' (16.21: )
Entering state 149
Reducing stack by rule 65 (line 1197):
   $1 = nterm postfix_expression (16.16-18: )
   $2 = token '[' (16.19: )
   $3 = nterm expression (16.20: )
   $4 = token ']' (16.21: )
-> $$ = nterm postfix_expression (16.16-21: )
Stack now 90 57 45 145 116 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ';' (16.22: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (16.16-21: )
-> $$ = nterm unary_expression (16.16-21: )
Stack now 90 57 45 145 116 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (16.16-21: )
-> $$ = nterm multiplicative_expression (16.16-21: )
Stack now 90 57 45 145 116 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 77
Next token is token ';' (16.22: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (16.16-21: )
-> $$ = nterm additive_expression (16.16-21: )
Stack now 90 57 45 145 116 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 76
Next token is token ';' (16.22: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (16.16-21: )
-> $$ = nterm relational_expression (16.16-21: )
Stack now 90 57 45 145 116 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 75
Next token is token ';' (16.22: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (16.16-21: )
-> $$ = nterm equality_expression (16.16-21: )
Stack now 90 57 45 145 116 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 74
Next token is token ';' (16.22: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (16.16-21: )
-> $$ = nterm logical_and_expression (16.16-21: )
Stack now 90 57 45 145 116 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 73
Next token is token ';' (16.22: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (16.16-21: )
-> $$ = nterm expression (16.16-21: )
Stack now 90 57 45 145 116 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 123
Next token is token ';' (16.22: )
Reducing stack by rule 40 (line 506):
   $1 = nterm unary_expression (16.7-12: )
   $2 = token '=' (16.14: )
   $3 = nterm expression (16.16-21: )
-> $$ = nterm assignment_expression (16.7-21: )
Stack now 45 145 116 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 56
Next token is token ';' (16.22: )
Shifting token ';' (16.22: )
Entering state 89
Reducing stack by rule 41 (line 559):
   $1 = nterm assignment_expression (16.7-21: )
   $2 = token ';' (16.22: )
-> $$ = nterm assignment_statement (16.7-22: )
Stack now 45 145 116 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 54
Reducing stack by rule 37 (line 469):
   $1 = nterm assignment_statement (16.7-22: )
-> $$ = nterm statement (16.7-22: )
Stack now 45 145 116 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 53
Reducing stack by rule 31 (line 444):
   $1 = nterm statement (16.7-22: )
-> $$ = nterm statement_list (16.7-22: )
Stack now 45 145 116 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 84
Reading a token: Next token is token '}' (17.5: )
Shifting token '}' (17.5: )
Entering state 121
Reducing stack by rule 34 (line 460):
   $1 = token '{' (15.26: )
   $2 = nterm statement_list (16.7-22: )
   $3 = token '}' (17.5: )
-> $$ = nterm statement (15.26-17.5: )
Stack now 145 116 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 153
Reading a token: Next token is token ELSE (18.5-8: )
Shifting token ELSE (18.5-8: )
Entering state 157
Reading a token: Next token is token ';' (18.10: )
Shifting token ';' (18.10: )
Entering state 48
Reducing stack by rule 33 (line 457):
   $1 = token ';' (18.10: )
-> $$ = nterm statement (18.10: )
Stack now 157 153 145 116 81 39 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 159
Reducing stack by rule 82 (line 1419):
   $1 = token IF (15.5-6: )
   $2 = token '(' (15.8: )
   $3 = nterm expression (15.9-23: )
   $4 = token ')' (15.24: )
   $5 = nterm statement (15.26-17.5: )
   $6 = token ELSE (18.5-8: )
   $7 = nterm statement (18.10: )
-> $$ = nterm selection_statement (15.5-18.10: )
Stack now 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 62
Reducing stack by rule 35 (line 463):
   $1 = nterm selection_statement (15.5-18.10: )
-> $$ = nterm statement (15.5-18.10: )
Stack now 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 53
Reducing stack by rule 31 (line 444):
   $1 = nterm statement (15.5-18.10: )
-> $$ = nterm statement_list (15.5-18.10: )
Stack now 45 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 84
Reading a token: Next token is token '}' (19.3: )
Shifting token '}' (19.3: )
Entering state 121
Reducing stack by rule 34 (line 460):
   $1 = token '{' (14.33: )
   $2 = nterm statement_list (15.5-18.10: )
   $3 = token '}' (19.3: )
-> $$ = nterm statement (14.33-19.3: )
Stack now 160 158 156 152 144 115 80 38 86 52 24 17 14 8 0
Entering state 161
Reducing stack by rule 84 (line 1432):
   $1 = token FOR (14.3-5: )
   $2 = token '(' (14.7: )
   $3 = nterm assignment_expression (14.8-12: )
   $4 = token ';' (14.13: )
   $5 = nterm expression (14.15-19: )
   $6 = token ';' (14.20: )
   $7 = nterm assignment_expression (14.22-30: )
   $8 = token ')' (14.31: )
   $9 = nterm statement (14.33-19.3: )
-> $$ = nterm iteration_statement (14.3-19.3: )
Stack now 86 52 24 17 14 8 0
Entering state 63
Reducing stack by rule 36 (line 466):
   $1 = nterm iteration_statement (14.3-19.3: )
-> $$ = nterm statement (14.3-19.3: )
Stack now 86 52 24 17 14 8 0
Entering state 88
Reducing stack by rule 32 (line 449):
   $1 = nterm statement_list (5.3-11.3: )
   $2 = nterm statement (14.3-19.3: )
-> $$ = nterm statement_list (5.3-19.3: )
Stack now 52 24 17 14 8 0
Entering state 86
Reading a token: Next token is token IDENTIFIER (21.3-8: printf)
Shifting token IDENTIFIER (21.3-8: printf)
Entering state 40
Reading a token: Next token is token '(' (21.9: )
Shifting token '(' (21.9: )
Entering state 82
Reading a token: Next token is token STRING_LITERAL (21.10-31: "Largest element = %f")
Shifting token STRING_LITERAL (21.10-31: "Largest element = %f")
Entering state 43
Reducing stack by rule 74 (line 1382):
   $1 = token STRING_LITERAL (21.10-31: "Largest element = %f")
-> $$ = nterm primary_expression (21.10-31: )
Stack now 82 40 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (21.10-31: )
-> $$ = nterm postfix_expression (21.10-31: )
Stack now 82 40 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ',' (21.32: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (21.10-31: )
-> $$ = nterm unary_expression (21.10-31: )
Stack now 82 40 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (21.10-31: )
-> $$ = nterm multiplicative_expression (21.10-31: )
Stack now 82 40 86 52 24 17 14 8 0
Entering state 77
Next token is token ',' (21.32: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (21.10-31: )
-> $$ = nterm additive_expression (21.10-31: )
Stack now 82 40 86 52 24 17 14 8 0
Entering state 76
Next token is token ',' (21.32: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (21.10-31: )
-> $$ = nterm relational_expression (21.10-31: )
Stack now 82 40 86 52 24 17 14 8 0
Entering state 75
Next token is token ',' (21.32: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (21.10-31: )
-> $$ = nterm equality_expression (21.10-31: )
Stack now 82 40 86 52 24 17 14 8 0
Entering state 74
Next token is token ',' (21.32: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (21.10-31: )
-> $$ = nterm logical_and_expression (21.10-31: )
Stack now 82 40 86 52 24 17 14 8 0
Entering state 73
Next token is token ',' (21.32: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (21.10-31: )
-> $$ = nterm expression (21.10-31: )
Stack now 82 40 86 52 24 17 14 8 0
Entering state 118
Next token is token ',' (21.32: )
Reducing stack by rule 76 (line 1393):
   $1 = nterm expression (21.10-31: )
-> $$ = nterm expression_list (21.10-31: )
Stack now 82 40 86 52 24 17 14 8 0
Entering state 119
Next token is token ',' (21.32: )
Shifting token ',' (21.32: )
Entering state 148
Reading a token: Next token is token IDENTIFIER (21.34-36: arr)
Shifting token IDENTIFIER (21.34-36: arr)
Entering state 71
Reading a token: Next token is token '[' (21.37: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (21.34-36: arr)
-> $$ = nterm primary_expression (21.34-36: )
Stack now 148 119 82 40 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (21.34-36: )
-> $$ = nterm postfix_expression (21.34-36: )
Stack now 148 119 82 40 86 52 24 17 14 8 0
Entering state 58
Next token is token '[' (21.37: )
Shifting token '[' (21.37: )
Entering state 91
Reading a token: Next token is token INT_CONSTANT (21.38: 0)
Shifting token INT_CONSTANT (21.38: 0)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (21.38: 0)
-> $$ = nterm primary_expression (21.38: )
Stack now 91 58 148 119 82 40 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (21.38: )
-> $$ = nterm postfix_expression (21.38: )
Stack now 91 58 148 119 82 40 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ']' (21.39: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (21.38: )
-> $$ = nterm unary_expression (21.38: )
Stack now 91 58 148 119 82 40 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (21.38: )
-> $$ = nterm multiplicative_expression (21.38: )
Stack now 91 58 148 119 82 40 86 52 24 17 14 8 0
Entering state 77
Next token is token ']' (21.39: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (21.38: )
-> $$ = nterm additive_expression (21.38: )
Stack now 91 58 148 119 82 40 86 52 24 17 14 8 0
Entering state 76
Next token is token ']' (21.39: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (21.38: )
-> $$ = nterm relational_expression (21.38: )
Stack now 91 58 148 119 82 40 86 52 24 17 14 8 0
Entering state 75
Next token is token ']' (21.39: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (21.38: )
-> $$ = nterm equality_expression (21.38: )
Stack now 91 58 148 119 82 40 86 52 24 17 14 8 0
Entering state 74
Next token is token ']' (21.39: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (21.38: )
-> $$ = nterm logical_and_expression (21.38: )
Stack now 91 58 148 119 82 40 86 52 24 17 14 8 0
Entering state 73
Next token is token ']' (21.39: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (21.38: )
-> $$ = nterm expression (21.38: )
Stack now 91 58 148 119 82 40 86 52 24 17 14 8 0
Entering state 124
Next token is token ']' (21.39: )
Shifting token ']' (21.39: )
Entering state 149
Reducing stack by rule 65 (line 1197):
   $1 = nterm postfix_expression (21.34-36: )
   $2 = token '[' (21.37: )
   $3 = nterm expression (21.38: )
   $4 = token ']' (21.39: )
-> $$ = nterm postfix_expression (21.34-39: )
Stack now 148 119 82 40 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ')' (21.40: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (21.34-39: )
-> $$ = nterm unary_expression (21.34-39: )
Stack now 148 119 82 40 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (21.34-39: )
-> $$ = nterm multiplicative_expression (21.34-39: )
Stack now 148 119 82 40 86 52 24 17 14 8 0
Entering state 77
Next token is token ')' (21.40: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (21.34-39: )
-> $$ = nterm additive_expression (21.34-39: )
Stack now 148 119 82 40 86 52 24 17 14 8 0
Entering state 76
Next token is token ')' (21.40: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (21.34-39: )
-> $$ = nterm relational_expression (21.34-39: )
Stack now 148 119 82 40 86 52 24 17 14 8 0
Entering state 75
Next token is token ')' (21.40: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (21.34-39: )
-> $$ = nterm equality_expression (21.34-39: )
Stack now 148 119 82 40 86 52 24 17 14 8 0
Entering state 74
Next token is token ')' (21.40: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (21.34-39: )
-> $$ = nterm logical_and_expression (21.34-39: )
Stack now 148 119 82 40 86 52 24 17 14 8 0
Entering state 73
Next token is token ')' (21.40: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (21.34-39: )
-> $$ = nterm expression (21.34-39: )
Stack now 148 119 82 40 86 52 24 17 14 8 0
Entering state 155
Next token is token ')' (21.40: )
Reducing stack by rule 77 (line 1397):
   $1 = nterm expression_list (21.10-31: )
   $2 = token ',' (21.32: )
   $3 = nterm expression (21.34-39: )
-> $$ = nterm expression_list (21.10-39: )
Stack now 82 40 86 52 24 17 14 8 0
Entering state 119
Next token is token ')' (21.40: )
Shifting token ')' (21.40: )
Entering state 147
Reading a token: Next token is token ';' (21.41: )
Shifting token ';' (21.41: )
Entering state 154
Reducing stack by rule 43 (line 594):
   $1 = token IDENTIFIER (21.3-8: printf)
   $2 = token '(' (21.9: )
   $3 = nterm expression_list (21.10-39: )
   $4 = token ')' (21.40: )
   $5 = token ';' (21.41: )
-> $$ = nterm procedure_call (21.3-41: )
Stack now 86 52 24 17 14 8 0
Entering state 61
Reducing stack by rule 38 (line 474):
   $1 = nterm procedure_call (21.3-41: )
-> $$ = nterm statement (21.3-41: )
Stack now 86 52 24 17 14 8 0
Entering state 88
Reducing stack by rule 32 (line 449):
   $1 = nterm statement_list (5.3-19.3: )
   $2 = nterm statement (21.3-41: )
-> $$ = nterm statement_list (5.3-21.41: )
Stack now 52 24 17 14 8 0
Entering state 86
Reading a token: Next token is token RETURN (23.3-8: )
Shifting token RETURN (23.3-8: )
Entering state 36
Reading a token: Next token is token INT_CONSTANT (23.10: 0)
Shifting token INT_CONSTANT (23.10: 0)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (23.10: 0)
-> $$ = nterm primary_expression (23.10: )
Stack now 36 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (23.10: )
-> $$ = nterm postfix_expression (23.10: )
Stack now 36 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ';' (23.11: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (23.10: )
-> $$ = nterm unary_expression (23.10: )
Stack now 36 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (23.10: )
-> $$ = nterm multiplicative_expression (23.10: )
Stack now 36 86 52 24 17 14 8 0
Entering state 77
Next token is token ';' (23.11: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (23.10: )
-> $$ = nterm additive_expression (23.10: )
Stack now 36 86 52 24 17 14 8 0
Entering state 76
Next token is token ';' (23.11: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (23.10: )
-> $$ = nterm relational_expression (23.10: )
Stack now 36 86 52 24 17 14 8 0
Entering state 75
Next token is token ';' (23.11: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (23.10: )
-> $$ = nterm equality_expression (23.10: )
Stack now 36 86 52 24 17 14 8 0
Entering state 74
Next token is token ';' (23.11: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (23.10: )
-> $$ = nterm logical_and_expression (23.10: )
Stack now 36 86 52 24 17 14 8 0
Entering state 73
Next token is token ';' (23.11: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (23.10: )
-> $$ = nterm expression (23.10: )
Stack now 36 86 52 24 17 14 8 0
Entering state 72
Next token is token ';' (23.11: )
Shifting token ';' (23.11: )
Entering state 102
Reducing stack by rule 39 (line 477):
   $1 = token RETURN (23.3-8: )
   $2 = nterm expression (23.10: )
   $3 = token ';' (23.11: )
-> $$ = nterm statement (23.3-11: )
Stack now 86 52 24 17 14 8 0
Entering state 88
Reducing stack by rule 32 (line 449):
   $1 = nterm statement_list (5.3-21.41: )
   $2 = nterm statement (23.3-11: )
-> $$ = nterm statement_list (5.3-23.11: )
Stack now 52 24 17 14 8 0
Entering state 86
Reading a token: Next token is token '}' (24.1: )
Shifting token '}' (24.1: )
Entering state 122
Reducing stack by rule 30 (line 436):
   $1 = token '{' (2.12: )
   $2 = nterm declaration_list (3.3-4.17: )
   $3 = nterm statement_list (5.3-23.11: )
   $4 = token '}' (24.1: )
-> $$ = nterm compound_statement (2.12-24.1: )
Stack now 17 14 8 0
Entering state 25
Reducing stack by rule 8 (line 158):
   $1 = nterm type_specifier (2.1-3: )
   $2 = nterm fun_declarator (2.5-10: )
   $3 = nterm $@2 (2.11: )
   $4 = nterm compound_statement (2.12-24.1: )
-> $$ = nterm function_definition (2.1-24.1: )
Stack now 0
Entering state 7
Reducing stack by rule 2 (line 126):
   $1 = nterm function_definition (2.1-24.1: )
-> $$ = nterm translation_unit (2.1-24.1: )
Stack now 0
Entering state 5
Reading a token: Next token is token $end (24.2-25.0: )
Shifting token $end (24.2-25.0: )
Entering state 10
Cleanup: popping token $end (24.2-25.0: )
Cleanup: popping nterm translation_unit (2.1-24.1: )
