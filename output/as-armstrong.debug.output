Starting parse
Entering state 0
Reading a token: Next token is token STRUCT (1.1-6: )
Shifting token STRUCT (1.1-6: )
Entering state 4
Reading a token: Next token is token IDENTIFIER (1.8-13: person)
Shifting token IDENTIFIER (1.8-13: person)
Entering state 9
Reading a token: Next token is token '{' (1.15: )
Reducing stack by rule 5 (line 138):
-> $$ = nterm $@1 (1.14: )
Stack now 9 4 0
Entering state 15
Next token is token '{' (1.15: )
Shifting token '{' (1.15: )
Entering state 18
Reading a token: Next token is token INT (2.4-6: )
Shifting token INT (2.4-6: )
Entering state 2
Reducing stack by rule 10 (line 228):
   $1 = token INT (2.4-6: )
-> $$ = nterm type_specifier (2.4-6: )
Stack now 18 15 9 4 0
Entering state 26
Reading a token: Next token is token '*' (2.8: )
Shifting token '*' (2.8: )
Entering state 31
Reading a token: Next token is token '*' (2.9: )
Shifting token '*' (2.9: )
Entering state 31
Reading a token: Next token is token IDENTIFIER (2.10-11: id)
Shifting token IDENTIFIER (2.10-11: id)
Entering state 30
Reducing stack by rule 18 (line 275):
   $1 = token IDENTIFIER (2.10-11: id)
-> $$ = nterm declarator_arr (2.10-11: )
Stack now 31 31 26 18 15 9 4 0
Entering state 32
Reading a token: Next token is token '[' (2.12: )
Shifting token '[' (2.12: )
Entering state 69
Reading a token: Next token is token INT_CONSTANT (2.13: 2)
Shifting token INT_CONSTANT (2.13: 2)
Entering state 99
Reading a token: Next token is token ']' (2.14: )
Shifting token ']' (2.14: )
Entering state 128
Reducing stack by rule 19 (line 278):
   $1 = nterm declarator_arr (2.10-11: )
   $2 = token '[' (2.12: )
   $3 = token INT_CONSTANT (2.13: 2)
   $4 = token ']' (2.14: )
-> $$ = nterm declarator_arr (2.10-14: )
Stack now 31 31 26 18 15 9 4 0
Entering state 32
Reading a token: Next token is token '[' (2.15: )
Shifting token '[' (2.15: )
Entering state 69
Reading a token: Next token is token INT_CONSTANT (2.16: 3)
Shifting token INT_CONSTANT (2.16: 3)
Entering state 99
Reading a token: Next token is token ']' (2.17: )
Shifting token ']' (2.17: )
Entering state 128
Reducing stack by rule 19 (line 278):
   $1 = nterm declarator_arr (2.10-14: )
   $2 = token '[' (2.15: )
   $3 = token INT_CONSTANT (2.16: 3)
   $4 = token ']' (2.17: )
-> $$ = nterm declarator_arr (2.10-17: )
Stack now 31 31 26 18 15 9 4 0
Entering state 32
Reading a token: Next token is token ';' (2.18: )
Reducing stack by rule 20 (line 294):
   $1 = nterm declarator_arr (2.10-17: )
-> $$ = nterm declarator (2.10-17: )
Stack now 31 31 26 18 15 9 4 0
Entering state 68
Reducing stack by rule 21 (line 297):
   $1 = token '*' (2.9: )
   $2 = nterm declarator (2.10-17: )
-> $$ = nterm declarator (2.9-17: )
Stack now 31 26 18 15 9 4 0
Entering state 68
Reducing stack by rule 21 (line 297):
   $1 = token '*' (2.8: )
   $2 = nterm declarator (2.9-17: )
-> $$ = nterm declarator (2.8-17: )
Stack now 26 18 15 9 4 0
Entering state 64
Reducing stack by rule 25 (line 414):
   $1 = nterm declarator (2.8-17: )
-> $$ = nterm declarator_list (2.8-17: )
Stack now 26 18 15 9 4 0
Entering state 65
Next token is token ';' (2.18: )
Shifting token ';' (2.18: )
Entering state 97
Reducing stack by rule 24 (line 408):
   $1 = nterm type_specifier (2.4-6: )
   $2 = nterm declarator_list (2.8-17: )
   $3 = token ';' (2.18: )
-> $$ = nterm declaration (2.4-18: )
Stack now 18 15 9 4 0
Entering state 27
Reducing stack by rule 22 (line 304):
   $1 = nterm declaration (2.4-18: )
-> $$ = nterm declaration_list (2.4-18: )
Stack now 18 15 9 4 0
Entering state 28
Reading a token: Next token is token FLOAT (3.4-8: )
Shifting token FLOAT (3.4-8: )
Entering state 3
Reducing stack by rule 11 (line 231):
   $1 = token FLOAT (3.4-8: )
-> $$ = nterm type_specifier (3.4-8: )
Stack now 28 18 15 9 4 0
Entering state 26
Reading a token: Next token is token IDENTIFIER (3.10-15: weight)
Shifting token IDENTIFIER (3.10-15: weight)
Entering state 30
Reducing stack by rule 18 (line 275):
   $1 = token IDENTIFIER (3.10-15: weight)
-> $$ = nterm declarator_arr (3.10-15: )
Stack now 26 28 18 15 9 4 0
Entering state 32
Reading a token: Next token is token ';' (3.16: )
Reducing stack by rule 20 (line 294):
   $1 = nterm declarator_arr (3.10-15: )
-> $$ = nterm declarator (3.10-15: )
Stack now 26 28 18 15 9 4 0
Entering state 64
Reducing stack by rule 25 (line 414):
   $1 = nterm declarator (3.10-15: )
-> $$ = nterm declarator_list (3.10-15: )
Stack now 26 28 18 15 9 4 0
Entering state 65
Next token is token ';' (3.16: )
Shifting token ';' (3.16: )
Entering state 97
Reducing stack by rule 24 (line 408):
   $1 = nterm type_specifier (3.4-8: )
   $2 = nterm declarator_list (3.10-15: )
   $3 = token ';' (3.16: )
-> $$ = nterm declaration (3.4-16: )
Stack now 28 18 15 9 4 0
Entering state 67
Reducing stack by rule 23 (line 356):
   $1 = nterm declaration_list (2.4-18: )
   $2 = nterm declaration (3.4-16: )
-> $$ = nterm declaration_list (2.4-3.16: )
Stack now 18 15 9 4 0
Entering state 28
Reading a token: Next token is token INT (4.4-6: )
Shifting token INT (4.4-6: )
Entering state 2
Reducing stack by rule 10 (line 228):
   $1 = token INT (4.4-6: )
-> $$ = nterm type_specifier (4.4-6: )
Stack now 28 18 15 9 4 0
Entering state 26
Reading a token: Next token is token IDENTIFIER (4.8-10: age)
Shifting token IDENTIFIER (4.8-10: age)
Entering state 30
Reducing stack by rule 18 (line 275):
   $1 = token IDENTIFIER (4.8-10: age)
-> $$ = nterm declarator_arr (4.8-10: )
Stack now 26 28 18 15 9 4 0
Entering state 32
Reading a token: Next token is token ';' (4.11: )
Reducing stack by rule 20 (line 294):
   $1 = nterm declarator_arr (4.8-10: )
-> $$ = nterm declarator (4.8-10: )
Stack now 26 28 18 15 9 4 0
Entering state 64
Reducing stack by rule 25 (line 414):
   $1 = nterm declarator (4.8-10: )
-> $$ = nterm declarator_list (4.8-10: )
Stack now 26 28 18 15 9 4 0
Entering state 65
Next token is token ';' (4.11: )
Shifting token ';' (4.11: )
Entering state 97
Reducing stack by rule 24 (line 408):
   $1 = nterm type_specifier (4.4-6: )
   $2 = nterm declarator_list (4.8-10: )
   $3 = token ';' (4.11: )
-> $$ = nterm declaration (4.4-11: )
Stack now 28 18 15 9 4 0
Entering state 67
Reducing stack by rule 23 (line 356):
   $1 = nterm declaration_list (2.4-3.16: )
   $2 = nterm declaration (4.4-11: )
-> $$ = nterm declaration_list (2.4-4.11: )
Stack now 18 15 9 4 0
Entering state 28
Reading a token: Next token is token '}' (5.1: )
Shifting token '}' (5.1: )
Entering state 66
Reading a token: Next token is token ';' (5.2: )
Shifting token ';' (5.2: )
Entering state 98
Reducing stack by rule 6 (line 137):
   $1 = token STRUCT (1.1-6: )
   $2 = token IDENTIFIER (1.8-13: person)
   $3 = nterm $@1 (1.14: )
   $4 = token '{' (1.15: )
   $5 = nterm declaration_list (2.4-4.11: )
   $6 = token '}' (5.1: )
   $7 = token ';' (5.2: )
-> $$ = nterm struct_specifier (1.1-5.2: )
Stack now 0
Entering state 6
Reducing stack by rule 1 (line 122):
   $1 = nterm struct_specifier (1.1-5.2: )
-> $$ = nterm translation_unit (1.1-5.2: )
Stack now 0
Entering state 5
Reading a token: Next token is token INT (7.1-3: )
Shifting token INT (7.1-3: )
Entering state 2
Reducing stack by rule 10 (line 228):
   $1 = token INT (7.1-3: )
-> $$ = nterm type_specifier (7.1-3: )
Stack now 5 0
Entering state 8
Reading a token: Next token is token IDENTIFIER (7.5-7: mod)
Shifting token IDENTIFIER (7.5-7: mod)
Entering state 13
Reading a token: Next token is token '(' (7.8: )
Shifting token '(' (7.8: )
Entering state 16
Reading a token: Next token is token INT (7.9-11: )
Shifting token INT (7.9-11: )
Entering state 2
Reducing stack by rule 10 (line 228):
   $1 = token INT (7.9-11: )
-> $$ = nterm type_specifier (7.9-11: )
Stack now 16 13 8 5 0
Entering state 21
Reading a token: Next token is token IDENTIFIER (7.13: a)
Shifting token IDENTIFIER (7.13: a)
Entering state 30
Reducing stack by rule 18 (line 275):
   $1 = token IDENTIFIER (7.13: a)
-> $$ = nterm declarator_arr (7.13: )
Stack now 21 16 13 8 5 0
Entering state 32
Reading a token: Next token is token ',' (7.14: )
Reducing stack by rule 20 (line 294):
   $1 = nterm declarator_arr (7.13: )
-> $$ = nterm declarator (7.13: )
Stack now 21 16 13 8 5 0
Entering state 33
Reducing stack by rule 17 (line 265):
   $1 = nterm type_specifier (7.9-11: )
   $2 = nterm declarator (7.13: )
-> $$ = nterm parameter_declaration (7.9-13: )
Stack now 16 13 8 5 0
Entering state 23
Reducing stack by rule 15 (line 250):
   $1 = nterm parameter_declaration (7.9-13: )
-> $$ = nterm parameter_list (7.9-13: )
Stack now 16 13 8 5 0
Entering state 22
Next token is token ',' (7.14: )
Shifting token ',' (7.14: )
Entering state 35
Reading a token: Next token is token INT (7.16-18: )
Shifting token INT (7.16-18: )
Entering state 2
Reducing stack by rule 10 (line 228):
   $1 = token INT (7.16-18: )
-> $$ = nterm type_specifier (7.16-18: )
Stack now 35 22 16 13 8 5 0
Entering state 21
Reading a token: Next token is token IDENTIFIER (7.20: b)
Shifting token IDENTIFIER (7.20: b)
Entering state 30
Reducing stack by rule 18 (line 275):
   $1 = token IDENTIFIER (7.20: b)
-> $$ = nterm declarator_arr (7.20: )
Stack now 21 35 22 16 13 8 5 0
Entering state 32
Reading a token: Next token is token ')' (7.21: )
Reducing stack by rule 20 (line 294):
   $1 = nterm declarator_arr (7.20: )
-> $$ = nterm declarator (7.20: )
Stack now 21 35 22 16 13 8 5 0
Entering state 33
Reducing stack by rule 17 (line 265):
   $1 = nterm type_specifier (7.16-18: )
   $2 = nterm declarator (7.20: )
-> $$ = nterm parameter_declaration (7.16-20: )
Stack now 35 22 16 13 8 5 0
Entering state 70
Reducing stack by rule 16 (line 256):
   $1 = nterm parameter_list (7.9-13: )
   $2 = token ',' (7.14: )
   $3 = nterm parameter_declaration (7.16-20: )
-> $$ = nterm parameter_list (7.9-20: )
Stack now 16 13 8 5 0
Entering state 22
Next token is token ')' (7.21: )
Shifting token ')' (7.21: )
Entering state 34
Reducing stack by rule 13 (line 240):
   $1 = token IDENTIFIER (7.5-7: mod)
   $2 = token '(' (7.8: )
   $3 = nterm parameter_list (7.9-20: )
   $4 = token ')' (7.21: )
-> $$ = nterm fun_declarator (7.5-21: )
Stack now 8 5 0
Entering state 14
Reducing stack by rule 7 (line 159):
-> $$ = nterm $@2 (7.22: )
Stack now 14 8 5 0
Entering state 17
Reading a token: Next token is token '{' (8.1: )
Shifting token '{' (8.1: )
Entering state 24
Reading a token: Next token is token '}' (10.1: )
Shifting token '}' (10.1: )
Entering state 46
Reducing stack by rule 27 (line 426):
   $1 = token '{' (8.1: )
   $2 = token '}' (10.1: )
-> $$ = nterm compound_statement (8.1-10.1: )
Stack now 17 14 8 5 0
Entering state 25
Reducing stack by rule 8 (line 158):
   $1 = nterm type_specifier (7.1-3: )
   $2 = nterm fun_declarator (7.5-21: )
   $3 = nterm $@2 (7.22: )
   $4 = nterm compound_statement (8.1-10.1: )
-> $$ = nterm function_definition (7.1-10.1: )
Stack now 5 0
Entering state 12
Reducing stack by rule 4 (line 130):
   $1 = nterm translation_unit (1.1-5.2: )
   $2 = nterm function_definition (7.1-10.1: )
-> $$ = nterm translation_unit (1.1-10.1: )
Stack now 0
Entering state 5
Reading a token: Next token is token INT (11.1-3: )
Shifting token INT (11.1-3: )
Entering state 2
Reducing stack by rule 10 (line 228):
   $1 = token INT (11.1-3: )
-> $$ = nterm type_specifier (11.1-3: )
Stack now 5 0
Entering state 8
Reading a token: Next token is token IDENTIFIER (11.5-8: main)
Shifting token IDENTIFIER (11.5-8: main)
Entering state 13
Reading a token: Next token is token '(' (11.9: )
Shifting token '(' (11.9: )
Entering state 16
Reading a token: Next token is token ')' (11.10: )
Shifting token ')' (11.10: )
Entering state 20
Reducing stack by rule 14 (line 244):
   $1 = token IDENTIFIER (11.5-8: main)
   $2 = token '(' (11.9: )
   $3 = token ')' (11.10: )
-> $$ = nterm fun_declarator (11.5-10: )
Stack now 8 5 0
Entering state 14
Reducing stack by rule 7 (line 159):
-> $$ = nterm $@2 (11.11: )
Stack now 14 8 5 0
Entering state 17
Reading a token: Next token is token '{' (11.12: )
Shifting token '{' (11.12: )
Entering state 24
Reading a token: Next token is token INT (12.5-7: )
Shifting token INT (12.5-7: )
Entering state 2
Reducing stack by rule 10 (line 228):
   $1 = token INT (12.5-7: )
-> $$ = nterm type_specifier (12.5-7: )
Stack now 24 17 14 8 5 0
Entering state 26
Reading a token: Next token is token IDENTIFIER (12.9-11: num)
Shifting token IDENTIFIER (12.9-11: num)
Entering state 30
Reducing stack by rule 18 (line 275):
   $1 = token IDENTIFIER (12.9-11: num)
-> $$ = nterm declarator_arr (12.9-11: )
Stack now 26 24 17 14 8 5 0
Entering state 32
Reading a token: Next token is token ',' (12.12: )
Reducing stack by rule 20 (line 294):
   $1 = nterm declarator_arr (12.9-11: )
-> $$ = nterm declarator (12.9-11: )
Stack now 26 24 17 14 8 5 0
Entering state 64
Reducing stack by rule 25 (line 414):
   $1 = nterm declarator (12.9-11: )
-> $$ = nterm declarator_list (12.9-11: )
Stack now 26 24 17 14 8 5 0
Entering state 65
Next token is token ',' (12.12: )
Shifting token ',' (12.12: )
Entering state 96
Reading a token: Next token is token IDENTIFIER (12.14-24: originalNum)
Shifting token IDENTIFIER (12.14-24: originalNum)
Entering state 30
Reducing stack by rule 18 (line 275):
   $1 = token IDENTIFIER (12.14-24: originalNum)
-> $$ = nterm declarator_arr (12.14-24: )
Stack now 96 65 26 24 17 14 8 5 0
Entering state 32
Reading a token: Next token is token ',' (12.25: )
Reducing stack by rule 20 (line 294):
   $1 = nterm declarator_arr (12.14-24: )
-> $$ = nterm declarator (12.14-24: )
Stack now 96 65 26 24 17 14 8 5 0
Entering state 127
Reducing stack by rule 26 (line 418):
   $1 = nterm declarator_list (12.9-11: )
   $2 = token ',' (12.12: )
   $3 = nterm declarator (12.14-24: )
-> $$ = nterm declarator_list (12.9-24: )
Stack now 26 24 17 14 8 5 0
Entering state 65
Next token is token ',' (12.25: )
Shifting token ',' (12.25: )
Entering state 96
Reading a token: Next token is token IDENTIFIER (12.27-35: remainder)
Shifting token IDENTIFIER (12.27-35: remainder)
Entering state 30
Reducing stack by rule 18 (line 275):
   $1 = token IDENTIFIER (12.27-35: remainder)
-> $$ = nterm declarator_arr (12.27-35: )
Stack now 96 65 26 24 17 14 8 5 0
Entering state 32
Reading a token: Next token is token ',' (12.36: )
Reducing stack by rule 20 (line 294):
   $1 = nterm declarator_arr (12.27-35: )
-> $$ = nterm declarator (12.27-35: )
Stack now 96 65 26 24 17 14 8 5 0
Entering state 127
Reducing stack by rule 26 (line 418):
   $1 = nterm declarator_list (12.9-24: )
   $2 = token ',' (12.25: )
   $3 = nterm declarator (12.27-35: )
-> $$ = nterm declarator_list (12.9-35: )
Stack now 26 24 17 14 8 5 0
Entering state 65
Next token is token ',' (12.36: )
Shifting token ',' (12.36: )
Entering state 96
Reading a token: Next token is token IDENTIFIER (12.38-43: result)
Shifting token IDENTIFIER (12.38-43: result)
Entering state 30
Reducing stack by rule 18 (line 275):
   $1 = token IDENTIFIER (12.38-43: result)
-> $$ = nterm declarator_arr (12.38-43: )
Stack now 96 65 26 24 17 14 8 5 0
Entering state 32
Reading a token: Next token is token ';' (12.44: )
Reducing stack by rule 20 (line 294):
   $1 = nterm declarator_arr (12.38-43: )
-> $$ = nterm declarator (12.38-43: )
Stack now 96 65 26 24 17 14 8 5 0
Entering state 127
Reducing stack by rule 26 (line 418):
   $1 = nterm declarator_list (12.9-35: )
   $2 = token ',' (12.36: )
   $3 = nterm declarator (12.38-43: )
-> $$ = nterm declarator_list (12.9-43: )
Stack now 26 24 17 14 8 5 0
Entering state 65
Next token is token ';' (12.44: )
Shifting token ';' (12.44: )
Entering state 97
Reducing stack by rule 24 (line 408):
   $1 = nterm type_specifier (12.5-7: )
   $2 = nterm declarator_list (12.9-43: )
   $3 = token ';' (12.44: )
-> $$ = nterm declaration (12.5-44: )
Stack now 24 17 14 8 5 0
Entering state 27
Reducing stack by rule 22 (line 304):
   $1 = nterm declaration (12.5-44: )
-> $$ = nterm declaration_list (12.5-44: )
Stack now 24 17 14 8 5 0
Entering state 52
Reading a token: Next token is token INT (13.5-7: )
Shifting token INT (13.5-7: )
Entering state 2
Reducing stack by rule 10 (line 228):
   $1 = token INT (13.5-7: )
-> $$ = nterm type_specifier (13.5-7: )
Stack now 52 24 17 14 8 5 0
Entering state 26
Reading a token: Next token is token IDENTIFIER (13.9-11: arr)
Shifting token IDENTIFIER (13.9-11: arr)
Entering state 30
Reducing stack by rule 18 (line 275):
   $1 = token IDENTIFIER (13.9-11: arr)
-> $$ = nterm declarator_arr (13.9-11: )
Stack now 26 52 24 17 14 8 5 0
Entering state 32
Reading a token: Next token is token '[' (13.13: )
Shifting token '[' (13.13: )
Entering state 69
Reading a token: Next token is token INT_CONSTANT (13.14: 2)
Shifting token INT_CONSTANT (13.14: 2)
Entering state 99
Reading a token: Next token is token ']' (13.15: )
Shifting token ']' (13.15: )
Entering state 128
Reducing stack by rule 19 (line 278):
   $1 = nterm declarator_arr (13.9-11: )
   $2 = token '[' (13.13: )
   $3 = token INT_CONSTANT (13.14: 2)
   $4 = token ']' (13.15: )
-> $$ = nterm declarator_arr (13.9-15: )
Stack now 26 52 24 17 14 8 5 0
Entering state 32
Reading a token: Next token is token ';' (13.16: )
Reducing stack by rule 20 (line 294):
   $1 = nterm declarator_arr (13.9-15: )
-> $$ = nterm declarator (13.9-15: )
Stack now 26 52 24 17 14 8 5 0
Entering state 64
Reducing stack by rule 25 (line 414):
   $1 = nterm declarator (13.9-15: )
-> $$ = nterm declarator_list (13.9-15: )
Stack now 26 52 24 17 14 8 5 0
Entering state 65
Next token is token ';' (13.16: )
Shifting token ';' (13.16: )
Entering state 97
Reducing stack by rule 24 (line 408):
   $1 = nterm type_specifier (13.5-7: )
   $2 = nterm declarator_list (13.9-15: )
   $3 = token ';' (13.16: )
-> $$ = nterm declaration (13.5-16: )
Stack now 52 24 17 14 8 5 0
Entering state 67
Reducing stack by rule 23 (line 356):
   $1 = nterm declaration_list (12.5-44: )
   $2 = nterm declaration (13.5-16: )
-> $$ = nterm declaration_list (12.5-13.16: )
Stack now 24 17 14 8 5 0
Entering state 52
Reading a token: Next token is token IDENTIFIER (14.5-10: printf)
Shifting token IDENTIFIER (14.5-10: printf)
Entering state 40
Reading a token: Next token is token '(' (14.11: )
Shifting token '(' (14.11: )
Entering state 82
Reading a token: Next token is token STRING_LITERAL (14.12-40: "Enter a three-digit integer")
Shifting token STRING_LITERAL (14.12-40: "Enter a three-digit integer")
Entering state 43
Reducing stack by rule 74 (line 1382):
   $1 = token STRING_LITERAL (14.12-40: "Enter a three-digit integer")
-> $$ = nterm primary_expression (14.12-40: )
Stack now 82 40 52 24 17 14 8 5 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (14.12-40: )
-> $$ = nterm postfix_expression (14.12-40: )
Stack now 82 40 52 24 17 14 8 5 0
Entering state 58
Reading a token: Next token is token ')' (14.41: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (14.12-40: )
-> $$ = nterm unary_expression (14.12-40: )
Stack now 82 40 52 24 17 14 8 5 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (14.12-40: )
-> $$ = nterm multiplicative_expression (14.12-40: )
Stack now 82 40 52 24 17 14 8 5 0
Entering state 77
Next token is token ')' (14.41: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (14.12-40: )
-> $$ = nterm additive_expression (14.12-40: )
Stack now 82 40 52 24 17 14 8 5 0
Entering state 76
Next token is token ')' (14.41: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (14.12-40: )
-> $$ = nterm relational_expression (14.12-40: )
Stack now 82 40 52 24 17 14 8 5 0
Entering state 75
Next token is token ')' (14.41: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (14.12-40: )
-> $$ = nterm equality_expression (14.12-40: )
Stack now 82 40 52 24 17 14 8 5 0
Entering state 74
Next token is token ')' (14.41: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (14.12-40: )
-> $$ = nterm logical_and_expression (14.12-40: )
Stack now 82 40 52 24 17 14 8 5 0
Entering state 73
Next token is token ')' (14.41: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (14.12-40: )
-> $$ = nterm expression (14.12-40: )
Stack now 82 40 52 24 17 14 8 5 0
Entering state 118
Next token is token ')' (14.41: )
Reducing stack by rule 76 (line 1393):
   $1 = nterm expression (14.12-40: )
-> $$ = nterm expression_list (14.12-40: )
Stack now 82 40 52 24 17 14 8 5 0
Entering state 119
Next token is token ')' (14.41: )
Shifting token ')' (14.41: )
Entering state 147
Reading a token: Next token is token ';' (14.42: )
Shifting token ';' (14.42: )
Entering state 154
Reducing stack by rule 43 (line 594):
   $1 = token IDENTIFIER (14.5-10: printf)
   $2 = token '(' (14.11: )
   $3 = nterm expression_list (14.12-40: )
   $4 = token ')' (14.41: )
   $5 = token ';' (14.42: )
-> $$ = nterm procedure_call (14.5-42: )
Stack now 52 24 17 14 8 5 0
Entering state 61
Reducing stack by rule 38 (line 474):
   $1 = nterm procedure_call (14.5-42: )
-> $$ = nterm statement (14.5-42: )
Stack now 52 24 17 14 8 5 0
Entering state 53
Reducing stack by rule 31 (line 444):
   $1 = nterm statement (14.5-42: )
-> $$ = nterm statement_list (14.5-42: )
Stack now 52 24 17 14 8 5 0
Entering state 86
Reading a token: Next token is token IDENTIFIER (15.5-9: scanf)
Shifting token IDENTIFIER (15.5-9: scanf)
Entering state 40
Reading a token: Next token is token '(' (15.10: )
Shifting token '(' (15.10: )
Entering state 82
Reading a token: Next token is token STRING_LITERAL (15.11-14: "%d")
Shifting token STRING_LITERAL (15.11-14: "%d")
Entering state 43
Reducing stack by rule 74 (line 1382):
   $1 = token STRING_LITERAL (15.11-14: "%d")
-> $$ = nterm primary_expression (15.11-14: )
Stack now 82 40 86 52 24 17 14 8 5 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (15.11-14: )
-> $$ = nterm postfix_expression (15.11-14: )
Stack now 82 40 86 52 24 17 14 8 5 0
Entering state 58
Reading a token: Next token is token ',' (15.15: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (15.11-14: )
-> $$ = nterm unary_expression (15.11-14: )
Stack now 82 40 86 52 24 17 14 8 5 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (15.11-14: )
-> $$ = nterm multiplicative_expression (15.11-14: )
Stack now 82 40 86 52 24 17 14 8 5 0
Entering state 77
Next token is token ',' (15.15: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (15.11-14: )
-> $$ = nterm additive_expression (15.11-14: )
Stack now 82 40 86 52 24 17 14 8 5 0
Entering state 76
Next token is token ',' (15.15: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (15.11-14: )
-> $$ = nterm relational_expression (15.11-14: )
Stack now 82 40 86 52 24 17 14 8 5 0
Entering state 75
Next token is token ',' (15.15: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (15.11-14: )
-> $$ = nterm equality_expression (15.11-14: )
Stack now 82 40 86 52 24 17 14 8 5 0
Entering state 74
Next token is token ',' (15.15: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (15.11-14: )
-> $$ = nterm logical_and_expression (15.11-14: )
Stack now 82 40 86 52 24 17 14 8 5 0
Entering state 73
Next token is token ',' (15.15: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (15.11-14: )
-> $$ = nterm expression (15.11-14: )
Stack now 82 40 86 52 24 17 14 8 5 0
Entering state 118
Next token is token ',' (15.15: )
Reducing stack by rule 76 (line 1393):
   $1 = nterm expression (15.11-14: )
-> $$ = nterm expression_list (15.11-14: )
Stack now 82 40 86 52 24 17 14 8 5 0
Entering state 119
Next token is token ',' (15.15: )
Shifting token ',' (15.15: )
Entering state 148
Reading a token: Next token is token '&' (15.17: )
Shifting token '&' (15.17: )
Entering state 51
Reducing stack by rule 80 (line 1410):
   $1 = token '&' (15.17: )
-> $$ = nterm unary_operator (15.17: )
Stack now 148 119 82 40 86 52 24 17 14 8 5 0
Entering state 60
Reading a token: Next token is token IDENTIFIER (15.18-20: num)
Shifting token IDENTIFIER (15.18-20: num)
Entering state 71
Reading a token: Next token is token ')' (15.21: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (15.18-20: num)
-> $$ = nterm primary_expression (15.18-20: )
Stack now 60 148 119 82 40 86 52 24 17 14 8 5 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (15.18-20: )
-> $$ = nterm postfix_expression (15.18-20: )
Stack now 60 148 119 82 40 86 52 24 17 14 8 5 0
Entering state 58
Next token is token ')' (15.21: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (15.18-20: )
-> $$ = nterm unary_expression (15.18-20: )
Stack now 60 148 119 82 40 86 52 24 17 14 8 5 0
Entering state 95
Reducing stack by rule 60 (line 1063):
   $1 = nterm unary_operator (15.17: )
   $2 = nterm unary_expression (15.18-20: )
-> $$ = nterm unary_expression (15.17-20: )
Stack now 148 119 82 40 86 52 24 17 14 8 5 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (15.17-20: )
-> $$ = nterm multiplicative_expression (15.17-20: )
Stack now 148 119 82 40 86 52 24 17 14 8 5 0
Entering state 77
Next token is token ')' (15.21: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (15.17-20: )
-> $$ = nterm additive_expression (15.17-20: )
Stack now 148 119 82 40 86 52 24 17 14 8 5 0
Entering state 76
Next token is token ')' (15.21: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (15.17-20: )
-> $$ = nterm relational_expression (15.17-20: )
Stack now 148 119 82 40 86 52 24 17 14 8 5 0
Entering state 75
Next token is token ')' (15.21: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (15.17-20: )
-> $$ = nterm equality_expression (15.17-20: )
Stack now 148 119 82 40 86 52 24 17 14 8 5 0
Entering state 74
Next token is token ')' (15.21: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (15.17-20: )
-> $$ = nterm logical_and_expression (15.17-20: )
Stack now 148 119 82 40 86 52 24 17 14 8 5 0
Entering state 73
Next token is token ')' (15.21: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (15.17-20: )
-> $$ = nterm expression (15.17-20: )
Stack now 148 119 82 40 86 52 24 17 14 8 5 0
Entering state 155
Next token is token ')' (15.21: )
Reducing stack by rule 77 (line 1397):
   $1 = nterm expression_list (15.11-14: )
   $2 = token ',' (15.15: )
   $3 = nterm expression (15.17-20: )
-> $$ = nterm expression_list (15.11-20: )
Stack now 82 40 86 52 24 17 14 8 5 0
Entering state 119
Next token is token ')' (15.21: )
Shifting token ')' (15.21: )
Entering state 147
Reading a token: Next token is token ';' (15.22: )
Shifting token ';' (15.22: )
Entering state 154
Reducing stack by rule 43 (line 594):
   $1 = token IDENTIFIER (15.5-9: scanf)
   $2 = token '(' (15.10: )
   $3 = nterm expression_list (15.11-20: )
   $4 = token ')' (15.21: )
   $5 = token ';' (15.22: )
-> $$ = nterm procedure_call (15.5-22: )
Stack now 86 52 24 17 14 8 5 0
Entering state 61
Reducing stack by rule 38 (line 474):
   $1 = nterm procedure_call (15.5-22: )
-> $$ = nterm statement (15.5-22: )
Stack now 86 52 24 17 14 8 5 0
Entering state 88
Reducing stack by rule 32 (line 449):
   $1 = nterm statement_list (14.5-42: )
   $2 = nterm statement (15.5-22: )
-> $$ = nterm statement_list (14.5-15.22: )
Stack now 52 24 17 14 8 5 0
Entering state 86
Reading a token: Next token is token IDENTIFIER (16.5-10: result)
Shifting token IDENTIFIER (16.5-10: result)
Entering state 40
Reading a token: Next token is token '=' (16.12: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (16.5-10: result)
-> $$ = nterm primary_expression (16.5-10: )
Stack now 86 52 24 17 14 8 5 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (16.5-10: )
-> $$ = nterm postfix_expression (16.5-10: )
Stack now 86 52 24 17 14 8 5 0
Entering state 58
Next token is token '=' (16.12: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (16.5-10: )
-> $$ = nterm unary_expression (16.5-10: )
Stack now 86 52 24 17 14 8 5 0
Entering state 57
Next token is token '=' (16.12: )
Shifting token '=' (16.12: )
Entering state 90
Reading a token: Next token is token INT_CONSTANT (16.14: 0)
Shifting token INT_CONSTANT (16.14: 0)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (16.14: 0)
-> $$ = nterm primary_expression (16.14: )
Stack now 90 57 86 52 24 17 14 8 5 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (16.14: )
-> $$ = nterm postfix_expression (16.14: )
Stack now 90 57 86 52 24 17 14 8 5 0
Entering state 58
Reading a token: Next token is token ';' (16.15: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (16.14: )
-> $$ = nterm unary_expression (16.14: )
Stack now 90 57 86 52 24 17 14 8 5 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (16.14: )
-> $$ = nterm multiplicative_expression (16.14: )
Stack now 90 57 86 52 24 17 14 8 5 0
Entering state 77
Next token is token ';' (16.15: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (16.14: )
-> $$ = nterm additive_expression (16.14: )
Stack now 90 57 86 52 24 17 14 8 5 0
Entering state 76
Next token is token ';' (16.15: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (16.14: )
-> $$ = nterm relational_expression (16.14: )
Stack now 90 57 86 52 24 17 14 8 5 0
Entering state 75
Next token is token ';' (16.15: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (16.14: )
-> $$ = nterm equality_expression (16.14: )
Stack now 90 57 86 52 24 17 14 8 5 0
Entering state 74
Next token is token ';' (16.15: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (16.14: )
-> $$ = nterm logical_and_expression (16.14: )
Stack now 90 57 86 52 24 17 14 8 5 0
Entering state 73
Next token is token ';' (16.15: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (16.14: )
-> $$ = nterm expression (16.14: )
Stack now 90 57 86 52 24 17 14 8 5 0
Entering state 123
Next token is token ';' (16.15: )
Reducing stack by rule 40 (line 506):
   $1 = nterm unary_expression (16.5-10: )
   $2 = token '=' (16.12: )
   $3 = nterm expression (16.14: )
-> $$ = nterm assignment_expression (16.5-14: )
Stack now 86 52 24 17 14 8 5 0
Entering state 56
Next token is token ';' (16.15: )
Shifting token ';' (16.15: )
Entering state 89
Reducing stack by rule 41 (line 559):
   $1 = nterm assignment_expression (16.5-14: )
   $2 = token ';' (16.15: )
-> $$ = nterm assignment_statement (16.5-15: )
Stack now 86 52 24 17 14 8 5 0
Entering state 54
Reducing stack by rule 37 (line 469):
   $1 = nterm assignment_statement (16.5-15: )
-> $$ = nterm statement (16.5-15: )
Stack now 86 52 24 17 14 8 5 0
Entering state 88
Reducing stack by rule 32 (line 449):
   $1 = nterm statement_list (14.5-15.22: )
   $2 = nterm statement (16.5-15: )
-> $$ = nterm statement_list (14.5-16.15: )
Stack now 52 24 17 14 8 5 0
Entering state 86
Reading a token: Next token is token IDENTIFIER (17.5-7: num)
Shifting token IDENTIFIER (17.5-7: num)
Entering state 40
Reading a token: Next token is token '=' (17.9: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (17.5-7: num)
-> $$ = nterm primary_expression (17.5-7: )
Stack now 86 52 24 17 14 8 5 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (17.5-7: )
-> $$ = nterm postfix_expression (17.5-7: )
Stack now 86 52 24 17 14 8 5 0
Entering state 58
Next token is token '=' (17.9: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (17.5-7: )
-> $$ = nterm unary_expression (17.5-7: )
Stack now 86 52 24 17 14 8 5 0
Entering state 57
Next token is token '=' (17.9: )
Shifting token '=' (17.9: )
Entering state 90
Reading a token: Next token is token INT_CONSTANT (17.11-13: 153)
Shifting token INT_CONSTANT (17.11-13: 153)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (17.11-13: 153)
-> $$ = nterm primary_expression (17.11-13: )
Stack now 90 57 86 52 24 17 14 8 5 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (17.11-13: )
-> $$ = nterm postfix_expression (17.11-13: )
Stack now 90 57 86 52 24 17 14 8 5 0
Entering state 58
Reading a token: Next token is token ';' (17.14: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (17.11-13: )
-> $$ = nterm unary_expression (17.11-13: )
Stack now 90 57 86 52 24 17 14 8 5 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (17.11-13: )
-> $$ = nterm multiplicative_expression (17.11-13: )
Stack now 90 57 86 52 24 17 14 8 5 0
Entering state 77
Next token is token ';' (17.14: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (17.11-13: )
-> $$ = nterm additive_expression (17.11-13: )
Stack now 90 57 86 52 24 17 14 8 5 0
Entering state 76
Next token is token ';' (17.14: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (17.11-13: )
-> $$ = nterm relational_expression (17.11-13: )
Stack now 90 57 86 52 24 17 14 8 5 0
Entering state 75
Next token is token ';' (17.14: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (17.11-13: )
-> $$ = nterm equality_expression (17.11-13: )
Stack now 90 57 86 52 24 17 14 8 5 0
Entering state 74
Next token is token ';' (17.14: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (17.11-13: )
-> $$ = nterm logical_and_expression (17.11-13: )
Stack now 90 57 86 52 24 17 14 8 5 0
Entering state 73
Next token is token ';' (17.14: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (17.11-13: )
-> $$ = nterm expression (17.11-13: )
Stack now 90 57 86 52 24 17 14 8 5 0
Entering state 123
Next token is token ';' (17.14: )
Reducing stack by rule 40 (line 506):
   $1 = nterm unary_expression (17.5-7: )
   $2 = token '=' (17.9: )
   $3 = nterm expression (17.11-13: )
-> $$ = nterm assignment_expression (17.5-13: )
Stack now 86 52 24 17 14 8 5 0
Entering state 56
Next token is token ';' (17.14: )
Shifting token ';' (17.14: )
Entering state 89
Reducing stack by rule 41 (line 559):
   $1 = nterm assignment_expression (17.5-13: )
   $2 = token ';' (17.14: )
-> $$ = nterm assignment_statement (17.5-14: )
Stack now 86 52 24 17 14 8 5 0
Entering state 54
Reducing stack by rule 37 (line 469):
   $1 = nterm assignment_statement (17.5-14: )
-> $$ = nterm statement (17.5-14: )
Stack now 86 52 24 17 14 8 5 0
Entering state 88
Reducing stack by rule 32 (line 449):
   $1 = nterm statement_list (14.5-16.15: )
   $2 = nterm statement (17.5-14: )
-> $$ = nterm statement_list (14.5-17.14: )
Stack now 52 24 17 14 8 5 0
Entering state 86
Reading a token: Next token is token IDENTIFIER (18.5-15: originalNum)
Shifting token IDENTIFIER (18.5-15: originalNum)
Entering state 40
Reading a token: Next token is token '=' (18.17: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (18.5-15: originalNum)
-> $$ = nterm primary_expression (18.5-15: )
Stack now 86 52 24 17 14 8 5 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (18.5-15: )
-> $$ = nterm postfix_expression (18.5-15: )
Stack now 86 52 24 17 14 8 5 0
Entering state 58
Next token is token '=' (18.17: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (18.5-15: )
-> $$ = nterm unary_expression (18.5-15: )
Stack now 86 52 24 17 14 8 5 0
Entering state 57
Next token is token '=' (18.17: )
Shifting token '=' (18.17: )
Entering state 90
Reading a token: Next token is token IDENTIFIER (18.19-21: num)
Shifting token IDENTIFIER (18.19-21: num)
Entering state 71
Reading a token: Next token is token ';' (18.22: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (18.19-21: num)
-> $$ = nterm primary_expression (18.19-21: )
Stack now 90 57 86 52 24 17 14 8 5 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (18.19-21: )
-> $$ = nterm postfix_expression (18.19-21: )
Stack now 90 57 86 52 24 17 14 8 5 0
Entering state 58
Next token is token ';' (18.22: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (18.19-21: )
-> $$ = nterm unary_expression (18.19-21: )
Stack now 90 57 86 52 24 17 14 8 5 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (18.19-21: )
-> $$ = nterm multiplicative_expression (18.19-21: )
Stack now 90 57 86 52 24 17 14 8 5 0
Entering state 77
Next token is token ';' (18.22: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (18.19-21: )
-> $$ = nterm additive_expression (18.19-21: )
Stack now 90 57 86 52 24 17 14 8 5 0
Entering state 76
Next token is token ';' (18.22: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (18.19-21: )
-> $$ = nterm relational_expression (18.19-21: )
Stack now 90 57 86 52 24 17 14 8 5 0
Entering state 75
Next token is token ';' (18.22: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (18.19-21: )
-> $$ = nterm equality_expression (18.19-21: )
Stack now 90 57 86 52 24 17 14 8 5 0
Entering state 74
Next token is token ';' (18.22: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (18.19-21: )
-> $$ = nterm logical_and_expression (18.19-21: )
Stack now 90 57 86 52 24 17 14 8 5 0
Entering state 73
Next token is token ';' (18.22: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (18.19-21: )
-> $$ = nterm expression (18.19-21: )
Stack now 90 57 86 52 24 17 14 8 5 0
Entering state 123
Next token is token ';' (18.22: )
Reducing stack by rule 40 (line 506):
   $1 = nterm unary_expression (18.5-15: )
   $2 = token '=' (18.17: )
   $3 = nterm expression (18.19-21: )
-> $$ = nterm assignment_expression (18.5-21: )
Stack now 86 52 24 17 14 8 5 0
Entering state 56
Next token is token ';' (18.22: )
Shifting token ';' (18.22: )
Entering state 89
Reducing stack by rule 41 (line 559):
   $1 = nterm assignment_expression (18.5-21: )
   $2 = token ';' (18.22: )
-> $$ = nterm assignment_statement (18.5-22: )
Stack now 86 52 24 17 14 8 5 0
Entering state 54
Reducing stack by rule 37 (line 469):
   $1 = nterm assignment_statement (18.5-22: )
-> $$ = nterm statement (18.5-22: )
Stack now 86 52 24 17 14 8 5 0
Entering state 88
Reducing stack by rule 32 (line 449):
   $1 = nterm statement_list (14.5-17.14: )
   $2 = nterm statement (18.5-22: )
-> $$ = nterm statement_list (14.5-18.22: )
Stack now 52 24 17 14 8 5 0
Entering state 86
Reading a token: Next token is token WHILE (20.5-9: )
Shifting token WHILE (20.5-9: )
Entering state 37
Reading a token: Next token is token '(' (20.11: )
Shifting token '(' (20.11: )
Entering state 79
Reading a token: Next token is token IDENTIFIER (20.12-22: originalNum)
Shifting token IDENTIFIER (20.12-22: originalNum)
Entering state 71
Reading a token: Next token is token NE_OP (20.24-25: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (20.12-22: originalNum)
-> $$ = nterm primary_expression (20.12-22: )
Stack now 79 37 86 52 24 17 14 8 5 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (20.12-22: )
-> $$ = nterm postfix_expression (20.12-22: )
Stack now 79 37 86 52 24 17 14 8 5 0
Entering state 58
Next token is token NE_OP (20.24-25: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (20.12-22: )
-> $$ = nterm unary_expression (20.12-22: )
Stack now 79 37 86 52 24 17 14 8 5 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (20.12-22: )
-> $$ = nterm multiplicative_expression (20.12-22: )
Stack now 79 37 86 52 24 17 14 8 5 0
Entering state 77
Next token is token NE_OP (20.24-25: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (20.12-22: )
-> $$ = nterm additive_expression (20.12-22: )
Stack now 79 37 86 52 24 17 14 8 5 0
Entering state 76
Next token is token NE_OP (20.24-25: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (20.12-22: )
-> $$ = nterm relational_expression (20.12-22: )
Stack now 79 37 86 52 24 17 14 8 5 0
Entering state 75
Next token is token NE_OP (20.24-25: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (20.12-22: )
-> $$ = nterm equality_expression (20.12-22: )
Stack now 79 37 86 52 24 17 14 8 5 0
Entering state 74
Next token is token NE_OP (20.24-25: )
Shifting token NE_OP (20.24-25: )
Entering state 105
Reading a token: Next token is token INT_CONSTANT (20.27: 0)
Shifting token INT_CONSTANT (20.27: 0)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (20.27: 0)
-> $$ = nterm primary_expression (20.27: )
Stack now 105 74 79 37 86 52 24 17 14 8 5 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (20.27: )
-> $$ = nterm postfix_expression (20.27: )
Stack now 105 74 79 37 86 52 24 17 14 8 5 0
Entering state 58
Reading a token: Next token is token ')' (20.28: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (20.27: )
-> $$ = nterm unary_expression (20.27: )
Stack now 105 74 79 37 86 52 24 17 14 8 5 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (20.27: )
-> $$ = nterm multiplicative_expression (20.27: )
Stack now 105 74 79 37 86 52 24 17 14 8 5 0
Entering state 77
Next token is token ')' (20.28: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (20.27: )
-> $$ = nterm additive_expression (20.27: )
Stack now 105 74 79 37 86 52 24 17 14 8 5 0
Entering state 76
Next token is token ')' (20.28: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (20.27: )
-> $$ = nterm relational_expression (20.27: )
Stack now 105 74 79 37 86 52 24 17 14 8 5 0
Entering state 134
Next token is token ')' (20.28: )
Reducing stack by rule 50 (line 739):
   $1 = nterm equality_expression (20.12-22: )
   $2 = token NE_OP (20.24-25: )
   $3 = nterm relational_expression (20.27: )
-> $$ = nterm equality_expression (20.12-27: )
Stack now 79 37 86 52 24 17 14 8 5 0
Entering state 74
Next token is token ')' (20.28: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (20.12-27: )
-> $$ = nterm logical_and_expression (20.12-27: )
Stack now 79 37 86 52 24 17 14 8 5 0
Entering state 73
Next token is token ')' (20.28: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (20.12-27: )
-> $$ = nterm expression (20.12-27: )
Stack now 79 37 86 52 24 17 14 8 5 0
Entering state 114
Next token is token ')' (20.28: )
Shifting token ')' (20.28: )
Entering state 143
Reading a token: Next token is token '{' (20.30: )
Shifting token '{' (20.30: )
Entering state 45
Reading a token: Next token is token IDENTIFIER (22.7-15: remainder)
Shifting token IDENTIFIER (22.7-15: remainder)
Entering state 40
Reading a token: Next token is token '=' (22.17: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (22.7-15: remainder)
-> $$ = nterm primary_expression (22.7-15: )
Stack now 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (22.7-15: )
-> $$ = nterm postfix_expression (22.7-15: )
Stack now 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 58
Next token is token '=' (22.17: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (22.7-15: )
-> $$ = nterm unary_expression (22.7-15: )
Stack now 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 57
Next token is token '=' (22.17: )
Shifting token '=' (22.17: )
Entering state 90
Reading a token: Next token is token IDENTIFIER (22.19-21: mod)
Shifting token IDENTIFIER (22.19-21: mod)
Entering state 71
Reading a token: Next token is token '(' (22.22: )
Shifting token '(' (22.22: )
Entering state 100
Reading a token: Next token is token IDENTIFIER (22.23-33: originalNum)
Shifting token IDENTIFIER (22.23-33: originalNum)
Entering state 71
Reading a token: Next token is token ',' (22.34: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (22.23-33: originalNum)
-> $$ = nterm primary_expression (22.23-33: )
Stack now 100 71 90 57 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (22.23-33: )
-> $$ = nterm postfix_expression (22.23-33: )
Stack now 100 71 90 57 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 58
Next token is token ',' (22.34: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (22.23-33: )
-> $$ = nterm unary_expression (22.23-33: )
Stack now 100 71 90 57 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (22.23-33: )
-> $$ = nterm multiplicative_expression (22.23-33: )
Stack now 100 71 90 57 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 77
Next token is token ',' (22.34: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (22.23-33: )
-> $$ = nterm additive_expression (22.23-33: )
Stack now 100 71 90 57 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 76
Next token is token ',' (22.34: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (22.23-33: )
-> $$ = nterm relational_expression (22.23-33: )
Stack now 100 71 90 57 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 75
Next token is token ',' (22.34: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (22.23-33: )
-> $$ = nterm equality_expression (22.23-33: )
Stack now 100 71 90 57 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 74
Next token is token ',' (22.34: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (22.23-33: )
-> $$ = nterm logical_and_expression (22.23-33: )
Stack now 100 71 90 57 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 73
Next token is token ',' (22.34: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (22.23-33: )
-> $$ = nterm expression (22.23-33: )
Stack now 100 71 90 57 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 118
Next token is token ',' (22.34: )
Reducing stack by rule 76 (line 1393):
   $1 = nterm expression (22.23-33: )
-> $$ = nterm expression_list (22.23-33: )
Stack now 100 71 90 57 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 130
Next token is token ',' (22.34: )
Shifting token ',' (22.34: )
Entering state 148
Reading a token: Next token is token INT_CONSTANT (22.35-36: 10)
Shifting token INT_CONSTANT (22.35-36: 10)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (22.35-36: 10)
-> $$ = nterm primary_expression (22.35-36: )
Stack now 148 130 100 71 90 57 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (22.35-36: )
-> $$ = nterm postfix_expression (22.35-36: )
Stack now 148 130 100 71 90 57 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 58
Reading a token: Next token is token ')' (22.37: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (22.35-36: )
-> $$ = nterm unary_expression (22.35-36: )
Stack now 148 130 100 71 90 57 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (22.35-36: )
-> $$ = nterm multiplicative_expression (22.35-36: )
Stack now 148 130 100 71 90 57 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 77
Next token is token ')' (22.37: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (22.35-36: )
-> $$ = nterm additive_expression (22.35-36: )
Stack now 148 130 100 71 90 57 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 76
Next token is token ')' (22.37: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (22.35-36: )
-> $$ = nterm relational_expression (22.35-36: )
Stack now 148 130 100 71 90 57 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 75
Next token is token ')' (22.37: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (22.35-36: )
-> $$ = nterm equality_expression (22.35-36: )
Stack now 148 130 100 71 90 57 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 74
Next token is token ')' (22.37: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (22.35-36: )
-> $$ = nterm logical_and_expression (22.35-36: )
Stack now 148 130 100 71 90 57 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 73
Next token is token ')' (22.37: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (22.35-36: )
-> $$ = nterm expression (22.35-36: )
Stack now 148 130 100 71 90 57 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 155
Next token is token ')' (22.37: )
Reducing stack by rule 77 (line 1397):
   $1 = nterm expression_list (22.23-33: )
   $2 = token ',' (22.34: )
   $3 = nterm expression (22.35-36: )
-> $$ = nterm expression_list (22.23-36: )
Stack now 100 71 90 57 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 130
Next token is token ')' (22.37: )
Shifting token ')' (22.37: )
Entering state 150
Reducing stack by rule 67 (line 1250):
   $1 = token IDENTIFIER (22.19-21: mod)
   $2 = token '(' (22.22: )
   $3 = nterm expression_list (22.23-36: )
   $4 = token ')' (22.37: )
-> $$ = nterm postfix_expression (22.19-37: )
Stack now 90 57 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 58
Reading a token: Next token is token ';' (22.38: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (22.19-37: )
-> $$ = nterm unary_expression (22.19-37: )
Stack now 90 57 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (22.19-37: )
-> $$ = nterm multiplicative_expression (22.19-37: )
Stack now 90 57 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 77
Next token is token ';' (22.38: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (22.19-37: )
-> $$ = nterm additive_expression (22.19-37: )
Stack now 90 57 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 76
Next token is token ';' (22.38: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (22.19-37: )
-> $$ = nterm relational_expression (22.19-37: )
Stack now 90 57 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 75
Next token is token ';' (22.38: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (22.19-37: )
-> $$ = nterm equality_expression (22.19-37: )
Stack now 90 57 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 74
Next token is token ';' (22.38: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (22.19-37: )
-> $$ = nterm logical_and_expression (22.19-37: )
Stack now 90 57 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 73
Next token is token ';' (22.38: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (22.19-37: )
-> $$ = nterm expression (22.19-37: )
Stack now 90 57 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 123
Next token is token ';' (22.38: )
Reducing stack by rule 40 (line 506):
   $1 = nterm unary_expression (22.7-15: )
   $2 = token '=' (22.17: )
   $3 = nterm expression (22.19-37: )
-> $$ = nterm assignment_expression (22.7-37: )
Stack now 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 56
Next token is token ';' (22.38: )
Shifting token ';' (22.38: )
Entering state 89
Reducing stack by rule 41 (line 559):
   $1 = nterm assignment_expression (22.7-37: )
   $2 = token ';' (22.38: )
-> $$ = nterm assignment_statement (22.7-38: )
Stack now 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 54
Reducing stack by rule 37 (line 469):
   $1 = nterm assignment_statement (22.7-38: )
-> $$ = nterm statement (22.7-38: )
Stack now 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 53
Reducing stack by rule 31 (line 444):
   $1 = nterm statement (22.7-38: )
-> $$ = nterm statement_list (22.7-38: )
Stack now 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 84
Reading a token: Next token is token IDENTIFIER (23.8-13: result)
Shifting token IDENTIFIER (23.8-13: result)
Entering state 40
Reading a token: Next token is token '=' (23.15: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (23.8-13: result)
-> $$ = nterm primary_expression (23.8-13: )
Stack now 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (23.8-13: )
-> $$ = nterm postfix_expression (23.8-13: )
Stack now 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 58
Next token is token '=' (23.15: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (23.8-13: )
-> $$ = nterm unary_expression (23.8-13: )
Stack now 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 57
Next token is token '=' (23.15: )
Shifting token '=' (23.15: )
Entering state 90
Reading a token: Next token is token IDENTIFIER (23.17-22: result)
Shifting token IDENTIFIER (23.17-22: result)
Entering state 71
Reading a token: Next token is token '+' (23.24: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (23.17-22: result)
-> $$ = nterm primary_expression (23.17-22: )
Stack now 90 57 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (23.17-22: )
-> $$ = nterm postfix_expression (23.17-22: )
Stack now 90 57 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 58
Next token is token '+' (23.24: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (23.17-22: )
-> $$ = nterm unary_expression (23.17-22: )
Stack now 90 57 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (23.17-22: )
-> $$ = nterm multiplicative_expression (23.17-22: )
Stack now 90 57 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 77
Next token is token '+' (23.24: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (23.17-22: )
-> $$ = nterm additive_expression (23.17-22: )
Stack now 90 57 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 76
Next token is token '+' (23.24: )
Shifting token '+' (23.24: )
Entering state 110
Reading a token: Next token is token IDENTIFIER (23.26-34: remainder)
Shifting token IDENTIFIER (23.26-34: remainder)
Entering state 71
Reading a token: Next token is token '*' (23.36: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (23.26-34: remainder)
-> $$ = nterm primary_expression (23.26-34: )
Stack now 110 76 90 57 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (23.26-34: )
-> $$ = nterm postfix_expression (23.26-34: )
Stack now 110 76 90 57 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 58
Next token is token '*' (23.36: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (23.26-34: )
-> $$ = nterm unary_expression (23.26-34: )
Stack now 110 76 90 57 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (23.26-34: )
-> $$ = nterm multiplicative_expression (23.26-34: )
Stack now 110 76 90 57 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 139
Next token is token '*' (23.36: )
Shifting token '*' (23.36: )
Entering state 112
Reading a token: Next token is token IDENTIFIER (23.38-46: remainder)
Shifting token IDENTIFIER (23.38-46: remainder)
Entering state 71
Reading a token: Next token is token '*' (23.48: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (23.38-46: remainder)
-> $$ = nterm primary_expression (23.38-46: )
Stack now 112 139 110 76 90 57 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (23.38-46: )
-> $$ = nterm postfix_expression (23.38-46: )
Stack now 112 139 110 76 90 57 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 58
Next token is token '*' (23.48: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (23.38-46: )
-> $$ = nterm unary_expression (23.38-46: )
Stack now 112 139 110 76 90 57 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 141
Reducing stack by rule 62 (line 1127):
   $1 = nterm multiplicative_expression (23.26-34: )
   $2 = token '*' (23.36: )
   $3 = nterm unary_expression (23.38-46: )
-> $$ = nterm multiplicative_expression (23.26-46: )
Stack now 110 76 90 57 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 139
Next token is token '*' (23.48: )
Shifting token '*' (23.48: )
Entering state 112
Reading a token: Next token is token IDENTIFIER (23.50-58: remainder)
Shifting token IDENTIFIER (23.50-58: remainder)
Entering state 71
Reading a token: Next token is token ';' (23.59: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (23.50-58: remainder)
-> $$ = nterm primary_expression (23.50-58: )
Stack now 112 139 110 76 90 57 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (23.50-58: )
-> $$ = nterm postfix_expression (23.50-58: )
Stack now 112 139 110 76 90 57 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 58
Next token is token ';' (23.59: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (23.50-58: )
-> $$ = nterm unary_expression (23.50-58: )
Stack now 112 139 110 76 90 57 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 141
Reducing stack by rule 62 (line 1127):
   $1 = nterm multiplicative_expression (23.26-46: )
   $2 = token '*' (23.48: )
   $3 = nterm unary_expression (23.50-58: )
-> $$ = nterm multiplicative_expression (23.26-58: )
Stack now 110 76 90 57 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 139
Next token is token ';' (23.59: )
Reducing stack by rule 57 (line 954):
   $1 = nterm additive_expression (23.17-22: )
   $2 = token '+' (23.24: )
   $3 = nterm multiplicative_expression (23.26-58: )
-> $$ = nterm additive_expression (23.17-58: )
Stack now 90 57 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 76
Next token is token ';' (23.59: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (23.17-58: )
-> $$ = nterm relational_expression (23.17-58: )
Stack now 90 57 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 75
Next token is token ';' (23.59: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (23.17-58: )
-> $$ = nterm equality_expression (23.17-58: )
Stack now 90 57 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 74
Next token is token ';' (23.59: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (23.17-58: )
-> $$ = nterm logical_and_expression (23.17-58: )
Stack now 90 57 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 73
Next token is token ';' (23.59: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (23.17-58: )
-> $$ = nterm expression (23.17-58: )
Stack now 90 57 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 123
Next token is token ';' (23.59: )
Reducing stack by rule 40 (line 506):
   $1 = nterm unary_expression (23.8-13: )
   $2 = token '=' (23.15: )
   $3 = nterm expression (23.17-58: )
-> $$ = nterm assignment_expression (23.8-58: )
Stack now 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 56
Next token is token ';' (23.59: )
Shifting token ';' (23.59: )
Entering state 89
Reducing stack by rule 41 (line 559):
   $1 = nterm assignment_expression (23.8-58: )
   $2 = token ';' (23.59: )
-> $$ = nterm assignment_statement (23.8-59: )
Stack now 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 54
Reducing stack by rule 37 (line 469):
   $1 = nterm assignment_statement (23.8-59: )
-> $$ = nterm statement (23.8-59: )
Stack now 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 88
Reducing stack by rule 32 (line 449):
   $1 = nterm statement_list (22.7-38: )
   $2 = nterm statement (23.8-59: )
-> $$ = nterm statement_list (22.7-23.59: )
Stack now 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 84
Reading a token: Next token is token IDENTIFIER (26.8-18: originalNum)
Shifting token IDENTIFIER (26.8-18: originalNum)
Entering state 40
Reading a token: Next token is token '=' (26.20: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (26.8-18: originalNum)
-> $$ = nterm primary_expression (26.8-18: )
Stack now 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (26.8-18: )
-> $$ = nterm postfix_expression (26.8-18: )
Stack now 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 58
Next token is token '=' (26.20: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (26.8-18: )
-> $$ = nterm unary_expression (26.8-18: )
Stack now 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 57
Next token is token '=' (26.20: )
Shifting token '=' (26.20: )
Entering state 90
Reading a token: Next token is token IDENTIFIER (26.22-32: originalNum)
Shifting token IDENTIFIER (26.22-32: originalNum)
Entering state 71
Reading a token: Next token is token '/' (26.34: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (26.22-32: originalNum)
-> $$ = nterm primary_expression (26.22-32: )
Stack now 90 57 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (26.22-32: )
-> $$ = nterm postfix_expression (26.22-32: )
Stack now 90 57 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 58
Next token is token '/' (26.34: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (26.22-32: )
-> $$ = nterm unary_expression (26.22-32: )
Stack now 90 57 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (26.22-32: )
-> $$ = nterm multiplicative_expression (26.22-32: )
Stack now 90 57 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 77
Next token is token '/' (26.34: )
Shifting token '/' (26.34: )
Entering state 113
Reading a token: Next token is token INT_CONSTANT (26.36-37: 10)
Shifting token INT_CONSTANT (26.36-37: 10)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (26.36-37: 10)
-> $$ = nterm primary_expression (26.36-37: )
Stack now 113 77 90 57 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (26.36-37: )
-> $$ = nterm postfix_expression (26.36-37: )
Stack now 113 77 90 57 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 58
Reading a token: Next token is token ';' (26.38: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (26.36-37: )
-> $$ = nterm unary_expression (26.36-37: )
Stack now 113 77 90 57 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 142
Reducing stack by rule 63 (line 1157):
   $1 = nterm multiplicative_expression (26.22-32: )
   $2 = token '/' (26.34: )
   $3 = nterm unary_expression (26.36-37: )
-> $$ = nterm multiplicative_expression (26.22-37: )
Stack now 90 57 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 77
Next token is token ';' (26.38: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (26.22-37: )
-> $$ = nterm additive_expression (26.22-37: )
Stack now 90 57 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 76
Next token is token ';' (26.38: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (26.22-37: )
-> $$ = nterm relational_expression (26.22-37: )
Stack now 90 57 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 75
Next token is token ';' (26.38: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (26.22-37: )
-> $$ = nterm equality_expression (26.22-37: )
Stack now 90 57 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 74
Next token is token ';' (26.38: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (26.22-37: )
-> $$ = nterm logical_and_expression (26.22-37: )
Stack now 90 57 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 73
Next token is token ';' (26.38: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (26.22-37: )
-> $$ = nterm expression (26.22-37: )
Stack now 90 57 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 123
Next token is token ';' (26.38: )
Reducing stack by rule 40 (line 506):
   $1 = nterm unary_expression (26.8-18: )
   $2 = token '=' (26.20: )
   $3 = nterm expression (26.22-37: )
-> $$ = nterm assignment_expression (26.8-37: )
Stack now 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 56
Next token is token ';' (26.38: )
Shifting token ';' (26.38: )
Entering state 89
Reducing stack by rule 41 (line 559):
   $1 = nterm assignment_expression (26.8-37: )
   $2 = token ';' (26.38: )
-> $$ = nterm assignment_statement (26.8-38: )
Stack now 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 54
Reducing stack by rule 37 (line 469):
   $1 = nterm assignment_statement (26.8-38: )
-> $$ = nterm statement (26.8-38: )
Stack now 84 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 88
Reducing stack by rule 32 (line 449):
   $1 = nterm statement_list (22.7-23.59: )
   $2 = nterm statement (26.8-38: )
-> $$ = nterm statement_list (22.7-26.38: )
Stack now 45 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 84
Reading a token: Next token is token '}' (27.5: )
Shifting token '}' (27.5: )
Entering state 121
Reducing stack by rule 34 (line 460):
   $1 = token '{' (20.30: )
   $2 = nterm statement_list (22.7-26.38: )
   $3 = token '}' (27.5: )
-> $$ = nterm statement (20.30-27.5: )
Stack now 143 114 79 37 86 52 24 17 14 8 5 0
Entering state 151
Reducing stack by rule 83 (line 1427):
   $1 = token WHILE (20.5-9: )
   $2 = token '(' (20.11: )
   $3 = nterm expression (20.12-27: )
   $4 = token ')' (20.28: )
   $5 = nterm statement (20.30-27.5: )
-> $$ = nterm iteration_statement (20.5-27.5: )
Stack now 86 52 24 17 14 8 5 0
Entering state 63
Reducing stack by rule 36 (line 466):
   $1 = nterm iteration_statement (20.5-27.5: )
-> $$ = nterm statement (20.5-27.5: )
Stack now 86 52 24 17 14 8 5 0
Entering state 88
Reducing stack by rule 32 (line 449):
   $1 = nterm statement_list (14.5-18.22: )
   $2 = nterm statement (20.5-27.5: )
-> $$ = nterm statement_list (14.5-27.5: )
Stack now 52 24 17 14 8 5 0
Entering state 86
Reading a token: Next token is token IF (29.5-6: )
Shifting token IF (29.5-6: )
Entering state 39
Reading a token: Next token is token '(' (29.8: )
Shifting token '(' (29.8: )
Entering state 81
Reading a token: Next token is token IDENTIFIER (29.9-14: result)
Shifting token IDENTIFIER (29.9-14: result)
Entering state 71
Reading a token: Next token is token EQ_OP (29.16-17: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (29.9-14: result)
-> $$ = nterm primary_expression (29.9-14: )
Stack now 81 39 86 52 24 17 14 8 5 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (29.9-14: )
-> $$ = nterm postfix_expression (29.9-14: )
Stack now 81 39 86 52 24 17 14 8 5 0
Entering state 58
Next token is token EQ_OP (29.16-17: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (29.9-14: )
-> $$ = nterm unary_expression (29.9-14: )
Stack now 81 39 86 52 24 17 14 8 5 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (29.9-14: )
-> $$ = nterm multiplicative_expression (29.9-14: )
Stack now 81 39 86 52 24 17 14 8 5 0
Entering state 77
Next token is token EQ_OP (29.16-17: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (29.9-14: )
-> $$ = nterm additive_expression (29.9-14: )
Stack now 81 39 86 52 24 17 14 8 5 0
Entering state 76
Next token is token EQ_OP (29.16-17: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (29.9-14: )
-> $$ = nterm relational_expression (29.9-14: )
Stack now 81 39 86 52 24 17 14 8 5 0
Entering state 75
Next token is token EQ_OP (29.16-17: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (29.9-14: )
-> $$ = nterm equality_expression (29.9-14: )
Stack now 81 39 86 52 24 17 14 8 5 0
Entering state 74
Next token is token EQ_OP (29.16-17: )
Shifting token EQ_OP (29.16-17: )
Entering state 104
Reading a token: Next token is token IDENTIFIER (29.19-21: num)
Shifting token IDENTIFIER (29.19-21: num)
Entering state 71
Reading a token: Next token is token ')' (29.22: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (29.19-21: num)
-> $$ = nterm primary_expression (29.19-21: )
Stack now 104 74 81 39 86 52 24 17 14 8 5 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (29.19-21: )
-> $$ = nterm postfix_expression (29.19-21: )
Stack now 104 74 81 39 86 52 24 17 14 8 5 0
Entering state 58
Next token is token ')' (29.22: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (29.19-21: )
-> $$ = nterm unary_expression (29.19-21: )
Stack now 104 74 81 39 86 52 24 17 14 8 5 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (29.19-21: )
-> $$ = nterm multiplicative_expression (29.19-21: )
Stack now 104 74 81 39 86 52 24 17 14 8 5 0
Entering state 77
Next token is token ')' (29.22: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (29.19-21: )
-> $$ = nterm additive_expression (29.19-21: )
Stack now 104 74 81 39 86 52 24 17 14 8 5 0
Entering state 76
Next token is token ')' (29.22: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (29.19-21: )
-> $$ = nterm relational_expression (29.19-21: )
Stack now 104 74 81 39 86 52 24 17 14 8 5 0
Entering state 133
Next token is token ')' (29.22: )
Reducing stack by rule 49 (line 701):
   $1 = nterm equality_expression (29.9-14: )
   $2 = token EQ_OP (29.16-17: )
   $3 = nterm relational_expression (29.19-21: )
-> $$ = nterm equality_expression (29.9-21: )
Stack now 81 39 86 52 24 17 14 8 5 0
Entering state 74
Next token is token ')' (29.22: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (29.9-21: )
-> $$ = nterm logical_and_expression (29.9-21: )
Stack now 81 39 86 52 24 17 14 8 5 0
Entering state 73
Next token is token ')' (29.22: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (29.9-21: )
-> $$ = nterm expression (29.9-21: )
Stack now 81 39 86 52 24 17 14 8 5 0
Entering state 116
Next token is token ')' (29.22: )
Shifting token ')' (29.22: )
Entering state 145
Reading a token: Next token is token IDENTIFIER (30.9-14: printf)
Shifting token IDENTIFIER (30.9-14: printf)
Entering state 40
Reading a token: Next token is token '(' (30.15: )
Shifting token '(' (30.15: )
Entering state 82
Reading a token: Next token is token STRING_LITERAL (30.16-43: "%d is an Armstrong number.")
Shifting token STRING_LITERAL (30.16-43: "%d is an Armstrong number.")
Entering state 43
Reducing stack by rule 74 (line 1382):
   $1 = token STRING_LITERAL (30.16-43: "%d is an Armstrong number.")
-> $$ = nterm primary_expression (30.16-43: )
Stack now 82 40 145 116 81 39 86 52 24 17 14 8 5 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (30.16-43: )
-> $$ = nterm postfix_expression (30.16-43: )
Stack now 82 40 145 116 81 39 86 52 24 17 14 8 5 0
Entering state 58
Reading a token: Next token is token ',' (30.44: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (30.16-43: )
-> $$ = nterm unary_expression (30.16-43: )
Stack now 82 40 145 116 81 39 86 52 24 17 14 8 5 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (30.16-43: )
-> $$ = nterm multiplicative_expression (30.16-43: )
Stack now 82 40 145 116 81 39 86 52 24 17 14 8 5 0
Entering state 77
Next token is token ',' (30.44: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (30.16-43: )
-> $$ = nterm additive_expression (30.16-43: )
Stack now 82 40 145 116 81 39 86 52 24 17 14 8 5 0
Entering state 76
Next token is token ',' (30.44: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (30.16-43: )
-> $$ = nterm relational_expression (30.16-43: )
Stack now 82 40 145 116 81 39 86 52 24 17 14 8 5 0
Entering state 75
Next token is token ',' (30.44: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (30.16-43: )
-> $$ = nterm equality_expression (30.16-43: )
Stack now 82 40 145 116 81 39 86 52 24 17 14 8 5 0
Entering state 74
Next token is token ',' (30.44: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (30.16-43: )
-> $$ = nterm logical_and_expression (30.16-43: )
Stack now 82 40 145 116 81 39 86 52 24 17 14 8 5 0
Entering state 73
Next token is token ',' (30.44: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (30.16-43: )
-> $$ = nterm expression (30.16-43: )
Stack now 82 40 145 116 81 39 86 52 24 17 14 8 5 0
Entering state 118
Next token is token ',' (30.44: )
Reducing stack by rule 76 (line 1393):
   $1 = nterm expression (30.16-43: )
-> $$ = nterm expression_list (30.16-43: )
Stack now 82 40 145 116 81 39 86 52 24 17 14 8 5 0
Entering state 119
Next token is token ',' (30.44: )
Shifting token ',' (30.44: )
Entering state 148
Reading a token: Next token is token IDENTIFIER (31.9-11: num)
Shifting token IDENTIFIER (31.9-11: num)
Entering state 71
Reading a token: Next token is token ')' (31.12: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (31.9-11: num)
-> $$ = nterm primary_expression (31.9-11: )
Stack now 148 119 82 40 145 116 81 39 86 52 24 17 14 8 5 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (31.9-11: )
-> $$ = nterm postfix_expression (31.9-11: )
Stack now 148 119 82 40 145 116 81 39 86 52 24 17 14 8 5 0
Entering state 58
Next token is token ')' (31.12: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (31.9-11: )
-> $$ = nterm unary_expression (31.9-11: )
Stack now 148 119 82 40 145 116 81 39 86 52 24 17 14 8 5 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (31.9-11: )
-> $$ = nterm multiplicative_expression (31.9-11: )
Stack now 148 119 82 40 145 116 81 39 86 52 24 17 14 8 5 0
Entering state 77
Next token is token ')' (31.12: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (31.9-11: )
-> $$ = nterm additive_expression (31.9-11: )
Stack now 148 119 82 40 145 116 81 39 86 52 24 17 14 8 5 0
Entering state 76
Next token is token ')' (31.12: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (31.9-11: )
-> $$ = nterm relational_expression (31.9-11: )
Stack now 148 119 82 40 145 116 81 39 86 52 24 17 14 8 5 0
Entering state 75
Next token is token ')' (31.12: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (31.9-11: )
-> $$ = nterm equality_expression (31.9-11: )
Stack now 148 119 82 40 145 116 81 39 86 52 24 17 14 8 5 0
Entering state 74
Next token is token ')' (31.12: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (31.9-11: )
-> $$ = nterm logical_and_expression (31.9-11: )
Stack now 148 119 82 40 145 116 81 39 86 52 24 17 14 8 5 0
Entering state 73
Next token is token ')' (31.12: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (31.9-11: )
-> $$ = nterm expression (31.9-11: )
Stack now 148 119 82 40 145 116 81 39 86 52 24 17 14 8 5 0
Entering state 155
Next token is token ')' (31.12: )
Reducing stack by rule 77 (line 1397):
   $1 = nterm expression_list (30.16-43: )
   $2 = token ',' (30.44: )
   $3 = nterm expression (31.9-11: )
-> $$ = nterm expression_list (30.16-31.11: )
Stack now 82 40 145 116 81 39 86 52 24 17 14 8 5 0
Entering state 119
Next token is token ')' (31.12: )
Shifting token ')' (31.12: )
Entering state 147
Reading a token: Next token is token ';' (31.13: )
Shifting token ';' (31.13: )
Entering state 154
Reducing stack by rule 43 (line 594):
   $1 = token IDENTIFIER (30.9-14: printf)
   $2 = token '(' (30.15: )
   $3 = nterm expression_list (30.16-31.11: )
   $4 = token ')' (31.12: )
   $5 = token ';' (31.13: )
-> $$ = nterm procedure_call (30.9-31.13: )
Stack now 145 116 81 39 86 52 24 17 14 8 5 0
Entering state 61
Reducing stack by rule 38 (line 474):
   $1 = nterm procedure_call (30.9-31.13: )
-> $$ = nterm statement (30.9-31.13: )
Stack now 145 116 81 39 86 52 24 17 14 8 5 0
Entering state 153
Reading a token: Next token is token ELSE (32.5-8: )
Shifting token ELSE (32.5-8: )
Entering state 157
Reading a token: Next token is token IDENTIFIER (33.9-14: printf)
Shifting token IDENTIFIER (33.9-14: printf)
Entering state 40
Reading a token: Next token is token '(' (33.15: )
Shifting token '(' (33.15: )
Entering state 82
Reading a token: Next token is token STRING_LITERAL (33.16-47: "%d is not an Armstrong number.")
Shifting token STRING_LITERAL (33.16-47: "%d is not an Armstrong number.")
Entering state 43
Reducing stack by rule 74 (line 1382):
   $1 = token STRING_LITERAL (33.16-47: "%d is not an Armstrong number.")
-> $$ = nterm primary_expression (33.16-47: )
Stack now 82 40 157 153 145 116 81 39 86 52 24 17 14 8 5 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (33.16-47: )
-> $$ = nterm postfix_expression (33.16-47: )
Stack now 82 40 157 153 145 116 81 39 86 52 24 17 14 8 5 0
Entering state 58
Reading a token: Next token is token ',' (33.48: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (33.16-47: )
-> $$ = nterm unary_expression (33.16-47: )
Stack now 82 40 157 153 145 116 81 39 86 52 24 17 14 8 5 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (33.16-47: )
-> $$ = nterm multiplicative_expression (33.16-47: )
Stack now 82 40 157 153 145 116 81 39 86 52 24 17 14 8 5 0
Entering state 77
Next token is token ',' (33.48: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (33.16-47: )
-> $$ = nterm additive_expression (33.16-47: )
Stack now 82 40 157 153 145 116 81 39 86 52 24 17 14 8 5 0
Entering state 76
Next token is token ',' (33.48: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (33.16-47: )
-> $$ = nterm relational_expression (33.16-47: )
Stack now 82 40 157 153 145 116 81 39 86 52 24 17 14 8 5 0
Entering state 75
Next token is token ',' (33.48: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (33.16-47: )
-> $$ = nterm equality_expression (33.16-47: )
Stack now 82 40 157 153 145 116 81 39 86 52 24 17 14 8 5 0
Entering state 74
Next token is token ',' (33.48: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (33.16-47: )
-> $$ = nterm logical_and_expression (33.16-47: )
Stack now 82 40 157 153 145 116 81 39 86 52 24 17 14 8 5 0
Entering state 73
Next token is token ',' (33.48: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (33.16-47: )
-> $$ = nterm expression (33.16-47: )
Stack now 82 40 157 153 145 116 81 39 86 52 24 17 14 8 5 0
Entering state 118
Next token is token ',' (33.48: )
Reducing stack by rule 76 (line 1393):
   $1 = nterm expression (33.16-47: )
-> $$ = nterm expression_list (33.16-47: )
Stack now 82 40 157 153 145 116 81 39 86 52 24 17 14 8 5 0
Entering state 119
Next token is token ',' (33.48: )
Shifting token ',' (33.48: )
Entering state 148
Reading a token: Next token is token IDENTIFIER (33.50-52: num)
Shifting token IDENTIFIER (33.50-52: num)
Entering state 71
Reading a token: Next token is token ')' (33.53: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (33.50-52: num)
-> $$ = nterm primary_expression (33.50-52: )
Stack now 148 119 82 40 157 153 145 116 81 39 86 52 24 17 14 8 5 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (33.50-52: )
-> $$ = nterm postfix_expression (33.50-52: )
Stack now 148 119 82 40 157 153 145 116 81 39 86 52 24 17 14 8 5 0
Entering state 58
Next token is token ')' (33.53: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (33.50-52: )
-> $$ = nterm unary_expression (33.50-52: )
Stack now 148 119 82 40 157 153 145 116 81 39 86 52 24 17 14 8 5 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (33.50-52: )
-> $$ = nterm multiplicative_expression (33.50-52: )
Stack now 148 119 82 40 157 153 145 116 81 39 86 52 24 17 14 8 5 0
Entering state 77
Next token is token ')' (33.53: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (33.50-52: )
-> $$ = nterm additive_expression (33.50-52: )
Stack now 148 119 82 40 157 153 145 116 81 39 86 52 24 17 14 8 5 0
Entering state 76
Next token is token ')' (33.53: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (33.50-52: )
-> $$ = nterm relational_expression (33.50-52: )
Stack now 148 119 82 40 157 153 145 116 81 39 86 52 24 17 14 8 5 0
Entering state 75
Next token is token ')' (33.53: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (33.50-52: )
-> $$ = nterm equality_expression (33.50-52: )
Stack now 148 119 82 40 157 153 145 116 81 39 86 52 24 17 14 8 5 0
Entering state 74
Next token is token ')' (33.53: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (33.50-52: )
-> $$ = nterm logical_and_expression (33.50-52: )
Stack now 148 119 82 40 157 153 145 116 81 39 86 52 24 17 14 8 5 0
Entering state 73
Next token is token ')' (33.53: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (33.50-52: )
-> $$ = nterm expression (33.50-52: )
Stack now 148 119 82 40 157 153 145 116 81 39 86 52 24 17 14 8 5 0
Entering state 155
Next token is token ')' (33.53: )
Reducing stack by rule 77 (line 1397):
   $1 = nterm expression_list (33.16-47: )
   $2 = token ',' (33.48: )
   $3 = nterm expression (33.50-52: )
-> $$ = nterm expression_list (33.16-52: )
Stack now 82 40 157 153 145 116 81 39 86 52 24 17 14 8 5 0
Entering state 119
Next token is token ')' (33.53: )
Shifting token ')' (33.53: )
Entering state 147
Reading a token: Next token is token ';' (33.54: )
Shifting token ';' (33.54: )
Entering state 154
Reducing stack by rule 43 (line 594):
   $1 = token IDENTIFIER (33.9-14: printf)
   $2 = token '(' (33.15: )
   $3 = nterm expression_list (33.16-52: )
   $4 = token ')' (33.53: )
   $5 = token ';' (33.54: )
-> $$ = nterm procedure_call (33.9-54: )
Stack now 157 153 145 116 81 39 86 52 24 17 14 8 5 0
Entering state 61
Reducing stack by rule 38 (line 474):
   $1 = nterm procedure_call (33.9-54: )
-> $$ = nterm statement (33.9-54: )
Stack now 157 153 145 116 81 39 86 52 24 17 14 8 5 0
Entering state 159
Reducing stack by rule 82 (line 1419):
   $1 = token IF (29.5-6: )
   $2 = token '(' (29.8: )
   $3 = nterm expression (29.9-21: )
   $4 = token ')' (29.22: )
   $5 = nterm statement (30.9-31.13: )
   $6 = token ELSE (32.5-8: )
   $7 = nterm statement (33.9-54: )
-> $$ = nterm selection_statement (29.5-33.54: )
Stack now 86 52 24 17 14 8 5 0
Entering state 62
Reducing stack by rule 35 (line 463):
   $1 = nterm selection_statement (29.5-33.54: )
-> $$ = nterm statement (29.5-33.54: )
Stack now 86 52 24 17 14 8 5 0
Entering state 88
Reducing stack by rule 32 (line 449):
   $1 = nterm statement_list (14.5-27.5: )
   $2 = nterm statement (29.5-33.54: )
-> $$ = nterm statement_list (14.5-33.54: )
Stack now 52 24 17 14 8 5 0
Entering state 86
Reading a token: Next token is token RETURN (35.5-10: )
Shifting token RETURN (35.5-10: )
Entering state 36
Reading a token: Next token is token FLOAT_CONSTANT (35.12-14: 4.0)
Shifting token FLOAT_CONSTANT (35.12-14: 4.0)
Entering state 42
Reducing stack by rule 73 (line 1377):
   $1 = token FLOAT_CONSTANT (35.12-14: 4.0)
-> $$ = nterm primary_expression (35.12-14: )
Stack now 36 86 52 24 17 14 8 5 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (35.12-14: )
-> $$ = nterm postfix_expression (35.12-14: )
Stack now 36 86 52 24 17 14 8 5 0
Entering state 58
Reading a token: Next token is token ';' (35.15: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (35.12-14: )
-> $$ = nterm unary_expression (35.12-14: )
Stack now 36 86 52 24 17 14 8 5 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (35.12-14: )
-> $$ = nterm multiplicative_expression (35.12-14: )
Stack now 36 86 52 24 17 14 8 5 0
Entering state 77
Next token is token ';' (35.15: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (35.12-14: )
-> $$ = nterm additive_expression (35.12-14: )
Stack now 36 86 52 24 17 14 8 5 0
Entering state 76
Next token is token ';' (35.15: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (35.12-14: )
-> $$ = nterm relational_expression (35.12-14: )
Stack now 36 86 52 24 17 14 8 5 0
Entering state 75
Next token is token ';' (35.15: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (35.12-14: )
-> $$ = nterm equality_expression (35.12-14: )
Stack now 36 86 52 24 17 14 8 5 0
Entering state 74
Next token is token ';' (35.15: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (35.12-14: )
-> $$ = nterm logical_and_expression (35.12-14: )
Stack now 36 86 52 24 17 14 8 5 0
Entering state 73
Next token is token ';' (35.15: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (35.12-14: )
-> $$ = nterm expression (35.12-14: )
Stack now 36 86 52 24 17 14 8 5 0
Entering state 72
Next token is token ';' (35.15: )
Shifting token ';' (35.15: )
Entering state 102
Reducing stack by rule 39 (line 477):
   $1 = token RETURN (35.5-10: )
   $2 = nterm expression (35.12-14: )
   $3 = token ';' (35.15: )
-> $$ = nterm statement (35.5-15: )
Stack now 86 52 24 17 14 8 5 0
Entering state 88
Reducing stack by rule 32 (line 449):
   $1 = nterm statement_list (14.5-33.54: )
   $2 = nterm statement (35.5-15: )
-> $$ = nterm statement_list (14.5-35.15: )
Stack now 52 24 17 14 8 5 0
Entering state 86
Reading a token: Next token is token '}' (36.1: )
Shifting token '}' (36.1: )
Entering state 122
Reducing stack by rule 30 (line 436):
   $1 = token '{' (11.12: )
   $2 = nterm declaration_list (12.5-13.16: )
   $3 = nterm statement_list (14.5-35.15: )
   $4 = token '}' (36.1: )
-> $$ = nterm compound_statement (11.12-36.1: )
Stack now 17 14 8 5 0
Entering state 25
Reducing stack by rule 8 (line 158):
   $1 = nterm type_specifier (11.1-3: )
   $2 = nterm fun_declarator (11.5-10: )
   $3 = nterm $@2 (11.11: )
   $4 = nterm compound_statement (11.12-36.1: )
-> $$ = nterm function_definition (11.1-36.1: )
Stack now 5 0
Entering state 12
Reducing stack by rule 4 (line 130):
   $1 = nterm translation_unit (1.1-10.1: )
   $2 = nterm function_definition (11.1-36.1: )
-> $$ = nterm translation_unit (1.1-36.1: )
Stack now 0
Entering state 5
Reading a token: Next token is token $end (36.2-37.0: )
Shifting token $end (36.2-37.0: )
Entering state 10
Cleanup: popping token $end (36.2-37.0: )
Cleanup: popping nterm translation_unit (1.1-36.1: )
