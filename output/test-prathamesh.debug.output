Starting parse
Entering state 0
Reading a token: Next token is token INT (2.1-3: )
Shifting token INT (2.1-3: )
Entering state 2
Reducing stack by rule 10 (line 228):
   $1 = token INT (2.1-3: )
-> $$ = nterm type_specifier (2.1-3: )
Stack now 0
Entering state 8
Reading a token: Next token is token IDENTIFIER (2.5-8: main)
Shifting token IDENTIFIER (2.5-8: main)
Entering state 13
Reading a token: Next token is token '(' (2.9: )
Shifting token '(' (2.9: )
Entering state 16
Reading a token: Next token is token ')' (2.10: )
Shifting token ')' (2.10: )
Entering state 20
Reducing stack by rule 14 (line 244):
   $1 = token IDENTIFIER (2.5-8: main)
   $2 = token '(' (2.9: )
   $3 = token ')' (2.10: )
-> $$ = nterm fun_declarator (2.5-10: )
Stack now 8 0
Entering state 14
Reducing stack by rule 7 (line 159):
-> $$ = nterm $@2 (2.11: )
Stack now 14 8 0
Entering state 17
Reading a token: Next token is token '{' (3.1: )
Shifting token '{' (3.1: )
Entering state 24
Reading a token: Next token is token INT (4.5-7: )
Shifting token INT (4.5-7: )
Entering state 2
Reducing stack by rule 10 (line 228):
   $1 = token INT (4.5-7: )
-> $$ = nterm type_specifier (4.5-7: )
Stack now 24 17 14 8 0
Entering state 26
Reading a token: Next token is token IDENTIFIER (4.9: x)
Shifting token IDENTIFIER (4.9: x)
Entering state 30
Reducing stack by rule 18 (line 275):
   $1 = token IDENTIFIER (4.9: x)
-> $$ = nterm declarator_arr (4.9: )
Stack now 26 24 17 14 8 0
Entering state 32
Reading a token: Next token is token '[' (4.10: )
Shifting token '[' (4.10: )
Entering state 69
Reading a token: Next token is token INT_CONSTANT (4.11-12: 20)
Shifting token INT_CONSTANT (4.11-12: 20)
Entering state 99
Reading a token: Next token is token ']' (4.13: )
Shifting token ']' (4.13: )
Entering state 128
Reducing stack by rule 19 (line 278):
   $1 = nterm declarator_arr (4.9: )
   $2 = token '[' (4.10: )
   $3 = token INT_CONSTANT (4.11-12: 20)
   $4 = token ']' (4.13: )
-> $$ = nterm declarator_arr (4.9-13: )
Stack now 26 24 17 14 8 0
Entering state 32
Reading a token: Next token is token ';' (4.14: )
Reducing stack by rule 20 (line 294):
   $1 = nterm declarator_arr (4.9-13: )
-> $$ = nterm declarator (4.9-13: )
Stack now 26 24 17 14 8 0
Entering state 64
Reducing stack by rule 25 (line 414):
   $1 = nterm declarator (4.9-13: )
-> $$ = nterm declarator_list (4.9-13: )
Stack now 26 24 17 14 8 0
Entering state 65
Next token is token ';' (4.14: )
Shifting token ';' (4.14: )
Entering state 97
Reducing stack by rule 24 (line 408):
   $1 = nterm type_specifier (4.5-7: )
   $2 = nterm declarator_list (4.9-13: )
   $3 = token ';' (4.14: )
-> $$ = nterm declaration (4.5-14: )
Stack now 24 17 14 8 0
Entering state 27
Reducing stack by rule 22 (line 304):
   $1 = nterm declaration (4.5-14: )
-> $$ = nterm declaration_list (4.5-14: )
Stack now 24 17 14 8 0
Entering state 52
Reading a token: Next token is token INT (5.5-7: )
Shifting token INT (5.5-7: )
Entering state 2
Reducing stack by rule 10 (line 228):
   $1 = token INT (5.5-7: )
-> $$ = nterm type_specifier (5.5-7: )
Stack now 52 24 17 14 8 0
Entering state 26
Reading a token: Next token is token '*' (5.9: )
Shifting token '*' (5.9: )
Entering state 31
Reading a token: Next token is token IDENTIFIER (5.10: y)
Shifting token IDENTIFIER (5.10: y)
Entering state 30
Reducing stack by rule 18 (line 275):
   $1 = token IDENTIFIER (5.10: y)
-> $$ = nterm declarator_arr (5.10: )
Stack now 31 26 52 24 17 14 8 0
Entering state 32
Reading a token: Next token is token ';' (5.11: )
Reducing stack by rule 20 (line 294):
   $1 = nterm declarator_arr (5.10: )
-> $$ = nterm declarator (5.10: )
Stack now 31 26 52 24 17 14 8 0
Entering state 68
Reducing stack by rule 21 (line 297):
   $1 = token '*' (5.9: )
   $2 = nterm declarator (5.10: )
-> $$ = nterm declarator (5.9-10: )
Stack now 26 52 24 17 14 8 0
Entering state 64
Reducing stack by rule 25 (line 414):
   $1 = nterm declarator (5.9-10: )
-> $$ = nterm declarator_list (5.9-10: )
Stack now 26 52 24 17 14 8 0
Entering state 65
Next token is token ';' (5.11: )
Shifting token ';' (5.11: )
Entering state 97
Reducing stack by rule 24 (line 408):
   $1 = nterm type_specifier (5.5-7: )
   $2 = nterm declarator_list (5.9-10: )
   $3 = token ';' (5.11: )
-> $$ = nterm declaration (5.5-11: )
Stack now 52 24 17 14 8 0
Entering state 67
Reducing stack by rule 23 (line 356):
   $1 = nterm declaration_list (4.5-14: )
   $2 = nterm declaration (5.5-11: )
-> $$ = nterm declaration_list (4.5-5.11: )
Stack now 24 17 14 8 0
Entering state 52
Reading a token: Next token is token IDENTIFIER (6.5: y)
Shifting token IDENTIFIER (6.5: y)
Entering state 40
Reading a token: Next token is token '=' (6.7: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (6.5: y)
-> $$ = nterm primary_expression (6.5: )
Stack now 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (6.5: )
-> $$ = nterm postfix_expression (6.5: )
Stack now 52 24 17 14 8 0
Entering state 58
Next token is token '=' (6.7: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (6.5: )
-> $$ = nterm unary_expression (6.5: )
Stack now 52 24 17 14 8 0
Entering state 57
Next token is token '=' (6.7: )
Shifting token '=' (6.7: )
Entering state 90
Reading a token: Next token is token IDENTIFIER (6.9: x)
Shifting token IDENTIFIER (6.9: x)
Entering state 71
Reading a token: Next token is token '+' (6.11: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (6.9: x)
-> $$ = nterm primary_expression (6.9: )
Stack now 90 57 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (6.9: )
-> $$ = nterm postfix_expression (6.9: )
Stack now 90 57 52 24 17 14 8 0
Entering state 58
Next token is token '+' (6.11: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (6.9: )
-> $$ = nterm unary_expression (6.9: )
Stack now 90 57 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (6.9: )
-> $$ = nterm multiplicative_expression (6.9: )
Stack now 90 57 52 24 17 14 8 0
Entering state 77
Next token is token '+' (6.11: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (6.9: )
-> $$ = nterm additive_expression (6.9: )
Stack now 90 57 52 24 17 14 8 0
Entering state 76
Next token is token '+' (6.11: )
Shifting token '+' (6.11: )
Entering state 110
Reading a token: Next token is token INT_CONSTANT (6.13: 1)
Shifting token INT_CONSTANT (6.13: 1)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (6.13: 1)
-> $$ = nterm primary_expression (6.13: )
Stack now 110 76 90 57 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (6.13: )
-> $$ = nterm postfix_expression (6.13: )
Stack now 110 76 90 57 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ';' (6.14: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (6.13: )
-> $$ = nterm unary_expression (6.13: )
Stack now 110 76 90 57 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (6.13: )
-> $$ = nterm multiplicative_expression (6.13: )
Stack now 110 76 90 57 52 24 17 14 8 0
Entering state 139
Next token is token ';' (6.14: )
Reducing stack by rule 57 (line 954):
   $1 = nterm additive_expression (6.9: )
   $2 = token '+' (6.11: )
   $3 = nterm multiplicative_expression (6.13: )
-> $$ = nterm additive_expression (6.9-13: )
Stack now 90 57 52 24 17 14 8 0
Entering state 76
Next token is token ';' (6.14: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (6.9-13: )
-> $$ = nterm relational_expression (6.9-13: )
Stack now 90 57 52 24 17 14 8 0
Entering state 75
Next token is token ';' (6.14: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (6.9-13: )
-> $$ = nterm equality_expression (6.9-13: )
Stack now 90 57 52 24 17 14 8 0
Entering state 74
Next token is token ';' (6.14: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (6.9-13: )
-> $$ = nterm logical_and_expression (6.9-13: )
Stack now 90 57 52 24 17 14 8 0
Entering state 73
Next token is token ';' (6.14: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (6.9-13: )
-> $$ = nterm expression (6.9-13: )
Stack now 90 57 52 24 17 14 8 0
Entering state 123
Next token is token ';' (6.14: )
Reducing stack by rule 40 (line 506):
   $1 = nterm unary_expression (6.5: )
   $2 = token '=' (6.7: )
   $3 = nterm expression (6.9-13: )
-> $$ = nterm assignment_expression (6.5-13: )
Stack now 52 24 17 14 8 0
Entering state 56
Next token is token ';' (6.14: )
Shifting token ';' (6.14: )
Entering state 89
Reducing stack by rule 41 (line 559):
   $1 = nterm assignment_expression (6.5-13: )
   $2 = token ';' (6.14: )
-> $$ = nterm assignment_statement (6.5-14: )
Stack now 52 24 17 14 8 0
Entering state 54
Reducing stack by rule 37 (line 469):
   $1 = nterm assignment_statement (6.5-14: )
-> $$ = nterm statement (6.5-14: )
Stack now 52 24 17 14 8 0
Entering state 53
Reducing stack by rule 31 (line 444):
   $1 = nterm statement (6.5-14: )
-> $$ = nterm statement_list (6.5-14: )
Stack now 52 24 17 14 8 0
Entering state 86
Reading a token: Next token is token IDENTIFIER (7.5: y)
Shifting token IDENTIFIER (7.5: y)
Entering state 40
Reading a token: Next token is token '=' (7.7: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (7.5: y)
-> $$ = nterm primary_expression (7.5: )
Stack now 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (7.5: )
-> $$ = nterm postfix_expression (7.5: )
Stack now 86 52 24 17 14 8 0
Entering state 58
Next token is token '=' (7.7: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (7.5: )
-> $$ = nterm unary_expression (7.5: )
Stack now 86 52 24 17 14 8 0
Entering state 57
Next token is token '=' (7.7: )
Shifting token '=' (7.7: )
Entering state 90
Reading a token: Next token is token IDENTIFIER (7.9: y)
Shifting token IDENTIFIER (7.9: y)
Entering state 71
Reading a token: Next token is token INC_OP (7.10-11: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (7.9: y)
-> $$ = nterm primary_expression (7.9: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (7.9: )
-> $$ = nterm postfix_expression (7.9: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 58
Next token is token INC_OP (7.10-11: )
Shifting token INC_OP (7.10-11: )
Entering state 94
Reducing stack by rule 70 (line 1336):
   $1 = nterm postfix_expression (7.9: )
   $2 = token INC_OP (7.10-11: )
-> $$ = nterm postfix_expression (7.9-11: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ';' (7.12: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (7.9-11: )
-> $$ = nterm unary_expression (7.9-11: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (7.9-11: )
-> $$ = nterm multiplicative_expression (7.9-11: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 77
Next token is token ';' (7.12: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (7.9-11: )
-> $$ = nterm additive_expression (7.9-11: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 76
Next token is token ';' (7.12: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (7.9-11: )
-> $$ = nterm relational_expression (7.9-11: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 75
Next token is token ';' (7.12: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (7.9-11: )
-> $$ = nterm equality_expression (7.9-11: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 74
Next token is token ';' (7.12: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (7.9-11: )
-> $$ = nterm logical_and_expression (7.9-11: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 73
Next token is token ';' (7.12: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (7.9-11: )
-> $$ = nterm expression (7.9-11: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 123
Next token is token ';' (7.12: )
Reducing stack by rule 40 (line 506):
   $1 = nterm unary_expression (7.5: )
   $2 = token '=' (7.7: )
   $3 = nterm expression (7.9-11: )
-> $$ = nterm assignment_expression (7.5-11: )
Stack now 86 52 24 17 14 8 0
Entering state 56
Next token is token ';' (7.12: )
Shifting token ';' (7.12: )
Entering state 89
Reducing stack by rule 41 (line 559):
   $1 = nterm assignment_expression (7.5-11: )
   $2 = token ';' (7.12: )
-> $$ = nterm assignment_statement (7.5-12: )
Stack now 86 52 24 17 14 8 0
Entering state 54
Reducing stack by rule 37 (line 469):
   $1 = nterm assignment_statement (7.5-12: )
-> $$ = nterm statement (7.5-12: )
Stack now 86 52 24 17 14 8 0
Entering state 88
Reducing stack by rule 32 (line 449):
   $1 = nterm statement_list (6.5-14: )
   $2 = nterm statement (7.5-12: )
-> $$ = nterm statement_list (6.5-7.12: )
Stack now 52 24 17 14 8 0
Entering state 86
Reading a token: Next token is token IDENTIFIER (8.5: y)
Shifting token IDENTIFIER (8.5: y)
Entering state 40
Reading a token: Next token is token '=' (8.7: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (8.5: y)
-> $$ = nterm primary_expression (8.5: )
Stack now 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (8.5: )
-> $$ = nterm postfix_expression (8.5: )
Stack now 86 52 24 17 14 8 0
Entering state 58
Next token is token '=' (8.7: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (8.5: )
-> $$ = nterm unary_expression (8.5: )
Stack now 86 52 24 17 14 8 0
Entering state 57
Next token is token '=' (8.7: )
Shifting token '=' (8.7: )
Entering state 90
Reading a token: Next token is token INT_CONSTANT (8.9: 0)
Shifting token INT_CONSTANT (8.9: 0)
Entering state 41
Reducing stack by rule 72 (line 1368):
   $1 = token INT_CONSTANT (8.9: 0)
-> $$ = nterm primary_expression (8.9: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (8.9: )
-> $$ = nterm postfix_expression (8.9: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 58
Reading a token: Next token is token ';' (8.10: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (8.9: )
-> $$ = nterm unary_expression (8.9: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (8.9: )
-> $$ = nterm multiplicative_expression (8.9: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 77
Next token is token ';' (8.10: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (8.9: )
-> $$ = nterm additive_expression (8.9: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 76
Next token is token ';' (8.10: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (8.9: )
-> $$ = nterm relational_expression (8.9: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 75
Next token is token ';' (8.10: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (8.9: )
-> $$ = nterm equality_expression (8.9: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 74
Next token is token ';' (8.10: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (8.9: )
-> $$ = nterm logical_and_expression (8.9: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 73
Next token is token ';' (8.10: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (8.9: )
-> $$ = nterm expression (8.9: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 123
Next token is token ';' (8.10: )
Reducing stack by rule 40 (line 506):
   $1 = nterm unary_expression (8.5: )
   $2 = token '=' (8.7: )
   $3 = nterm expression (8.9: )
-> $$ = nterm assignment_expression (8.5-9: )
Stack now 86 52 24 17 14 8 0
Entering state 56
Next token is token ';' (8.10: )
Shifting token ';' (8.10: )
Entering state 89
Reducing stack by rule 41 (line 559):
   $1 = nterm assignment_expression (8.5-9: )
   $2 = token ';' (8.10: )
-> $$ = nterm assignment_statement (8.5-10: )
Stack now 86 52 24 17 14 8 0
Entering state 54
Reducing stack by rule 37 (line 469):
   $1 = nterm assignment_statement (8.5-10: )
-> $$ = nterm statement (8.5-10: )
Stack now 86 52 24 17 14 8 0
Entering state 88
Reducing stack by rule 32 (line 449):
   $1 = nterm statement_list (6.5-7.12: )
   $2 = nterm statement (8.5-10: )
-> $$ = nterm statement_list (6.5-8.10: )
Stack now 52 24 17 14 8 0
Entering state 86
Reading a token: Next token is token IDENTIFIER (9.5: y)
Shifting token IDENTIFIER (9.5: y)
Entering state 40
Reading a token: Next token is token '=' (9.7: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (9.5: y)
-> $$ = nterm primary_expression (9.5: )
Stack now 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (9.5: )
-> $$ = nterm postfix_expression (9.5: )
Stack now 86 52 24 17 14 8 0
Entering state 58
Next token is token '=' (9.7: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (9.5: )
-> $$ = nterm unary_expression (9.5: )
Stack now 86 52 24 17 14 8 0
Entering state 57
Next token is token '=' (9.7: )
Shifting token '=' (9.7: )
Entering state 90
Reading a token: Next token is token '&' (9.9: )
Shifting token '&' (9.9: )
Entering state 51
Reducing stack by rule 80 (line 1410):
   $1 = token '&' (9.9: )
-> $$ = nterm unary_operator (9.9: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 60
Reading a token: Next token is token IDENTIFIER (9.10: x)
Shifting token IDENTIFIER (9.10: x)
Entering state 71
Reading a token: Next token is token ';' (9.11: )
Reducing stack by rule 71 (line 1357):
   $1 = token IDENTIFIER (9.10: x)
-> $$ = nterm primary_expression (9.10: )
Stack now 60 90 57 86 52 24 17 14 8 0
Entering state 59
Reducing stack by rule 64 (line 1194):
   $1 = nterm primary_expression (9.10: )
-> $$ = nterm postfix_expression (9.10: )
Stack now 60 90 57 86 52 24 17 14 8 0
Entering state 58
Next token is token ';' (9.11: )
Reducing stack by rule 59 (line 1060):
   $1 = nterm postfix_expression (9.10: )
-> $$ = nterm unary_expression (9.10: )
Stack now 60 90 57 86 52 24 17 14 8 0
Entering state 95
Reducing stack by rule 60 (line 1063):
   $1 = nterm unary_operator (9.9: )
   $2 = nterm unary_expression (9.10: )
-> $$ = nterm unary_expression (9.9-10: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 78
Reducing stack by rule 61 (line 1124):
   $1 = nterm unary_expression (9.9-10: )
-> $$ = nterm multiplicative_expression (9.9-10: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 77
Next token is token ';' (9.11: )
Reducing stack by rule 56 (line 951):
   $1 = nterm multiplicative_expression (9.9-10: )
-> $$ = nterm additive_expression (9.9-10: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 76
Next token is token ';' (9.11: )
Reducing stack by rule 51 (line 776):
   $1 = nterm additive_expression (9.9-10: )
-> $$ = nterm relational_expression (9.9-10: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 75
Next token is token ';' (9.11: )
Reducing stack by rule 48 (line 698):
   $1 = nterm relational_expression (9.9-10: )
-> $$ = nterm equality_expression (9.9-10: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 74
Next token is token ';' (9.11: )
Reducing stack by rule 46 (line 677):
   $1 = nterm equality_expression (9.9-10: )
-> $$ = nterm logical_and_expression (9.9-10: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 73
Next token is token ';' (9.11: )
Reducing stack by rule 44 (line 653):
   $1 = nterm logical_and_expression (9.9-10: )
-> $$ = nterm expression (9.9-10: )
Stack now 90 57 86 52 24 17 14 8 0
Entering state 123
Next token is token ';' (9.11: )
Reducing stack by rule 40 (line 506):
   $1 = nterm unary_expression (9.5: )
   $2 = token '=' (9.7: )
   $3 = nterm expression (9.9-10: )
